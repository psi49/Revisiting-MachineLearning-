{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "id": "cc_KpkxzP3D6"
   },
   "outputs": [],
   "source": [
    "#Library for reading csv and related operations\n",
    "import pandas as pd\n",
    "#for numberical operations\n",
    "import numpy as np\n",
    "import random\n",
    "import math\n",
    "\n",
    "\n",
    "#Pre processing and evaluation\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "#LSTM Model\n",
    "import tensorflow as tf\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, LSTM, RepeatVector, TimeDistributed\n",
    "\n",
    "#Optimizer\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Settings seeds\n",
    "np.random.seed(42)\n",
    "random.seed(12345)\n",
    "tf.random.set_seed(1234)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kUV-B0CQg6g2"
   },
   "source": [
    "Australian domestic tourism dataset samples obtained from the National Visitor Survey, managed by TRA.\n",
    "\n",
    "This dataset was collected annually by computer-assisted telephone interviews from more than 120,000 Australians aged 15 years.\n",
    "\n",
    "We disaggregated the data based on a few purposes of travel: holiday, visiting friends and relatives, business, and others. The included observations span between 1998 to 2006 (9 years), in a\n",
    "total of 36 quarterly (4 months) observations. The structure of this hierarchy time series displayed below\n",
    "\n",
    "\n",
    "Level (No.) Group No. of Series Per Level\n",
    "* (0) Australia 1\n",
    "* (1) Purpose of Travel 4\n",
    "* (2) States and Territories 28\n",
    "* (3) Capital city versus others 56"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PcwvmKEBhXwh"
   },
   "source": [
    "In our experiments, we perform an out-of-sample forecast assessment to estimate all models using the first 20 observations (i.e., from 1998:Q1 to 2002:Q4) and then produced from 1-step ahead up to 8-step ahead forecasts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "p6VI1rb4htmn"
   },
   "source": [
    "This hierarchical dataset contains four levels, therefore, the results displayed below\n",
    "were estimated considering the hierarchical structure for the following levels:\n",
    "* Level 0 (top): total visitors in Australia;\n",
    "* Level 1 (middle): total visitors according to the purpose of travel, with total four\n",
    "travel purposes;\n",
    "* Level 2 (middle): total visitors according to a state visit, with a total of 28 state visits;\n",
    "* Level 3 (bottom): total visitors according to city visit, with a total of 56 visits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "janB5vMKP4RN",
    "outputId": "3407df63-68d0-4e07-8d43-65900b0d8462"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth</th>\n",
       "      <th>SA - oth</th>\n",
       "      <th>WA - oth</th>\n",
       "      <th>TAS - oth</th>\n",
       "      <th>NT - oth</th>\n",
       "      <th>Hol</th>\n",
       "      <th>vfr</th>\n",
       "      <th>bus</th>\n",
       "      <th>oth</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3096</td>\n",
       "      <td>14493</td>\n",
       "      <td>2531</td>\n",
       "      <td>7881</td>\n",
       "      <td>4688</td>\n",
       "      <td>4390</td>\n",
       "      <td>888</td>\n",
       "      <td>2201</td>\n",
       "      <td>1383</td>\n",
       "      <td>2066</td>\n",
       "      <td>...</td>\n",
       "      <td>702</td>\n",
       "      <td>317</td>\n",
       "      <td>205</td>\n",
       "      <td>100</td>\n",
       "      <td>43</td>\n",
       "      <td>45906</td>\n",
       "      <td>26042</td>\n",
       "      <td>9815</td>\n",
       "      <td>2740</td>\n",
       "      <td>84503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1479</td>\n",
       "      <td>9548</td>\n",
       "      <td>1439</td>\n",
       "      <td>4586</td>\n",
       "      <td>2320</td>\n",
       "      <td>3990</td>\n",
       "      <td>521</td>\n",
       "      <td>1414</td>\n",
       "      <td>1059</td>\n",
       "      <td>1395</td>\n",
       "      <td>...</td>\n",
       "      <td>839</td>\n",
       "      <td>363</td>\n",
       "      <td>269</td>\n",
       "      <td>97</td>\n",
       "      <td>108</td>\n",
       "      <td>29347</td>\n",
       "      <td>20676</td>\n",
       "      <td>11823</td>\n",
       "      <td>3466</td>\n",
       "      <td>65312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1609</td>\n",
       "      <td>7301</td>\n",
       "      <td>1488</td>\n",
       "      <td>3572</td>\n",
       "      <td>4758</td>\n",
       "      <td>6975</td>\n",
       "      <td>476</td>\n",
       "      <td>1093</td>\n",
       "      <td>1101</td>\n",
       "      <td>2297</td>\n",
       "      <td>...</td>\n",
       "      <td>1434</td>\n",
       "      <td>712</td>\n",
       "      <td>1546</td>\n",
       "      <td>55</td>\n",
       "      <td>488</td>\n",
       "      <td>32492</td>\n",
       "      <td>20582</td>\n",
       "      <td>13565</td>\n",
       "      <td>6114</td>\n",
       "      <td>72753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1520</td>\n",
       "      <td>9138</td>\n",
       "      <td>1906</td>\n",
       "      <td>3575</td>\n",
       "      <td>3328</td>\n",
       "      <td>4781</td>\n",
       "      <td>571</td>\n",
       "      <td>1699</td>\n",
       "      <td>1128</td>\n",
       "      <td>2433</td>\n",
       "      <td>...</td>\n",
       "      <td>749</td>\n",
       "      <td>454</td>\n",
       "      <td>1549</td>\n",
       "      <td>91</td>\n",
       "      <td>625</td>\n",
       "      <td>31813</td>\n",
       "      <td>21613</td>\n",
       "      <td>11478</td>\n",
       "      <td>5976</td>\n",
       "      <td>70880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1958</td>\n",
       "      <td>14194</td>\n",
       "      <td>2517</td>\n",
       "      <td>8441</td>\n",
       "      <td>4930</td>\n",
       "      <td>5117</td>\n",
       "      <td>873</td>\n",
       "      <td>2150</td>\n",
       "      <td>1560</td>\n",
       "      <td>2727</td>\n",
       "      <td>...</td>\n",
       "      <td>1015</td>\n",
       "      <td>180</td>\n",
       "      <td>190</td>\n",
       "      <td>137</td>\n",
       "      <td>62</td>\n",
       "      <td>46793</td>\n",
       "      <td>26947</td>\n",
       "      <td>10027</td>\n",
       "      <td>3126</td>\n",
       "      <td>86893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1372</td>\n",
       "      <td>8468</td>\n",
       "      <td>1485</td>\n",
       "      <td>4356</td>\n",
       "      <td>3459</td>\n",
       "      <td>4629</td>\n",
       "      <td>481</td>\n",
       "      <td>1738</td>\n",
       "      <td>1909</td>\n",
       "      <td>1996</td>\n",
       "      <td>...</td>\n",
       "      <td>919</td>\n",
       "      <td>471</td>\n",
       "      <td>286</td>\n",
       "      <td>160</td>\n",
       "      <td>135</td>\n",
       "      <td>31442</td>\n",
       "      <td>19481</td>\n",
       "      <td>11875</td>\n",
       "      <td>4068</td>\n",
       "      <td>66866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1561</td>\n",
       "      <td>7704</td>\n",
       "      <td>1512</td>\n",
       "      <td>3592</td>\n",
       "      <td>3815</td>\n",
       "      <td>8738</td>\n",
       "      <td>477</td>\n",
       "      <td>1235</td>\n",
       "      <td>995</td>\n",
       "      <td>2734</td>\n",
       "      <td>...</td>\n",
       "      <td>2800</td>\n",
       "      <td>246</td>\n",
       "      <td>789</td>\n",
       "      <td>75</td>\n",
       "      <td>257</td>\n",
       "      <td>34623</td>\n",
       "      <td>20026</td>\n",
       "      <td>11713</td>\n",
       "      <td>5820</td>\n",
       "      <td>72182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1687</td>\n",
       "      <td>8740</td>\n",
       "      <td>1321</td>\n",
       "      <td>3453</td>\n",
       "      <td>3769</td>\n",
       "      <td>5883</td>\n",
       "      <td>590</td>\n",
       "      <td>1350</td>\n",
       "      <td>778</td>\n",
       "      <td>1954</td>\n",
       "      <td>...</td>\n",
       "      <td>1343</td>\n",
       "      <td>651</td>\n",
       "      <td>867</td>\n",
       "      <td>90</td>\n",
       "      <td>362</td>\n",
       "      <td>31118</td>\n",
       "      <td>20431</td>\n",
       "      <td>10582</td>\n",
       "      <td>6187</td>\n",
       "      <td>68318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2769</td>\n",
       "      <td>13571</td>\n",
       "      <td>2294</td>\n",
       "      <td>7678</td>\n",
       "      <td>4824</td>\n",
       "      <td>5253</td>\n",
       "      <td>932</td>\n",
       "      <td>2350</td>\n",
       "      <td>2412</td>\n",
       "      <td>2719</td>\n",
       "      <td>...</td>\n",
       "      <td>887</td>\n",
       "      <td>429</td>\n",
       "      <td>631</td>\n",
       "      <td>171</td>\n",
       "      <td>93</td>\n",
       "      <td>47030</td>\n",
       "      <td>24284</td>\n",
       "      <td>9734</td>\n",
       "      <td>4603</td>\n",
       "      <td>85651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1275</td>\n",
       "      <td>8522</td>\n",
       "      <td>1619</td>\n",
       "      <td>4139</td>\n",
       "      <td>3880</td>\n",
       "      <td>4684</td>\n",
       "      <td>427</td>\n",
       "      <td>1418</td>\n",
       "      <td>1158</td>\n",
       "      <td>2166</td>\n",
       "      <td>...</td>\n",
       "      <td>547</td>\n",
       "      <td>432</td>\n",
       "      <td>511</td>\n",
       "      <td>80</td>\n",
       "      <td>86</td>\n",
       "      <td>30852</td>\n",
       "      <td>19430</td>\n",
       "      <td>10590</td>\n",
       "      <td>3595</td>\n",
       "      <td>64467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2459</td>\n",
       "      <td>7935</td>\n",
       "      <td>1288</td>\n",
       "      <td>3455</td>\n",
       "      <td>4229</td>\n",
       "      <td>6573</td>\n",
       "      <td>587</td>\n",
       "      <td>2012</td>\n",
       "      <td>610</td>\n",
       "      <td>2508</td>\n",
       "      <td>...</td>\n",
       "      <td>1701</td>\n",
       "      <td>328</td>\n",
       "      <td>666</td>\n",
       "      <td>98</td>\n",
       "      <td>648</td>\n",
       "      <td>34157</td>\n",
       "      <td>19358</td>\n",
       "      <td>11311</td>\n",
       "      <td>5590</td>\n",
       "      <td>70416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2916</td>\n",
       "      <td>8320</td>\n",
       "      <td>1336</td>\n",
       "      <td>4102</td>\n",
       "      <td>3734</td>\n",
       "      <td>4953</td>\n",
       "      <td>610</td>\n",
       "      <td>1363</td>\n",
       "      <td>1455</td>\n",
       "      <td>1558</td>\n",
       "      <td>...</td>\n",
       "      <td>1872</td>\n",
       "      <td>362</td>\n",
       "      <td>553</td>\n",
       "      <td>73</td>\n",
       "      <td>284</td>\n",
       "      <td>32332</td>\n",
       "      <td>21834</td>\n",
       "      <td>13075</td>\n",
       "      <td>5614</td>\n",
       "      <td>72855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2030</td>\n",
       "      <td>12995</td>\n",
       "      <td>2899</td>\n",
       "      <td>8288</td>\n",
       "      <td>4522</td>\n",
       "      <td>5037</td>\n",
       "      <td>790</td>\n",
       "      <td>2248</td>\n",
       "      <td>1159</td>\n",
       "      <td>1977</td>\n",
       "      <td>...</td>\n",
       "      <td>1032</td>\n",
       "      <td>281</td>\n",
       "      <td>341</td>\n",
       "      <td>249</td>\n",
       "      <td>28</td>\n",
       "      <td>44072</td>\n",
       "      <td>23461</td>\n",
       "      <td>9031</td>\n",
       "      <td>3821</td>\n",
       "      <td>80385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1763</td>\n",
       "      <td>8176</td>\n",
       "      <td>1847</td>\n",
       "      <td>4261</td>\n",
       "      <td>3377</td>\n",
       "      <td>5088</td>\n",
       "      <td>430</td>\n",
       "      <td>1608</td>\n",
       "      <td>937</td>\n",
       "      <td>2667</td>\n",
       "      <td>...</td>\n",
       "      <td>1148</td>\n",
       "      <td>466</td>\n",
       "      <td>519</td>\n",
       "      <td>188</td>\n",
       "      <td>142</td>\n",
       "      <td>32250</td>\n",
       "      <td>20351</td>\n",
       "      <td>10366</td>\n",
       "      <td>5000</td>\n",
       "      <td>67967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1383</td>\n",
       "      <td>7482</td>\n",
       "      <td>1327</td>\n",
       "      <td>3477</td>\n",
       "      <td>4545</td>\n",
       "      <td>6879</td>\n",
       "      <td>611</td>\n",
       "      <td>1104</td>\n",
       "      <td>999</td>\n",
       "      <td>2414</td>\n",
       "      <td>...</td>\n",
       "      <td>1491</td>\n",
       "      <td>479</td>\n",
       "      <td>516</td>\n",
       "      <td>59</td>\n",
       "      <td>447</td>\n",
       "      <td>32259</td>\n",
       "      <td>20876</td>\n",
       "      <td>11888</td>\n",
       "      <td>4826</td>\n",
       "      <td>69849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1517</td>\n",
       "      <td>8941</td>\n",
       "      <td>1517</td>\n",
       "      <td>3638</td>\n",
       "      <td>4892</td>\n",
       "      <td>5505</td>\n",
       "      <td>643</td>\n",
       "      <td>1529</td>\n",
       "      <td>830</td>\n",
       "      <td>1898</td>\n",
       "      <td>...</td>\n",
       "      <td>1758</td>\n",
       "      <td>592</td>\n",
       "      <td>1803</td>\n",
       "      <td>171</td>\n",
       "      <td>422</td>\n",
       "      <td>32037</td>\n",
       "      <td>21093</td>\n",
       "      <td>11053</td>\n",
       "      <td>7262</td>\n",
       "      <td>71445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1715</td>\n",
       "      <td>13271</td>\n",
       "      <td>2484</td>\n",
       "      <td>7171</td>\n",
       "      <td>5730</td>\n",
       "      <td>5333</td>\n",
       "      <td>648</td>\n",
       "      <td>2023</td>\n",
       "      <td>1747</td>\n",
       "      <td>2421</td>\n",
       "      <td>...</td>\n",
       "      <td>1123</td>\n",
       "      <td>387</td>\n",
       "      <td>474</td>\n",
       "      <td>90</td>\n",
       "      <td>26</td>\n",
       "      <td>44888</td>\n",
       "      <td>24805</td>\n",
       "      <td>9824</td>\n",
       "      <td>4421</td>\n",
       "      <td>83938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1292</td>\n",
       "      <td>8180</td>\n",
       "      <td>1338</td>\n",
       "      <td>4062</td>\n",
       "      <td>3487</td>\n",
       "      <td>3836</td>\n",
       "      <td>492</td>\n",
       "      <td>1617</td>\n",
       "      <td>845</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>731</td>\n",
       "      <td>490</td>\n",
       "      <td>380</td>\n",
       "      <td>91</td>\n",
       "      <td>95</td>\n",
       "      <td>28899</td>\n",
       "      <td>20576</td>\n",
       "      <td>10418</td>\n",
       "      <td>3636</td>\n",
       "      <td>63529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1373</td>\n",
       "      <td>7668</td>\n",
       "      <td>1657</td>\n",
       "      <td>3008</td>\n",
       "      <td>4094</td>\n",
       "      <td>7459</td>\n",
       "      <td>607</td>\n",
       "      <td>1203</td>\n",
       "      <td>758</td>\n",
       "      <td>2333</td>\n",
       "      <td>...</td>\n",
       "      <td>1814</td>\n",
       "      <td>483</td>\n",
       "      <td>797</td>\n",
       "      <td>309</td>\n",
       "      <td>236</td>\n",
       "      <td>31813</td>\n",
       "      <td>23966</td>\n",
       "      <td>13598</td>\n",
       "      <td>6163</td>\n",
       "      <td>75540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1613</td>\n",
       "      <td>8972</td>\n",
       "      <td>1613</td>\n",
       "      <td>4093</td>\n",
       "      <td>4084</td>\n",
       "      <td>5512</td>\n",
       "      <td>533</td>\n",
       "      <td>1645</td>\n",
       "      <td>818</td>\n",
       "      <td>1833</td>\n",
       "      <td>...</td>\n",
       "      <td>2210</td>\n",
       "      <td>428</td>\n",
       "      <td>1270</td>\n",
       "      <td>131</td>\n",
       "      <td>456</td>\n",
       "      <td>32790</td>\n",
       "      <td>23466</td>\n",
       "      <td>12164</td>\n",
       "      <td>7243</td>\n",
       "      <td>75663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1619</td>\n",
       "      <td>12998</td>\n",
       "      <td>2537</td>\n",
       "      <td>6695</td>\n",
       "      <td>5937</td>\n",
       "      <td>4672</td>\n",
       "      <td>574</td>\n",
       "      <td>2177</td>\n",
       "      <td>1315</td>\n",
       "      <td>2573</td>\n",
       "      <td>...</td>\n",
       "      <td>681</td>\n",
       "      <td>397</td>\n",
       "      <td>320</td>\n",
       "      <td>228</td>\n",
       "      <td>36</td>\n",
       "      <td>43322</td>\n",
       "      <td>27380</td>\n",
       "      <td>9985</td>\n",
       "      <td>3173</td>\n",
       "      <td>83860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1156</td>\n",
       "      <td>7759</td>\n",
       "      <td>1283</td>\n",
       "      <td>4332</td>\n",
       "      <td>2761</td>\n",
       "      <td>4631</td>\n",
       "      <td>493</td>\n",
       "      <td>1694</td>\n",
       "      <td>990</td>\n",
       "      <td>2165</td>\n",
       "      <td>...</td>\n",
       "      <td>977</td>\n",
       "      <td>456</td>\n",
       "      <td>317</td>\n",
       "      <td>422</td>\n",
       "      <td>163</td>\n",
       "      <td>29209</td>\n",
       "      <td>23010</td>\n",
       "      <td>10584</td>\n",
       "      <td>4390</td>\n",
       "      <td>67193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1051</td>\n",
       "      <td>7198</td>\n",
       "      <td>1122</td>\n",
       "      <td>3688</td>\n",
       "      <td>4043</td>\n",
       "      <td>7857</td>\n",
       "      <td>533</td>\n",
       "      <td>1229</td>\n",
       "      <td>878</td>\n",
       "      <td>2452</td>\n",
       "      <td>...</td>\n",
       "      <td>1514</td>\n",
       "      <td>493</td>\n",
       "      <td>1203</td>\n",
       "      <td>179</td>\n",
       "      <td>620</td>\n",
       "      <td>31691</td>\n",
       "      <td>22477</td>\n",
       "      <td>11212</td>\n",
       "      <td>6009</td>\n",
       "      <td>71389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1441</td>\n",
       "      <td>7713</td>\n",
       "      <td>1861</td>\n",
       "      <td>3353</td>\n",
       "      <td>4186</td>\n",
       "      <td>5672</td>\n",
       "      <td>352</td>\n",
       "      <td>1588</td>\n",
       "      <td>881</td>\n",
       "      <td>1972</td>\n",
       "      <td>...</td>\n",
       "      <td>1741</td>\n",
       "      <td>405</td>\n",
       "      <td>1018</td>\n",
       "      <td>176</td>\n",
       "      <td>183</td>\n",
       "      <td>30669</td>\n",
       "      <td>24683</td>\n",
       "      <td>11020</td>\n",
       "      <td>5286</td>\n",
       "      <td>71658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1739</td>\n",
       "      <td>11614</td>\n",
       "      <td>1980</td>\n",
       "      <td>7621</td>\n",
       "      <td>4249</td>\n",
       "      <td>4741</td>\n",
       "      <td>673</td>\n",
       "      <td>2537</td>\n",
       "      <td>1361</td>\n",
       "      <td>2955</td>\n",
       "      <td>...</td>\n",
       "      <td>728</td>\n",
       "      <td>368</td>\n",
       "      <td>543</td>\n",
       "      <td>199</td>\n",
       "      <td>41</td>\n",
       "      <td>42091</td>\n",
       "      <td>30568</td>\n",
       "      <td>9522</td>\n",
       "      <td>3671</td>\n",
       "      <td>85852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1336</td>\n",
       "      <td>7855</td>\n",
       "      <td>1378</td>\n",
       "      <td>4513</td>\n",
       "      <td>3505</td>\n",
       "      <td>4549</td>\n",
       "      <td>394</td>\n",
       "      <td>1724</td>\n",
       "      <td>802</td>\n",
       "      <td>1676</td>\n",
       "      <td>...</td>\n",
       "      <td>797</td>\n",
       "      <td>354</td>\n",
       "      <td>552</td>\n",
       "      <td>118</td>\n",
       "      <td>80</td>\n",
       "      <td>29457</td>\n",
       "      <td>23863</td>\n",
       "      <td>10010</td>\n",
       "      <td>3651</td>\n",
       "      <td>66981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1456</td>\n",
       "      <td>7069</td>\n",
       "      <td>1376</td>\n",
       "      <td>3270</td>\n",
       "      <td>5062</td>\n",
       "      <td>7933</td>\n",
       "      <td>406</td>\n",
       "      <td>1275</td>\n",
       "      <td>823</td>\n",
       "      <td>3046</td>\n",
       "      <td>...</td>\n",
       "      <td>1553</td>\n",
       "      <td>399</td>\n",
       "      <td>918</td>\n",
       "      <td>62</td>\n",
       "      <td>312</td>\n",
       "      <td>33643</td>\n",
       "      <td>23254</td>\n",
       "      <td>11998</td>\n",
       "      <td>4945</td>\n",
       "      <td>73840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1339</td>\n",
       "      <td>7399</td>\n",
       "      <td>1588</td>\n",
       "      <td>3557</td>\n",
       "      <td>4144</td>\n",
       "      <td>4929</td>\n",
       "      <td>614</td>\n",
       "      <td>1261</td>\n",
       "      <td>884</td>\n",
       "      <td>1986</td>\n",
       "      <td>...</td>\n",
       "      <td>1543</td>\n",
       "      <td>705</td>\n",
       "      <td>1265</td>\n",
       "      <td>98</td>\n",
       "      <td>283</td>\n",
       "      <td>29070</td>\n",
       "      <td>24212</td>\n",
       "      <td>10266</td>\n",
       "      <td>6669</td>\n",
       "      <td>70217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1930</td>\n",
       "      <td>13096</td>\n",
       "      <td>2298</td>\n",
       "      <td>7948</td>\n",
       "      <td>4793</td>\n",
       "      <td>5051</td>\n",
       "      <td>698</td>\n",
       "      <td>2175</td>\n",
       "      <td>1122</td>\n",
       "      <td>2447</td>\n",
       "      <td>...</td>\n",
       "      <td>1125</td>\n",
       "      <td>397</td>\n",
       "      <td>462</td>\n",
       "      <td>172</td>\n",
       "      <td>94</td>\n",
       "      <td>44043</td>\n",
       "      <td>28811</td>\n",
       "      <td>9084</td>\n",
       "      <td>4054</td>\n",
       "      <td>85992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1067</td>\n",
       "      <td>6745</td>\n",
       "      <td>1550</td>\n",
       "      <td>3305</td>\n",
       "      <td>3107</td>\n",
       "      <td>4444</td>\n",
       "      <td>502</td>\n",
       "      <td>1545</td>\n",
       "      <td>936</td>\n",
       "      <td>1951</td>\n",
       "      <td>...</td>\n",
       "      <td>1139</td>\n",
       "      <td>324</td>\n",
       "      <td>576</td>\n",
       "      <td>80</td>\n",
       "      <td>130</td>\n",
       "      <td>26719</td>\n",
       "      <td>19635</td>\n",
       "      <td>9161</td>\n",
       "      <td>4122</td>\n",
       "      <td>59637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1073</td>\n",
       "      <td>7055</td>\n",
       "      <td>1484</td>\n",
       "      <td>3100</td>\n",
       "      <td>3974</td>\n",
       "      <td>7288</td>\n",
       "      <td>546</td>\n",
       "      <td>1223</td>\n",
       "      <td>856</td>\n",
       "      <td>2265</td>\n",
       "      <td>...</td>\n",
       "      <td>1536</td>\n",
       "      <td>451</td>\n",
       "      <td>647</td>\n",
       "      <td>54</td>\n",
       "      <td>605</td>\n",
       "      <td>30947</td>\n",
       "      <td>19743</td>\n",
       "      <td>11000</td>\n",
       "      <td>5156</td>\n",
       "      <td>66846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1190</td>\n",
       "      <td>6419</td>\n",
       "      <td>1682</td>\n",
       "      <td>3278</td>\n",
       "      <td>3338</td>\n",
       "      <td>4859</td>\n",
       "      <td>603</td>\n",
       "      <td>1336</td>\n",
       "      <td>951</td>\n",
       "      <td>1551</td>\n",
       "      <td>...</td>\n",
       "      <td>1620</td>\n",
       "      <td>615</td>\n",
       "      <td>725</td>\n",
       "      <td>103</td>\n",
       "      <td>108</td>\n",
       "      <td>26418</td>\n",
       "      <td>19954</td>\n",
       "      <td>11547</td>\n",
       "      <td>5473</td>\n",
       "      <td>63392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2010</td>\n",
       "      <td>12408</td>\n",
       "      <td>3364</td>\n",
       "      <td>7100</td>\n",
       "      <td>5049</td>\n",
       "      <td>4717</td>\n",
       "      <td>733</td>\n",
       "      <td>2249</td>\n",
       "      <td>1206</td>\n",
       "      <td>2150</td>\n",
       "      <td>...</td>\n",
       "      <td>617</td>\n",
       "      <td>352</td>\n",
       "      <td>342</td>\n",
       "      <td>272</td>\n",
       "      <td>75</td>\n",
       "      <td>43601</td>\n",
       "      <td>26245</td>\n",
       "      <td>8712</td>\n",
       "      <td>4079</td>\n",
       "      <td>82637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1463</td>\n",
       "      <td>8026</td>\n",
       "      <td>1618</td>\n",
       "      <td>3871</td>\n",
       "      <td>3246</td>\n",
       "      <td>4707</td>\n",
       "      <td>622</td>\n",
       "      <td>1751</td>\n",
       "      <td>914</td>\n",
       "      <td>1948</td>\n",
       "      <td>...</td>\n",
       "      <td>785</td>\n",
       "      <td>434</td>\n",
       "      <td>427</td>\n",
       "      <td>169</td>\n",
       "      <td>81</td>\n",
       "      <td>30777</td>\n",
       "      <td>22948</td>\n",
       "      <td>10099</td>\n",
       "      <td>3699</td>\n",
       "      <td>67523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1264</td>\n",
       "      <td>7734</td>\n",
       "      <td>1139</td>\n",
       "      <td>2916</td>\n",
       "      <td>3266</td>\n",
       "      <td>6839</td>\n",
       "      <td>390</td>\n",
       "      <td>1053</td>\n",
       "      <td>946</td>\n",
       "      <td>3130</td>\n",
       "      <td>...</td>\n",
       "      <td>1083</td>\n",
       "      <td>325</td>\n",
       "      <td>600</td>\n",
       "      <td>101</td>\n",
       "      <td>149</td>\n",
       "      <td>30938</td>\n",
       "      <td>19751</td>\n",
       "      <td>11352</td>\n",
       "      <td>3897</td>\n",
       "      <td>65938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1519</td>\n",
       "      <td>7733</td>\n",
       "      <td>1818</td>\n",
       "      <td>3470</td>\n",
       "      <td>4176</td>\n",
       "      <td>5733</td>\n",
       "      <td>551</td>\n",
       "      <td>1611</td>\n",
       "      <td>1228</td>\n",
       "      <td>2308</td>\n",
       "      <td>...</td>\n",
       "      <td>1267</td>\n",
       "      <td>332</td>\n",
       "      <td>750</td>\n",
       "      <td>104</td>\n",
       "      <td>165</td>\n",
       "      <td>31845</td>\n",
       "      <td>22758</td>\n",
       "      <td>10784</td>\n",
       "      <td>4157</td>\n",
       "      <td>69544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>36 rows × 89 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "0               3096                14493              2531   \n",
       "1               1479                 9548              1439   \n",
       "2               1609                 7301              1488   \n",
       "3               1520                 9138              1906   \n",
       "4               1958                14194              2517   \n",
       "5               1372                 8468              1485   \n",
       "6               1561                 7704              1512   \n",
       "7               1687                 8740              1321   \n",
       "8               2769                13571              2294   \n",
       "9               1275                 8522              1619   \n",
       "10              2459                 7935              1288   \n",
       "11              2916                 8320              1336   \n",
       "12              2030                12995              2899   \n",
       "13              1763                 8176              1847   \n",
       "14              1383                 7482              1327   \n",
       "15              1517                 8941              1517   \n",
       "16              1715                13271              2484   \n",
       "17              1292                 8180              1338   \n",
       "18              1373                 7668              1657   \n",
       "19              1613                 8972              1613   \n",
       "20              1619                12998              2537   \n",
       "21              1156                 7759              1283   \n",
       "22              1051                 7198              1122   \n",
       "23              1441                 7713              1861   \n",
       "24              1739                11614              1980   \n",
       "25              1336                 7855              1378   \n",
       "26              1456                 7069              1376   \n",
       "27              1339                 7399              1588   \n",
       "28              1930                13096              2298   \n",
       "29              1067                 6745              1550   \n",
       "30              1073                 7055              1484   \n",
       "31              1190                 6419              1682   \n",
       "32              2010                12408              3364   \n",
       "33              1463                 8026              1618   \n",
       "34              1264                 7734              1139   \n",
       "35              1519                 7733              1818   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "0                  7881              4688                 4390   \n",
       "1                  4586              2320                 3990   \n",
       "2                  3572              4758                 6975   \n",
       "3                  3575              3328                 4781   \n",
       "4                  8441              4930                 5117   \n",
       "5                  4356              3459                 4629   \n",
       "6                  3592              3815                 8738   \n",
       "7                  3453              3769                 5883   \n",
       "8                  7678              4824                 5253   \n",
       "9                  4139              3880                 4684   \n",
       "10                 3455              4229                 6573   \n",
       "11                 4102              3734                 4953   \n",
       "12                 8288              4522                 5037   \n",
       "13                 4261              3377                 5088   \n",
       "14                 3477              4545                 6879   \n",
       "15                 3638              4892                 5505   \n",
       "16                 7171              5730                 5333   \n",
       "17                 4062              3487                 3836   \n",
       "18                 3008              4094                 7459   \n",
       "19                 4093              4084                 5512   \n",
       "20                 6695              5937                 4672   \n",
       "21                 4332              2761                 4631   \n",
       "22                 3688              4043                 7857   \n",
       "23                 3353              4186                 5672   \n",
       "24                 7621              4249                 4741   \n",
       "25                 4513              3505                 4549   \n",
       "26                 3270              5062                 7933   \n",
       "27                 3557              4144                 4929   \n",
       "28                 7948              4793                 5051   \n",
       "29                 3305              3107                 4444   \n",
       "30                 3100              3974                 7288   \n",
       "31                 3278              3338                 4859   \n",
       "32                 7100              5049                 4717   \n",
       "33                 3871              3246                 4707   \n",
       "34                 2916              3266                 6839   \n",
       "35                 3470              4176                 5733   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "0               888                2201             1383                2066   \n",
       "1               521                1414             1059                1395   \n",
       "2               476                1093             1101                2297   \n",
       "3               571                1699             1128                2433   \n",
       "4               873                2150             1560                2727   \n",
       "5               481                1738             1909                1996   \n",
       "6               477                1235              995                2734   \n",
       "7               590                1350              778                1954   \n",
       "8               932                2350             2412                2719   \n",
       "9               427                1418             1158                2166   \n",
       "10              587                2012              610                2508   \n",
       "11              610                1363             1455                1558   \n",
       "12              790                2248             1159                1977   \n",
       "13              430                1608              937                2667   \n",
       "14              611                1104              999                2414   \n",
       "15              643                1529              830                1898   \n",
       "16              648                2023             1747                2421   \n",
       "17              492                1617              845                2003   \n",
       "18              607                1203              758                2333   \n",
       "19              533                1645              818                1833   \n",
       "20              574                2177             1315                2573   \n",
       "21              493                1694              990                2165   \n",
       "22              533                1229              878                2452   \n",
       "23              352                1588              881                1972   \n",
       "24              673                2537             1361                2955   \n",
       "25              394                1724              802                1676   \n",
       "26              406                1275              823                3046   \n",
       "27              614                1261              884                1986   \n",
       "28              698                2175             1122                2447   \n",
       "29              502                1545              936                1951   \n",
       "30              546                1223              856                2265   \n",
       "31              603                1336              951                1551   \n",
       "32              733                2249             1206                2150   \n",
       "33              622                1751              914                1948   \n",
       "34              390                1053              946                3130   \n",
       "35              551                1611             1228                2308   \n",
       "\n",
       "    ...  QLD - oth  SA - oth  WA - oth  TAS - oth  NT - oth    Hol    vfr  \\\n",
       "0   ...        702       317       205        100        43  45906  26042   \n",
       "1   ...        839       363       269         97       108  29347  20676   \n",
       "2   ...       1434       712      1546         55       488  32492  20582   \n",
       "3   ...        749       454      1549         91       625  31813  21613   \n",
       "4   ...       1015       180       190        137        62  46793  26947   \n",
       "5   ...        919       471       286        160       135  31442  19481   \n",
       "6   ...       2800       246       789         75       257  34623  20026   \n",
       "7   ...       1343       651       867         90       362  31118  20431   \n",
       "8   ...        887       429       631        171        93  47030  24284   \n",
       "9   ...        547       432       511         80        86  30852  19430   \n",
       "10  ...       1701       328       666         98       648  34157  19358   \n",
       "11  ...       1872       362       553         73       284  32332  21834   \n",
       "12  ...       1032       281       341        249        28  44072  23461   \n",
       "13  ...       1148       466       519        188       142  32250  20351   \n",
       "14  ...       1491       479       516         59       447  32259  20876   \n",
       "15  ...       1758       592      1803        171       422  32037  21093   \n",
       "16  ...       1123       387       474         90        26  44888  24805   \n",
       "17  ...        731       490       380         91        95  28899  20576   \n",
       "18  ...       1814       483       797        309       236  31813  23966   \n",
       "19  ...       2210       428      1270        131       456  32790  23466   \n",
       "20  ...        681       397       320        228        36  43322  27380   \n",
       "21  ...        977       456       317        422       163  29209  23010   \n",
       "22  ...       1514       493      1203        179       620  31691  22477   \n",
       "23  ...       1741       405      1018        176       183  30669  24683   \n",
       "24  ...        728       368       543        199        41  42091  30568   \n",
       "25  ...        797       354       552        118        80  29457  23863   \n",
       "26  ...       1553       399       918         62       312  33643  23254   \n",
       "27  ...       1543       705      1265         98       283  29070  24212   \n",
       "28  ...       1125       397       462        172        94  44043  28811   \n",
       "29  ...       1139       324       576         80       130  26719  19635   \n",
       "30  ...       1536       451       647         54       605  30947  19743   \n",
       "31  ...       1620       615       725        103       108  26418  19954   \n",
       "32  ...        617       352       342        272        75  43601  26245   \n",
       "33  ...        785       434       427        169        81  30777  22948   \n",
       "34  ...       1083       325       600        101       149  30938  19751   \n",
       "35  ...       1267       332       750        104       165  31845  22758   \n",
       "\n",
       "      bus   oth  total  \n",
       "0    9815  2740  84503  \n",
       "1   11823  3466  65312  \n",
       "2   13565  6114  72753  \n",
       "3   11478  5976  70880  \n",
       "4   10027  3126  86893  \n",
       "5   11875  4068  66866  \n",
       "6   11713  5820  72182  \n",
       "7   10582  6187  68318  \n",
       "8    9734  4603  85651  \n",
       "9   10590  3595  64467  \n",
       "10  11311  5590  70416  \n",
       "11  13075  5614  72855  \n",
       "12   9031  3821  80385  \n",
       "13  10366  5000  67967  \n",
       "14  11888  4826  69849  \n",
       "15  11053  7262  71445  \n",
       "16   9824  4421  83938  \n",
       "17  10418  3636  63529  \n",
       "18  13598  6163  75540  \n",
       "19  12164  7243  75663  \n",
       "20   9985  3173  83860  \n",
       "21  10584  4390  67193  \n",
       "22  11212  6009  71389  \n",
       "23  11020  5286  71658  \n",
       "24   9522  3671  85852  \n",
       "25  10010  3651  66981  \n",
       "26  11998  4945  73840  \n",
       "27  10266  6669  70217  \n",
       "28   9084  4054  85992  \n",
       "29   9161  4122  59637  \n",
       "30  11000  5156  66846  \n",
       "31  11547  5473  63392  \n",
       "32   8712  4079  82637  \n",
       "33  10099  3699  67523  \n",
       "34  11352  3897  65938  \n",
       "35  10784  4157  69544  \n",
       "\n",
       "[36 rows x 89 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading the data - from year 1998 to 2006 - Quarterly distributed! 9 years = 9*4 = 36 quarters\n",
    "df=pd.read_csv('australia.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "id": "C2CstDPwOll1"
   },
   "outputs": [],
   "source": [
    "#Function to calculate the inverse different of 2 values\n",
    "def diff_inverse(obj_prev, value):\n",
    "    return value + obj_prev\n",
    "\n",
    "#To Calculate Mean absolute error\n",
    "def MAE(x,y):\n",
    "    result=0\n",
    "    #looping from 0 to length(x)\n",
    "    for i in range(len(x)):\n",
    "    #taking the absolute of difference\n",
    "        result += abs((x[i]-y[i])/x[i])\n",
    "    #dividing by length\n",
    "    result /= len(x)\n",
    "    #multiplying it by 100\n",
    "    result *= 100\n",
    "    return result\n",
    "\n",
    "#To Calculate Mean Squared Error\n",
    "def RMSE(x,y):\n",
    "    result=0\n",
    "    for i in range(len(x)):\n",
    "        result += ((x[i]-y[i])/x[i])**2\n",
    "    #dividing by length\n",
    "    result /= len(x)\n",
    "    return result\n",
    "\n",
    "#To Calculate Root Mean Squared Error\n",
    "def dRMSE(y_true, y_pred):\n",
    "    #difference wrt rows (0 axis)\n",
    "    dy_true=np.diff(y_true, axis=0)\n",
    "    dy_pred=np.diff(y_pred, axis=0)\n",
    "    result=0\n",
    "    for i in range(len(dy_true)):\n",
    "        result += ((dy_true[i]-dy_pred[i])/dy_true[i])**2\n",
    "    result /= len(dy_true)\n",
    "    # Taking square root\n",
    "    result = np.sqrt(result)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "id": "-1UuyGVLxG_t"
   },
   "outputs": [],
   "source": [
    "#Converting the series to samples for the LSTM supervised learning method\n",
    "#Function to split the series into past and future observations\n",
    "#Here:\n",
    "# n_past ==> no of past observations\n",
    "# n_future ==> no of future observations \n",
    "def split_series(series, n_past, n_future):\n",
    "    X, y = list(), list()\n",
    "    for window_start in range(len(series)):\n",
    "        past_end = window_start + n_past\n",
    "        future_end = past_end + n_future\n",
    "        if future_end > len(series):\n",
    "            break\n",
    "        # slicing the past and future parts of the window\n",
    "        past, future = series[window_start:past_end, :], series[past_end:future_end, :]\n",
    "        #Adding past and future values to the list\n",
    "        X.append(past)\n",
    "        y.append(future)\n",
    "    return np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Y26WapWo9pem"
   },
   "source": [
    "**Level - 3 (Bottom)**\n",
    "\n",
    "\n",
    "Total visitors according to city visit, with a total of 56 visits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 809
    },
    "id": "rpUHGt4GP4TZ",
    "outputId": "50dc4688-5f45-497f-bc49-f2bd9576394e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3096</td>\n",
       "      <td>14493</td>\n",
       "      <td>2531</td>\n",
       "      <td>7881</td>\n",
       "      <td>4688</td>\n",
       "      <td>4390</td>\n",
       "      <td>888</td>\n",
       "      <td>2201</td>\n",
       "      <td>1383</td>\n",
       "      <td>2066</td>\n",
       "      <td>...</td>\n",
       "      <td>431</td>\n",
       "      <td>271</td>\n",
       "      <td>244</td>\n",
       "      <td>73</td>\n",
       "      <td>168</td>\n",
       "      <td>37</td>\n",
       "      <td>76</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1479</td>\n",
       "      <td>9548</td>\n",
       "      <td>1439</td>\n",
       "      <td>4586</td>\n",
       "      <td>2320</td>\n",
       "      <td>3990</td>\n",
       "      <td>521</td>\n",
       "      <td>1414</td>\n",
       "      <td>1059</td>\n",
       "      <td>1395</td>\n",
       "      <td>...</td>\n",
       "      <td>669</td>\n",
       "      <td>170</td>\n",
       "      <td>142</td>\n",
       "      <td>221</td>\n",
       "      <td>170</td>\n",
       "      <td>99</td>\n",
       "      <td>36</td>\n",
       "      <td>61</td>\n",
       "      <td>69</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1609</td>\n",
       "      <td>7301</td>\n",
       "      <td>1488</td>\n",
       "      <td>3572</td>\n",
       "      <td>4758</td>\n",
       "      <td>6975</td>\n",
       "      <td>476</td>\n",
       "      <td>1093</td>\n",
       "      <td>1101</td>\n",
       "      <td>2297</td>\n",
       "      <td>...</td>\n",
       "      <td>270</td>\n",
       "      <td>1164</td>\n",
       "      <td>397</td>\n",
       "      <td>315</td>\n",
       "      <td>380</td>\n",
       "      <td>1166</td>\n",
       "      <td>32</td>\n",
       "      <td>23</td>\n",
       "      <td>150</td>\n",
       "      <td>338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1520</td>\n",
       "      <td>9138</td>\n",
       "      <td>1906</td>\n",
       "      <td>3575</td>\n",
       "      <td>3328</td>\n",
       "      <td>4781</td>\n",
       "      <td>571</td>\n",
       "      <td>1699</td>\n",
       "      <td>1128</td>\n",
       "      <td>2433</td>\n",
       "      <td>...</td>\n",
       "      <td>214</td>\n",
       "      <td>535</td>\n",
       "      <td>194</td>\n",
       "      <td>260</td>\n",
       "      <td>410</td>\n",
       "      <td>1139</td>\n",
       "      <td>48</td>\n",
       "      <td>43</td>\n",
       "      <td>172</td>\n",
       "      <td>453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1958</td>\n",
       "      <td>14194</td>\n",
       "      <td>2517</td>\n",
       "      <td>8441</td>\n",
       "      <td>4930</td>\n",
       "      <td>5117</td>\n",
       "      <td>873</td>\n",
       "      <td>2150</td>\n",
       "      <td>1560</td>\n",
       "      <td>2727</td>\n",
       "      <td>...</td>\n",
       "      <td>458</td>\n",
       "      <td>557</td>\n",
       "      <td>147</td>\n",
       "      <td>33</td>\n",
       "      <td>162</td>\n",
       "      <td>28</td>\n",
       "      <td>77</td>\n",
       "      <td>60</td>\n",
       "      <td>15</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1372</td>\n",
       "      <td>8468</td>\n",
       "      <td>1485</td>\n",
       "      <td>4356</td>\n",
       "      <td>3459</td>\n",
       "      <td>4629</td>\n",
       "      <td>481</td>\n",
       "      <td>1738</td>\n",
       "      <td>1909</td>\n",
       "      <td>1996</td>\n",
       "      <td>...</td>\n",
       "      <td>364</td>\n",
       "      <td>555</td>\n",
       "      <td>342</td>\n",
       "      <td>129</td>\n",
       "      <td>125</td>\n",
       "      <td>161</td>\n",
       "      <td>70</td>\n",
       "      <td>90</td>\n",
       "      <td>72</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1561</td>\n",
       "      <td>7704</td>\n",
       "      <td>1512</td>\n",
       "      <td>3592</td>\n",
       "      <td>3815</td>\n",
       "      <td>8738</td>\n",
       "      <td>477</td>\n",
       "      <td>1235</td>\n",
       "      <td>995</td>\n",
       "      <td>2734</td>\n",
       "      <td>...</td>\n",
       "      <td>935</td>\n",
       "      <td>1865</td>\n",
       "      <td>137</td>\n",
       "      <td>109</td>\n",
       "      <td>546</td>\n",
       "      <td>243</td>\n",
       "      <td>26</td>\n",
       "      <td>49</td>\n",
       "      <td>75</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1687</td>\n",
       "      <td>8740</td>\n",
       "      <td>1321</td>\n",
       "      <td>3453</td>\n",
       "      <td>3769</td>\n",
       "      <td>5883</td>\n",
       "      <td>590</td>\n",
       "      <td>1350</td>\n",
       "      <td>778</td>\n",
       "      <td>1954</td>\n",
       "      <td>...</td>\n",
       "      <td>640</td>\n",
       "      <td>703</td>\n",
       "      <td>400</td>\n",
       "      <td>251</td>\n",
       "      <td>299</td>\n",
       "      <td>568</td>\n",
       "      <td>34</td>\n",
       "      <td>56</td>\n",
       "      <td>145</td>\n",
       "      <td>217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2769</td>\n",
       "      <td>13571</td>\n",
       "      <td>2294</td>\n",
       "      <td>7678</td>\n",
       "      <td>4824</td>\n",
       "      <td>5253</td>\n",
       "      <td>932</td>\n",
       "      <td>2350</td>\n",
       "      <td>2412</td>\n",
       "      <td>2719</td>\n",
       "      <td>...</td>\n",
       "      <td>513</td>\n",
       "      <td>374</td>\n",
       "      <td>274</td>\n",
       "      <td>155</td>\n",
       "      <td>365</td>\n",
       "      <td>266</td>\n",
       "      <td>49</td>\n",
       "      <td>122</td>\n",
       "      <td>37</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1275</td>\n",
       "      <td>8522</td>\n",
       "      <td>1619</td>\n",
       "      <td>4139</td>\n",
       "      <td>3880</td>\n",
       "      <td>4684</td>\n",
       "      <td>427</td>\n",
       "      <td>1418</td>\n",
       "      <td>1158</td>\n",
       "      <td>2166</td>\n",
       "      <td>...</td>\n",
       "      <td>298</td>\n",
       "      <td>249</td>\n",
       "      <td>348</td>\n",
       "      <td>84</td>\n",
       "      <td>212</td>\n",
       "      <td>299</td>\n",
       "      <td>33</td>\n",
       "      <td>47</td>\n",
       "      <td>41</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2459</td>\n",
       "      <td>7935</td>\n",
       "      <td>1288</td>\n",
       "      <td>3455</td>\n",
       "      <td>4229</td>\n",
       "      <td>6573</td>\n",
       "      <td>587</td>\n",
       "      <td>2012</td>\n",
       "      <td>610</td>\n",
       "      <td>2508</td>\n",
       "      <td>...</td>\n",
       "      <td>511</td>\n",
       "      <td>1190</td>\n",
       "      <td>155</td>\n",
       "      <td>173</td>\n",
       "      <td>252</td>\n",
       "      <td>414</td>\n",
       "      <td>79</td>\n",
       "      <td>19</td>\n",
       "      <td>389</td>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2916</td>\n",
       "      <td>8320</td>\n",
       "      <td>1336</td>\n",
       "      <td>4102</td>\n",
       "      <td>3734</td>\n",
       "      <td>4953</td>\n",
       "      <td>610</td>\n",
       "      <td>1363</td>\n",
       "      <td>1455</td>\n",
       "      <td>1558</td>\n",
       "      <td>...</td>\n",
       "      <td>833</td>\n",
       "      <td>1039</td>\n",
       "      <td>215</td>\n",
       "      <td>147</td>\n",
       "      <td>163</td>\n",
       "      <td>390</td>\n",
       "      <td>56</td>\n",
       "      <td>17</td>\n",
       "      <td>114</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2030</td>\n",
       "      <td>12995</td>\n",
       "      <td>2899</td>\n",
       "      <td>8288</td>\n",
       "      <td>4522</td>\n",
       "      <td>5037</td>\n",
       "      <td>790</td>\n",
       "      <td>2248</td>\n",
       "      <td>1159</td>\n",
       "      <td>1977</td>\n",
       "      <td>...</td>\n",
       "      <td>709</td>\n",
       "      <td>323</td>\n",
       "      <td>216</td>\n",
       "      <td>65</td>\n",
       "      <td>245</td>\n",
       "      <td>96</td>\n",
       "      <td>130</td>\n",
       "      <td>119</td>\n",
       "      <td>21</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1763</td>\n",
       "      <td>8176</td>\n",
       "      <td>1847</td>\n",
       "      <td>4261</td>\n",
       "      <td>3377</td>\n",
       "      <td>5088</td>\n",
       "      <td>430</td>\n",
       "      <td>1608</td>\n",
       "      <td>937</td>\n",
       "      <td>2667</td>\n",
       "      <td>...</td>\n",
       "      <td>429</td>\n",
       "      <td>719</td>\n",
       "      <td>210</td>\n",
       "      <td>256</td>\n",
       "      <td>457</td>\n",
       "      <td>62</td>\n",
       "      <td>60</td>\n",
       "      <td>128</td>\n",
       "      <td>84</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1383</td>\n",
       "      <td>7482</td>\n",
       "      <td>1327</td>\n",
       "      <td>3477</td>\n",
       "      <td>4545</td>\n",
       "      <td>6879</td>\n",
       "      <td>611</td>\n",
       "      <td>1104</td>\n",
       "      <td>999</td>\n",
       "      <td>2414</td>\n",
       "      <td>...</td>\n",
       "      <td>717</td>\n",
       "      <td>774</td>\n",
       "      <td>300</td>\n",
       "      <td>179</td>\n",
       "      <td>233</td>\n",
       "      <td>283</td>\n",
       "      <td>11</td>\n",
       "      <td>48</td>\n",
       "      <td>116</td>\n",
       "      <td>331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1517</td>\n",
       "      <td>8941</td>\n",
       "      <td>1517</td>\n",
       "      <td>3638</td>\n",
       "      <td>4892</td>\n",
       "      <td>5505</td>\n",
       "      <td>643</td>\n",
       "      <td>1529</td>\n",
       "      <td>830</td>\n",
       "      <td>1898</td>\n",
       "      <td>...</td>\n",
       "      <td>470</td>\n",
       "      <td>1288</td>\n",
       "      <td>345</td>\n",
       "      <td>247</td>\n",
       "      <td>459</td>\n",
       "      <td>1344</td>\n",
       "      <td>52</td>\n",
       "      <td>119</td>\n",
       "      <td>163</td>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1715</td>\n",
       "      <td>13271</td>\n",
       "      <td>2484</td>\n",
       "      <td>7171</td>\n",
       "      <td>5730</td>\n",
       "      <td>5333</td>\n",
       "      <td>648</td>\n",
       "      <td>2023</td>\n",
       "      <td>1747</td>\n",
       "      <td>2421</td>\n",
       "      <td>...</td>\n",
       "      <td>352</td>\n",
       "      <td>771</td>\n",
       "      <td>275</td>\n",
       "      <td>112</td>\n",
       "      <td>328</td>\n",
       "      <td>146</td>\n",
       "      <td>31</td>\n",
       "      <td>59</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1292</td>\n",
       "      <td>8180</td>\n",
       "      <td>1338</td>\n",
       "      <td>4062</td>\n",
       "      <td>3487</td>\n",
       "      <td>3836</td>\n",
       "      <td>492</td>\n",
       "      <td>1617</td>\n",
       "      <td>845</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>422</td>\n",
       "      <td>309</td>\n",
       "      <td>334</td>\n",
       "      <td>156</td>\n",
       "      <td>201</td>\n",
       "      <td>179</td>\n",
       "      <td>73</td>\n",
       "      <td>18</td>\n",
       "      <td>40</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1373</td>\n",
       "      <td>7668</td>\n",
       "      <td>1657</td>\n",
       "      <td>3008</td>\n",
       "      <td>4094</td>\n",
       "      <td>7459</td>\n",
       "      <td>607</td>\n",
       "      <td>1203</td>\n",
       "      <td>758</td>\n",
       "      <td>2333</td>\n",
       "      <td>...</td>\n",
       "      <td>559</td>\n",
       "      <td>1255</td>\n",
       "      <td>293</td>\n",
       "      <td>190</td>\n",
       "      <td>320</td>\n",
       "      <td>477</td>\n",
       "      <td>62</td>\n",
       "      <td>247</td>\n",
       "      <td>112</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1613</td>\n",
       "      <td>8972</td>\n",
       "      <td>1613</td>\n",
       "      <td>4093</td>\n",
       "      <td>4084</td>\n",
       "      <td>5512</td>\n",
       "      <td>533</td>\n",
       "      <td>1645</td>\n",
       "      <td>818</td>\n",
       "      <td>1833</td>\n",
       "      <td>...</td>\n",
       "      <td>1311</td>\n",
       "      <td>899</td>\n",
       "      <td>229</td>\n",
       "      <td>199</td>\n",
       "      <td>582</td>\n",
       "      <td>688</td>\n",
       "      <td>102</td>\n",
       "      <td>29</td>\n",
       "      <td>208</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "0               3096                14493              2531   \n",
       "1               1479                 9548              1439   \n",
       "2               1609                 7301              1488   \n",
       "3               1520                 9138              1906   \n",
       "4               1958                14194              2517   \n",
       "5               1372                 8468              1485   \n",
       "6               1561                 7704              1512   \n",
       "7               1687                 8740              1321   \n",
       "8               2769                13571              2294   \n",
       "9               1275                 8522              1619   \n",
       "10              2459                 7935              1288   \n",
       "11              2916                 8320              1336   \n",
       "12              2030                12995              2899   \n",
       "13              1763                 8176              1847   \n",
       "14              1383                 7482              1327   \n",
       "15              1517                 8941              1517   \n",
       "16              1715                13271              2484   \n",
       "17              1292                 8180              1338   \n",
       "18              1373                 7668              1657   \n",
       "19              1613                 8972              1613   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "0                  7881              4688                 4390   \n",
       "1                  4586              2320                 3990   \n",
       "2                  3572              4758                 6975   \n",
       "3                  3575              3328                 4781   \n",
       "4                  8441              4930                 5117   \n",
       "5                  4356              3459                 4629   \n",
       "6                  3592              3815                 8738   \n",
       "7                  3453              3769                 5883   \n",
       "8                  7678              4824                 5253   \n",
       "9                  4139              3880                 4684   \n",
       "10                 3455              4229                 6573   \n",
       "11                 4102              3734                 4953   \n",
       "12                 8288              4522                 5037   \n",
       "13                 4261              3377                 5088   \n",
       "14                 3477              4545                 6879   \n",
       "15                 3638              4892                 5505   \n",
       "16                 7171              5730                 5333   \n",
       "17                 4062              3487                 3836   \n",
       "18                 3008              4094                 7459   \n",
       "19                 4093              4084                 5512   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "0               888                2201             1383                2066   \n",
       "1               521                1414             1059                1395   \n",
       "2               476                1093             1101                2297   \n",
       "3               571                1699             1128                2433   \n",
       "4               873                2150             1560                2727   \n",
       "5               481                1738             1909                1996   \n",
       "6               477                1235              995                2734   \n",
       "7               590                1350              778                1954   \n",
       "8               932                2350             2412                2719   \n",
       "9               427                1418             1158                2166   \n",
       "10              587                2012              610                2508   \n",
       "11              610                1363             1455                1558   \n",
       "12              790                2248             1159                1977   \n",
       "13              430                1608              937                2667   \n",
       "14              611                1104              999                2414   \n",
       "15              643                1529              830                1898   \n",
       "16              648                2023             1747                2421   \n",
       "17              492                1617              845                2003   \n",
       "18              607                1203              758                2333   \n",
       "19              533                1645              818                1833   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "0   ...               431                  271              244   \n",
       "1   ...               669                  170              142   \n",
       "2   ...               270                 1164              397   \n",
       "3   ...               214                  535              194   \n",
       "4   ...               458                  557              147   \n",
       "5   ...               364                  555              342   \n",
       "6   ...               935                 1865              137   \n",
       "7   ...               640                  703              400   \n",
       "8   ...               513                  374              274   \n",
       "9   ...               298                  249              348   \n",
       "10  ...               511                 1190              155   \n",
       "11  ...               833                 1039              215   \n",
       "12  ...               709                  323              216   \n",
       "13  ...               429                  719              210   \n",
       "14  ...               717                  774              300   \n",
       "15  ...               470                 1288              345   \n",
       "16  ...               352                  771              275   \n",
       "17  ...               422                  309              334   \n",
       "18  ...               559                 1255              293   \n",
       "19  ...              1311                  899              229   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "0                   73              168                  37                76   \n",
       "1                  221              170                  99                36   \n",
       "2                  315              380                1166                32   \n",
       "3                  260              410                1139                48   \n",
       "4                   33              162                  28                77   \n",
       "5                  129              125                 161                70   \n",
       "6                  109              546                 243                26   \n",
       "7                  251              299                 568                34   \n",
       "8                  155              365                 266                49   \n",
       "9                   84              212                 299                33   \n",
       "10                 173              252                 414                79   \n",
       "11                 147              163                 390                56   \n",
       "12                  65              245                  96               130   \n",
       "13                 256              457                  62                60   \n",
       "14                 179              233                 283                11   \n",
       "15                 247              459                1344                52   \n",
       "16                 112              328                 146                31   \n",
       "17                 156              201                 179                73   \n",
       "18                 190              320                 477                62   \n",
       "19                 199              582                 688               102   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "0                    24               35                   8  \n",
       "1                    61               69                  39  \n",
       "2                    23              150                 338  \n",
       "3                    43              172                 453  \n",
       "4                    60               15                  47  \n",
       "5                    90               72                  63  \n",
       "6                    49               75                 182  \n",
       "7                    56              145                 217  \n",
       "8                   122               37                  56  \n",
       "9                    47               41                  45  \n",
       "10                   19              389                 259  \n",
       "11                   17              114                 170  \n",
       "12                  119               21                   7  \n",
       "13                  128               84                  58  \n",
       "14                   48              116                 331  \n",
       "15                  119              163                 259  \n",
       "16                   59               14                  12  \n",
       "17                   18               40                  55  \n",
       "18                  247              112                 124  \n",
       "19                   29              208                 248  \n",
       "\n",
       "[20 rows x 56 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Choosing first 56 columns\n",
    "first_daily_df = df.iloc[:,0:56]\n",
    "first_daily_df[:20] # chunk that will be used for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ojbFqNqntE7r",
    "outputId": "00b06aa1-7a7b-42c1-b6bd-c4494b879fa2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36, 56)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the shape of the data\n",
    "first_daily_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 809
    },
    "id": "h9i3ex0yB1m2",
    "outputId": "24ad19bf-f2c3-4968-cad5-995295e74764"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1617.0</td>\n",
       "      <td>-4945.0</td>\n",
       "      <td>-1092.0</td>\n",
       "      <td>-3295.0</td>\n",
       "      <td>-2368.0</td>\n",
       "      <td>-400.0</td>\n",
       "      <td>-367.0</td>\n",
       "      <td>-787.0</td>\n",
       "      <td>-324.0</td>\n",
       "      <td>-671.0</td>\n",
       "      <td>...</td>\n",
       "      <td>238.0</td>\n",
       "      <td>-101.0</td>\n",
       "      <td>-102.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>-40.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>130.0</td>\n",
       "      <td>-2247.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>-1014.0</td>\n",
       "      <td>2438.0</td>\n",
       "      <td>2985.0</td>\n",
       "      <td>-45.0</td>\n",
       "      <td>-321.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>902.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-399.0</td>\n",
       "      <td>994.0</td>\n",
       "      <td>255.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>-38.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-89.0</td>\n",
       "      <td>1837.0</td>\n",
       "      <td>418.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-1430.0</td>\n",
       "      <td>-2194.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>606.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-56.0</td>\n",
       "      <td>-629.0</td>\n",
       "      <td>-203.0</td>\n",
       "      <td>-55.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>-27.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>115.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>438.0</td>\n",
       "      <td>5056.0</td>\n",
       "      <td>611.0</td>\n",
       "      <td>4866.0</td>\n",
       "      <td>1602.0</td>\n",
       "      <td>336.0</td>\n",
       "      <td>302.0</td>\n",
       "      <td>451.0</td>\n",
       "      <td>432.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>...</td>\n",
       "      <td>244.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>-47.0</td>\n",
       "      <td>-227.0</td>\n",
       "      <td>-248.0</td>\n",
       "      <td>-1111.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>-157.0</td>\n",
       "      <td>-406.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-586.0</td>\n",
       "      <td>-5726.0</td>\n",
       "      <td>-1032.0</td>\n",
       "      <td>-4085.0</td>\n",
       "      <td>-1471.0</td>\n",
       "      <td>-488.0</td>\n",
       "      <td>-392.0</td>\n",
       "      <td>-412.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>-731.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-94.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>-37.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>189.0</td>\n",
       "      <td>-764.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>-764.0</td>\n",
       "      <td>356.0</td>\n",
       "      <td>4109.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>-503.0</td>\n",
       "      <td>-914.0</td>\n",
       "      <td>738.0</td>\n",
       "      <td>...</td>\n",
       "      <td>571.0</td>\n",
       "      <td>1310.0</td>\n",
       "      <td>-205.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>421.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>-44.0</td>\n",
       "      <td>-41.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>126.0</td>\n",
       "      <td>1036.0</td>\n",
       "      <td>-191.0</td>\n",
       "      <td>-139.0</td>\n",
       "      <td>-46.0</td>\n",
       "      <td>-2855.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>-217.0</td>\n",
       "      <td>-780.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-295.0</td>\n",
       "      <td>-1162.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>-247.0</td>\n",
       "      <td>325.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1082.0</td>\n",
       "      <td>4831.0</td>\n",
       "      <td>973.0</td>\n",
       "      <td>4225.0</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>-630.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1634.0</td>\n",
       "      <td>765.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-127.0</td>\n",
       "      <td>-329.0</td>\n",
       "      <td>-126.0</td>\n",
       "      <td>-96.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>-302.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>-108.0</td>\n",
       "      <td>-161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-1494.0</td>\n",
       "      <td>-5049.0</td>\n",
       "      <td>-675.0</td>\n",
       "      <td>-3539.0</td>\n",
       "      <td>-944.0</td>\n",
       "      <td>-569.0</td>\n",
       "      <td>-505.0</td>\n",
       "      <td>-932.0</td>\n",
       "      <td>-1254.0</td>\n",
       "      <td>-553.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-215.0</td>\n",
       "      <td>-125.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>-71.0</td>\n",
       "      <td>-153.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>-75.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1184.0</td>\n",
       "      <td>-587.0</td>\n",
       "      <td>-331.0</td>\n",
       "      <td>-684.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>1889.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>594.0</td>\n",
       "      <td>-548.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>...</td>\n",
       "      <td>213.0</td>\n",
       "      <td>941.0</td>\n",
       "      <td>-193.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>-28.0</td>\n",
       "      <td>348.0</td>\n",
       "      <td>214.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>457.0</td>\n",
       "      <td>385.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>647.0</td>\n",
       "      <td>-495.0</td>\n",
       "      <td>-1620.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>-649.0</td>\n",
       "      <td>845.0</td>\n",
       "      <td>-950.0</td>\n",
       "      <td>...</td>\n",
       "      <td>322.0</td>\n",
       "      <td>-151.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>-26.0</td>\n",
       "      <td>-89.0</td>\n",
       "      <td>-24.0</td>\n",
       "      <td>-23.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-275.0</td>\n",
       "      <td>-89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>-886.0</td>\n",
       "      <td>4675.0</td>\n",
       "      <td>1563.0</td>\n",
       "      <td>4186.0</td>\n",
       "      <td>788.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>885.0</td>\n",
       "      <td>-296.0</td>\n",
       "      <td>419.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-124.0</td>\n",
       "      <td>-716.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>-294.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>-93.0</td>\n",
       "      <td>-163.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-267.0</td>\n",
       "      <td>-4819.0</td>\n",
       "      <td>-1052.0</td>\n",
       "      <td>-4027.0</td>\n",
       "      <td>-1145.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>-360.0</td>\n",
       "      <td>-640.0</td>\n",
       "      <td>-222.0</td>\n",
       "      <td>690.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-280.0</td>\n",
       "      <td>396.0</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>212.0</td>\n",
       "      <td>-34.0</td>\n",
       "      <td>-70.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>-380.0</td>\n",
       "      <td>-694.0</td>\n",
       "      <td>-520.0</td>\n",
       "      <td>-784.0</td>\n",
       "      <td>1168.0</td>\n",
       "      <td>1791.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>-504.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>-253.0</td>\n",
       "      <td>...</td>\n",
       "      <td>288.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>-77.0</td>\n",
       "      <td>-224.0</td>\n",
       "      <td>221.0</td>\n",
       "      <td>-49.0</td>\n",
       "      <td>-80.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>273.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>134.0</td>\n",
       "      <td>1459.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>347.0</td>\n",
       "      <td>-1374.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>425.0</td>\n",
       "      <td>-169.0</td>\n",
       "      <td>-516.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-247.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>1061.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>-72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>198.0</td>\n",
       "      <td>4330.0</td>\n",
       "      <td>967.0</td>\n",
       "      <td>3533.0</td>\n",
       "      <td>838.0</td>\n",
       "      <td>-172.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>494.0</td>\n",
       "      <td>917.0</td>\n",
       "      <td>523.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-118.0</td>\n",
       "      <td>-517.0</td>\n",
       "      <td>-70.0</td>\n",
       "      <td>-135.0</td>\n",
       "      <td>-131.0</td>\n",
       "      <td>-1198.0</td>\n",
       "      <td>-21.0</td>\n",
       "      <td>-60.0</td>\n",
       "      <td>-149.0</td>\n",
       "      <td>-247.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>-423.0</td>\n",
       "      <td>-5091.0</td>\n",
       "      <td>-1146.0</td>\n",
       "      <td>-3109.0</td>\n",
       "      <td>-2243.0</td>\n",
       "      <td>-1497.0</td>\n",
       "      <td>-156.0</td>\n",
       "      <td>-406.0</td>\n",
       "      <td>-902.0</td>\n",
       "      <td>-418.0</td>\n",
       "      <td>...</td>\n",
       "      <td>70.0</td>\n",
       "      <td>-462.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>-127.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>-41.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>81.0</td>\n",
       "      <td>-512.0</td>\n",
       "      <td>319.0</td>\n",
       "      <td>-1054.0</td>\n",
       "      <td>607.0</td>\n",
       "      <td>3623.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>-414.0</td>\n",
       "      <td>-87.0</td>\n",
       "      <td>330.0</td>\n",
       "      <td>...</td>\n",
       "      <td>137.0</td>\n",
       "      <td>946.0</td>\n",
       "      <td>-41.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>298.0</td>\n",
       "      <td>-11.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>240.0</td>\n",
       "      <td>1304.0</td>\n",
       "      <td>-44.0</td>\n",
       "      <td>1085.0</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-1947.0</td>\n",
       "      <td>-74.0</td>\n",
       "      <td>442.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>-500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>752.0</td>\n",
       "      <td>-356.0</td>\n",
       "      <td>-64.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>262.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>-218.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "0                NaN                  NaN               NaN   \n",
       "1            -1617.0              -4945.0           -1092.0   \n",
       "2              130.0              -2247.0              49.0   \n",
       "3              -89.0               1837.0             418.0   \n",
       "4              438.0               5056.0             611.0   \n",
       "5             -586.0              -5726.0           -1032.0   \n",
       "6              189.0               -764.0              27.0   \n",
       "7              126.0               1036.0            -191.0   \n",
       "8             1082.0               4831.0             973.0   \n",
       "9            -1494.0              -5049.0            -675.0   \n",
       "10            1184.0               -587.0            -331.0   \n",
       "11             457.0                385.0              48.0   \n",
       "12            -886.0               4675.0            1563.0   \n",
       "13            -267.0              -4819.0           -1052.0   \n",
       "14            -380.0               -694.0            -520.0   \n",
       "15             134.0               1459.0             190.0   \n",
       "16             198.0               4330.0             967.0   \n",
       "17            -423.0              -5091.0           -1146.0   \n",
       "18              81.0               -512.0             319.0   \n",
       "19             240.0               1304.0             -44.0   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "0                   NaN               NaN                  NaN   \n",
       "1               -3295.0           -2368.0               -400.0   \n",
       "2               -1014.0            2438.0               2985.0   \n",
       "3                   3.0           -1430.0              -2194.0   \n",
       "4                4866.0            1602.0                336.0   \n",
       "5               -4085.0           -1471.0               -488.0   \n",
       "6                -764.0             356.0               4109.0   \n",
       "7                -139.0             -46.0              -2855.0   \n",
       "8                4225.0            1055.0               -630.0   \n",
       "9               -3539.0            -944.0               -569.0   \n",
       "10               -684.0             349.0               1889.0   \n",
       "11                647.0            -495.0              -1620.0   \n",
       "12               4186.0             788.0                 84.0   \n",
       "13              -4027.0           -1145.0                 51.0   \n",
       "14               -784.0            1168.0               1791.0   \n",
       "15                161.0             347.0              -1374.0   \n",
       "16               3533.0             838.0               -172.0   \n",
       "17              -3109.0           -2243.0              -1497.0   \n",
       "18              -1054.0             607.0               3623.0   \n",
       "19               1085.0             -10.0              -1947.0   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "0               NaN                 NaN              NaN                 NaN   \n",
       "1            -367.0              -787.0           -324.0              -671.0   \n",
       "2             -45.0              -321.0             42.0               902.0   \n",
       "3              95.0               606.0             27.0               136.0   \n",
       "4             302.0               451.0            432.0               294.0   \n",
       "5            -392.0              -412.0            349.0              -731.0   \n",
       "6              -4.0              -503.0           -914.0               738.0   \n",
       "7             113.0               115.0           -217.0              -780.0   \n",
       "8             342.0              1000.0           1634.0               765.0   \n",
       "9            -505.0              -932.0          -1254.0              -553.0   \n",
       "10            160.0               594.0           -548.0               342.0   \n",
       "11             23.0              -649.0            845.0              -950.0   \n",
       "12            180.0               885.0           -296.0               419.0   \n",
       "13           -360.0              -640.0           -222.0               690.0   \n",
       "14            181.0              -504.0             62.0              -253.0   \n",
       "15             32.0               425.0           -169.0              -516.0   \n",
       "16              5.0               494.0            917.0               523.0   \n",
       "17           -156.0              -406.0           -902.0              -418.0   \n",
       "18            115.0              -414.0            -87.0               330.0   \n",
       "19            -74.0               442.0             60.0              -500.0   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "0   ...               NaN                  NaN              NaN   \n",
       "1   ...             238.0               -101.0           -102.0   \n",
       "2   ...            -399.0                994.0            255.0   \n",
       "3   ...             -56.0               -629.0           -203.0   \n",
       "4   ...             244.0                 22.0            -47.0   \n",
       "5   ...             -94.0                 -2.0            195.0   \n",
       "6   ...             571.0               1310.0           -205.0   \n",
       "7   ...            -295.0              -1162.0            263.0   \n",
       "8   ...            -127.0               -329.0           -126.0   \n",
       "9   ...            -215.0               -125.0             74.0   \n",
       "10  ...             213.0                941.0           -193.0   \n",
       "11  ...             322.0               -151.0             60.0   \n",
       "12  ...            -124.0               -716.0              1.0   \n",
       "13  ...            -280.0                396.0             -6.0   \n",
       "14  ...             288.0                 55.0             90.0   \n",
       "15  ...            -247.0                514.0             45.0   \n",
       "16  ...            -118.0               -517.0            -70.0   \n",
       "17  ...              70.0               -462.0             59.0   \n",
       "18  ...             137.0                946.0            -41.0   \n",
       "19  ...             752.0               -356.0            -64.0   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "0                  NaN              NaN                 NaN               NaN   \n",
       "1                148.0              2.0                62.0             -40.0   \n",
       "2                 94.0            210.0              1067.0              -4.0   \n",
       "3                -55.0             30.0               -27.0              16.0   \n",
       "4               -227.0           -248.0             -1111.0              29.0   \n",
       "5                 96.0            -37.0               133.0              -7.0   \n",
       "6                -20.0            421.0                82.0             -44.0   \n",
       "7                142.0           -247.0               325.0               8.0   \n",
       "8                -96.0             66.0              -302.0              15.0   \n",
       "9                -71.0           -153.0                33.0             -16.0   \n",
       "10                89.0             40.0               115.0              46.0   \n",
       "11               -26.0            -89.0               -24.0             -23.0   \n",
       "12               -82.0             82.0              -294.0              74.0   \n",
       "13               191.0            212.0               -34.0             -70.0   \n",
       "14               -77.0           -224.0               221.0             -49.0   \n",
       "15                68.0            226.0              1061.0              41.0   \n",
       "16              -135.0           -131.0             -1198.0             -21.0   \n",
       "17                44.0           -127.0                33.0              42.0   \n",
       "18                34.0            119.0               298.0             -11.0   \n",
       "19                 9.0            262.0               211.0              40.0   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "0                   NaN              NaN                 NaN  \n",
       "1                  37.0             34.0                31.0  \n",
       "2                 -38.0             81.0               299.0  \n",
       "3                  20.0             22.0               115.0  \n",
       "4                  17.0           -157.0              -406.0  \n",
       "5                  30.0             57.0                16.0  \n",
       "6                 -41.0              3.0               119.0  \n",
       "7                   7.0             70.0                35.0  \n",
       "8                  66.0           -108.0              -161.0  \n",
       "9                 -75.0              4.0               -11.0  \n",
       "10                -28.0            348.0               214.0  \n",
       "11                 -2.0           -275.0               -89.0  \n",
       "12                102.0            -93.0              -163.0  \n",
       "13                  9.0             63.0                51.0  \n",
       "14                -80.0             32.0               273.0  \n",
       "15                 71.0             47.0               -72.0  \n",
       "16                -60.0           -149.0              -247.0  \n",
       "17                -41.0             26.0                43.0  \n",
       "18                229.0             72.0                69.0  \n",
       "19               -218.0             96.0               124.0  \n",
       "\n",
       "[20 rows x 56 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First discrete difference of element. \n",
    "# Calculates the difference of a Dataframe element compared with another element in the Dataframe (default is element in previous row).\n",
    "difference = first_daily_df.diff()\n",
    "difference[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qQ4ow5TuPSP5",
    "outputId": "534de0f4-1db7-4f8b-fc9e-86d7d08e5482"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((20, 56), (16, 56))"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Features\n",
    "n_past = 1\n",
    "n_future = 8  # Predicting the next 8 steps forecast - i.e 20-36 (next 4 years) + steps\n",
    "no_of_features = 56\n",
    "\n",
    "\n",
    "#Splitting the data into testing and training such that\n",
    "\n",
    "# 20 quarters (5 years) are set to train the model \n",
    "# remaining 16q (4 years) are set as testing data which we will compare with our forecasting predictions\n",
    "train_dataF,test_dataF = difference[0:20], difference[20:]  \n",
    "train_dataF.shape,test_dataF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JH3AU7G0CVEg",
    "outputId": "afcefbbb-afea-45bd-8a4e-dc5b5d2a64d5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 1, 56)\n",
      "(12, 8, 56)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:11: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-118-52cd7655da26>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train = train_dataF\n",
    "scalers={}\n",
    "\n",
    "#Scaling the values for faster training of the models\n",
    "for i in train_dataF.columns:\n",
    "    #Using MinMaxScaler (it converts data in range 0-1)\n",
    "    scaler = MinMaxScaler(feature_range=(0,1))\n",
    "    s_s = scaler.fit_transform(train[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+ i] = scaler\n",
    "    train[i]=s_s\n",
    "\n",
    "test = test_dataF\n",
    "for i in train_dataF.columns:\n",
    "    scaler = scalers['scaler_'+i]\n",
    "    s_s = scaler.transform(test[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+i] = scaler\n",
    "    test[i]=s_s\n",
    "\n",
    "\n",
    "#Storing the training split series into the variables\n",
    "X_train, y_train = split_series(train.values,n_past, n_future)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "#Reshaping according to LSTM model input\n",
    "X_train = X_train.reshape((X_train.shape[0], X_train.shape[1],no_of_features))\n",
    "y_train = y_train.reshape((y_train.shape[0], y_train.shape[1], no_of_features))\n",
    "\n",
    "#Finding the None (Nan) Values\n",
    "where_are_NaNs = np.isnan(X_train)\n",
    "\n",
    "#Setting None to 0\n",
    "X_train[where_are_NaNs] = 0\n",
    "\n",
    "#Splitting the test values as well wrt past and future\n",
    "X_test, y_test = split_series(test.values,n_past, n_future)\n",
    "\n",
    "X_test = X_test.reshape((X_test.shape[0], X_test.shape[1],no_of_features))\n",
    "y_test = y_test.reshape((y_test.shape[0], y_test.shape[1], no_of_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "id": "4M_06adDvHT1"
   },
   "outputs": [],
   "source": [
    "#raw data \n",
    "newdataX,newdatay=split_series(first_daily_df.values,n_past, n_future)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "id": "v-jvw4hOuwFK"
   },
   "outputs": [],
   "source": [
    "newdatay = newdatay[20:, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ROcweeL7oVQ5",
    "outputId": "3dd6aa95-5686-47b1-8d90-87be9df7db0f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 1, 56)\n",
      "(12, 8, 56)\n",
      "(8, 1, 56)\n",
      "(8, 8, 56)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(8, 8, 56)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "\n",
    "# we use this as actual value (Testing set)\n",
    "newdatay.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QgUewcY3aQwA",
    "outputId": "7d26956e-5722-4ab0-da97-fc9d28290ee7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_4 (LSTM)               (None, 1, 10)             2680      \n",
      "                                                                 \n",
      " lstm_5 (LSTM)               (None, 7)                 504       \n",
      "                                                                 \n",
      " repeat_vector_1 (RepeatVect  (None, 8, 7)             0         \n",
      " or)                                                             \n",
      "                                                                 \n",
      " lstm_6 (LSTM)               (None, 8, 7)              420       \n",
      "                                                                 \n",
      " lstm_7 (LSTM)               (None, 8, 10)             720       \n",
      "                                                                 \n",
      " time_distributed_1 (TimeDis  (None, 8, 56)            616       \n",
      " tributed)                                                       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 4,940\n",
      "Trainable params: 4,940\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/400\n",
      "1/1 - 30s - loss: 0.3248 - val_loss: 0.3181 - 30s/epoch - 30s/step\n",
      "Epoch 2/400\n",
      "1/1 - 0s - loss: 0.3234 - val_loss: 0.3166 - 107ms/epoch - 107ms/step\n",
      "Epoch 3/400\n",
      "1/1 - 0s - loss: 0.3219 - val_loss: 0.3151 - 105ms/epoch - 105ms/step\n",
      "Epoch 4/400\n",
      "1/1 - 0s - loss: 0.3204 - val_loss: 0.3136 - 100ms/epoch - 100ms/step\n",
      "Epoch 5/400\n",
      "1/1 - 0s - loss: 0.3189 - val_loss: 0.3120 - 97ms/epoch - 97ms/step\n",
      "Epoch 6/400\n",
      "1/1 - 0s - loss: 0.3173 - val_loss: 0.3104 - 89ms/epoch - 89ms/step\n",
      "Epoch 7/400\n",
      "1/1 - 0s - loss: 0.3158 - val_loss: 0.3087 - 93ms/epoch - 93ms/step\n",
      "Epoch 8/400\n",
      "1/1 - 0s - loss: 0.3141 - val_loss: 0.3071 - 70ms/epoch - 70ms/step\n",
      "Epoch 9/400\n",
      "1/1 - 0s - loss: 0.3125 - val_loss: 0.3053 - 105ms/epoch - 105ms/step\n",
      "Epoch 10/400\n",
      "1/1 - 0s - loss: 0.3108 - val_loss: 0.3035 - 90ms/epoch - 90ms/step\n",
      "Epoch 11/400\n",
      "1/1 - 0s - loss: 0.3091 - val_loss: 0.3017 - 66ms/epoch - 66ms/step\n",
      "Epoch 12/400\n",
      "1/1 - 0s - loss: 0.3073 - val_loss: 0.2998 - 78ms/epoch - 78ms/step\n",
      "Epoch 13/400\n",
      "1/1 - 0s - loss: 0.3054 - val_loss: 0.2979 - 81ms/epoch - 81ms/step\n",
      "Epoch 14/400\n",
      "1/1 - 0s - loss: 0.3036 - val_loss: 0.2959 - 79ms/epoch - 79ms/step\n",
      "Epoch 15/400\n",
      "1/1 - 0s - loss: 0.3016 - val_loss: 0.2939 - 77ms/epoch - 77ms/step\n",
      "Epoch 16/400\n",
      "1/1 - 0s - loss: 0.2996 - val_loss: 0.2917 - 90ms/epoch - 90ms/step\n",
      "Epoch 17/400\n",
      "1/1 - 0s - loss: 0.2976 - val_loss: 0.2895 - 67ms/epoch - 67ms/step\n",
      "Epoch 18/400\n",
      "1/1 - 0s - loss: 0.2955 - val_loss: 0.2873 - 96ms/epoch - 96ms/step\n",
      "Epoch 19/400\n",
      "1/1 - 0s - loss: 0.2933 - val_loss: 0.2849 - 98ms/epoch - 98ms/step\n",
      "Epoch 20/400\n",
      "1/1 - 0s - loss: 0.2910 - val_loss: 0.2825 - 97ms/epoch - 97ms/step\n",
      "Epoch 21/400\n",
      "1/1 - 0s - loss: 0.2887 - val_loss: 0.2800 - 85ms/epoch - 85ms/step\n",
      "Epoch 22/400\n",
      "1/1 - 0s - loss: 0.2863 - val_loss: 0.2774 - 90ms/epoch - 90ms/step\n",
      "Epoch 23/400\n",
      "1/1 - 0s - loss: 0.2837 - val_loss: 0.2747 - 82ms/epoch - 82ms/step\n",
      "Epoch 24/400\n",
      "1/1 - 0s - loss: 0.2812 - val_loss: 0.2719 - 93ms/epoch - 93ms/step\n",
      "Epoch 25/400\n",
      "1/1 - 0s - loss: 0.2785 - val_loss: 0.2690 - 108ms/epoch - 108ms/step\n",
      "Epoch 26/400\n",
      "1/1 - 0s - loss: 0.2757 - val_loss: 0.2660 - 86ms/epoch - 86ms/step\n",
      "Epoch 27/400\n",
      "1/1 - 0s - loss: 0.2728 - val_loss: 0.2628 - 106ms/epoch - 106ms/step\n",
      "Epoch 28/400\n",
      "1/1 - 0s - loss: 0.2698 - val_loss: 0.2596 - 89ms/epoch - 89ms/step\n",
      "Epoch 29/400\n",
      "1/1 - 0s - loss: 0.2667 - val_loss: 0.2562 - 79ms/epoch - 79ms/step\n",
      "Epoch 30/400\n",
      "1/1 - 0s - loss: 0.2635 - val_loss: 0.2527 - 87ms/epoch - 87ms/step\n",
      "Epoch 31/400\n",
      "1/1 - 0s - loss: 0.2602 - val_loss: 0.2492 - 90ms/epoch - 90ms/step\n",
      "Epoch 32/400\n",
      "1/1 - 0s - loss: 0.2568 - val_loss: 0.2454 - 99ms/epoch - 99ms/step\n",
      "Epoch 33/400\n",
      "1/1 - 0s - loss: 0.2533 - val_loss: 0.2416 - 93ms/epoch - 93ms/step\n",
      "Epoch 34/400\n",
      "1/1 - 0s - loss: 0.2496 - val_loss: 0.2377 - 82ms/epoch - 82ms/step\n",
      "Epoch 35/400\n",
      "1/1 - 0s - loss: 0.2459 - val_loss: 0.2336 - 86ms/epoch - 86ms/step\n",
      "Epoch 36/400\n",
      "1/1 - 0s - loss: 0.2420 - val_loss: 0.2295 - 98ms/epoch - 98ms/step\n",
      "Epoch 37/400\n",
      "1/1 - 0s - loss: 0.2380 - val_loss: 0.2253 - 91ms/epoch - 91ms/step\n",
      "Epoch 38/400\n",
      "1/1 - 0s - loss: 0.2340 - val_loss: 0.2209 - 94ms/epoch - 94ms/step\n",
      "Epoch 39/400\n",
      "1/1 - 0s - loss: 0.2299 - val_loss: 0.2166 - 101ms/epoch - 101ms/step\n",
      "Epoch 40/400\n",
      "1/1 - 0s - loss: 0.2257 - val_loss: 0.2121 - 96ms/epoch - 96ms/step\n",
      "Epoch 41/400\n",
      "1/1 - 0s - loss: 0.2214 - val_loss: 0.2077 - 97ms/epoch - 97ms/step\n",
      "Epoch 42/400\n",
      "1/1 - 0s - loss: 0.2172 - val_loss: 0.2032 - 95ms/epoch - 95ms/step\n",
      "Epoch 43/400\n",
      "1/1 - 0s - loss: 0.2129 - val_loss: 0.1988 - 99ms/epoch - 99ms/step\n",
      "Epoch 44/400\n",
      "1/1 - 0s - loss: 0.2086 - val_loss: 0.1944 - 91ms/epoch - 91ms/step\n",
      "Epoch 45/400\n",
      "1/1 - 0s - loss: 0.2043 - val_loss: 0.1901 - 82ms/epoch - 82ms/step\n",
      "Epoch 46/400\n",
      "1/1 - 0s - loss: 0.2001 - val_loss: 0.1859 - 104ms/epoch - 104ms/step\n",
      "Epoch 47/400\n",
      "1/1 - 0s - loss: 0.1960 - val_loss: 0.1818 - 96ms/epoch - 96ms/step\n",
      "Epoch 48/400\n",
      "1/1 - 0s - loss: 0.1920 - val_loss: 0.1778 - 101ms/epoch - 101ms/step\n",
      "Epoch 49/400\n",
      "1/1 - 0s - loss: 0.1881 - val_loss: 0.1741 - 96ms/epoch - 96ms/step\n",
      "Epoch 50/400\n",
      "1/1 - 0s - loss: 0.1844 - val_loss: 0.1705 - 95ms/epoch - 95ms/step\n",
      "Epoch 51/400\n",
      "1/1 - 0s - loss: 0.1808 - val_loss: 0.1672 - 80ms/epoch - 80ms/step\n",
      "Epoch 52/400\n",
      "1/1 - 0s - loss: 0.1774 - val_loss: 0.1640 - 100ms/epoch - 100ms/step\n",
      "Epoch 53/400\n",
      "1/1 - 0s - loss: 0.1743 - val_loss: 0.1611 - 101ms/epoch - 101ms/step\n",
      "Epoch 54/400\n",
      "1/1 - 0s - loss: 0.1713 - val_loss: 0.1585 - 100ms/epoch - 100ms/step\n",
      "Epoch 55/400\n",
      "1/1 - 0s - loss: 0.1686 - val_loss: 0.1560 - 94ms/epoch - 94ms/step\n",
      "Epoch 56/400\n",
      "1/1 - 0s - loss: 0.1660 - val_loss: 0.1537 - 85ms/epoch - 85ms/step\n",
      "Epoch 57/400\n",
      "1/1 - 0s - loss: 0.1636 - val_loss: 0.1515 - 90ms/epoch - 90ms/step\n",
      "Epoch 58/400\n",
      "1/1 - 0s - loss: 0.1614 - val_loss: 0.1495 - 103ms/epoch - 103ms/step\n",
      "Epoch 59/400\n",
      "1/1 - 0s - loss: 0.1593 - val_loss: 0.1475 - 95ms/epoch - 95ms/step\n",
      "Epoch 60/400\n",
      "1/1 - 0s - loss: 0.1572 - val_loss: 0.1456 - 89ms/epoch - 89ms/step\n",
      "Epoch 61/400\n",
      "1/1 - 0s - loss: 0.1552 - val_loss: 0.1437 - 85ms/epoch - 85ms/step\n",
      "Epoch 62/400\n",
      "1/1 - 0s - loss: 0.1533 - val_loss: 0.1418 - 91ms/epoch - 91ms/step\n",
      "Epoch 63/400\n",
      "1/1 - 0s - loss: 0.1514 - val_loss: 0.1399 - 97ms/epoch - 97ms/step\n",
      "Epoch 64/400\n",
      "1/1 - 0s - loss: 0.1495 - val_loss: 0.1380 - 100ms/epoch - 100ms/step\n",
      "Epoch 65/400\n",
      "1/1 - 0s - loss: 0.1476 - val_loss: 0.1362 - 101ms/epoch - 101ms/step\n",
      "Epoch 66/400\n",
      "1/1 - 0s - loss: 0.1458 - val_loss: 0.1343 - 93ms/epoch - 93ms/step\n",
      "Epoch 67/400\n",
      "1/1 - 0s - loss: 0.1439 - val_loss: 0.1324 - 86ms/epoch - 86ms/step\n",
      "Epoch 68/400\n",
      "1/1 - 0s - loss: 0.1421 - val_loss: 0.1306 - 109ms/epoch - 109ms/step\n",
      "Epoch 69/400\n",
      "1/1 - 0s - loss: 0.1403 - val_loss: 0.1288 - 94ms/epoch - 94ms/step\n",
      "Epoch 70/400\n",
      "1/1 - 0s - loss: 0.1386 - val_loss: 0.1270 - 85ms/epoch - 85ms/step\n",
      "Epoch 71/400\n",
      "1/1 - 0s - loss: 0.1369 - val_loss: 0.1253 - 96ms/epoch - 96ms/step\n",
      "Epoch 72/400\n",
      "1/1 - 0s - loss: 0.1352 - val_loss: 0.1236 - 101ms/epoch - 101ms/step\n",
      "Epoch 73/400\n",
      "1/1 - 0s - loss: 0.1336 - val_loss: 0.1219 - 115ms/epoch - 115ms/step\n",
      "Epoch 74/400\n",
      "1/1 - 0s - loss: 0.1320 - val_loss: 0.1203 - 90ms/epoch - 90ms/step\n",
      "Epoch 75/400\n",
      "1/1 - 0s - loss: 0.1305 - val_loss: 0.1188 - 85ms/epoch - 85ms/step\n",
      "Epoch 76/400\n",
      "1/1 - 0s - loss: 0.1290 - val_loss: 0.1173 - 100ms/epoch - 100ms/step\n",
      "Epoch 77/400\n",
      "1/1 - 0s - loss: 0.1276 - val_loss: 0.1159 - 81ms/epoch - 81ms/step\n",
      "Epoch 78/400\n",
      "1/1 - 0s - loss: 0.1262 - val_loss: 0.1145 - 90ms/epoch - 90ms/step\n",
      "Epoch 79/400\n",
      "1/1 - 0s - loss: 0.1249 - val_loss: 0.1132 - 92ms/epoch - 92ms/step\n",
      "Epoch 80/400\n",
      "1/1 - 0s - loss: 0.1236 - val_loss: 0.1119 - 86ms/epoch - 86ms/step\n",
      "Epoch 81/400\n",
      "1/1 - 0s - loss: 0.1224 - val_loss: 0.1107 - 94ms/epoch - 94ms/step\n",
      "Epoch 82/400\n",
      "1/1 - 0s - loss: 0.1212 - val_loss: 0.1095 - 81ms/epoch - 81ms/step\n",
      "Epoch 83/400\n",
      "1/1 - 0s - loss: 0.1201 - val_loss: 0.1084 - 111ms/epoch - 111ms/step\n",
      "Epoch 84/400\n",
      "1/1 - 0s - loss: 0.1190 - val_loss: 0.1073 - 86ms/epoch - 86ms/step\n",
      "Epoch 85/400\n",
      "1/1 - 0s - loss: 0.1179 - val_loss: 0.1062 - 94ms/epoch - 94ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 86/400\n",
      "1/1 - 0s - loss: 0.1169 - val_loss: 0.1052 - 87ms/epoch - 87ms/step\n",
      "Epoch 87/400\n",
      "1/1 - 0s - loss: 0.1158 - val_loss: 0.1042 - 111ms/epoch - 111ms/step\n",
      "Epoch 88/400\n",
      "1/1 - 0s - loss: 0.1149 - val_loss: 0.1032 - 90ms/epoch - 90ms/step\n",
      "Epoch 89/400\n",
      "1/1 - 0s - loss: 0.1139 - val_loss: 0.1023 - 84ms/epoch - 84ms/step\n",
      "Epoch 90/400\n",
      "1/1 - 0s - loss: 0.1130 - val_loss: 0.1014 - 86ms/epoch - 86ms/step\n",
      "Epoch 91/400\n",
      "1/1 - 0s - loss: 0.1121 - val_loss: 0.1005 - 89ms/epoch - 89ms/step\n",
      "Epoch 92/400\n",
      "1/1 - 0s - loss: 0.1113 - val_loss: 0.0997 - 98ms/epoch - 98ms/step\n",
      "Epoch 93/400\n",
      "1/1 - 0s - loss: 0.1104 - val_loss: 0.0989 - 86ms/epoch - 86ms/step\n",
      "Epoch 94/400\n",
      "1/1 - 0s - loss: 0.1096 - val_loss: 0.0981 - 91ms/epoch - 91ms/step\n",
      "Epoch 95/400\n",
      "1/1 - 0s - loss: 0.1088 - val_loss: 0.0973 - 85ms/epoch - 85ms/step\n",
      "Epoch 96/400\n",
      "1/1 - 0s - loss: 0.1080 - val_loss: 0.0966 - 84ms/epoch - 84ms/step\n",
      "Epoch 97/400\n",
      "1/1 - 0s - loss: 0.1073 - val_loss: 0.0958 - 87ms/epoch - 87ms/step\n",
      "Epoch 98/400\n",
      "1/1 - 0s - loss: 0.1065 - val_loss: 0.0951 - 76ms/epoch - 76ms/step\n",
      "Epoch 99/400\n",
      "1/1 - 0s - loss: 0.1058 - val_loss: 0.0944 - 110ms/epoch - 110ms/step\n",
      "Epoch 100/400\n",
      "1/1 - 0s - loss: 0.1051 - val_loss: 0.0938 - 79ms/epoch - 79ms/step\n",
      "Epoch 101/400\n",
      "1/1 - 0s - loss: 0.1045 - val_loss: 0.0931 - 91ms/epoch - 91ms/step\n",
      "Epoch 102/400\n",
      "1/1 - 0s - loss: 0.1038 - val_loss: 0.0925 - 102ms/epoch - 102ms/step\n",
      "Epoch 103/400\n",
      "1/1 - 0s - loss: 0.1032 - val_loss: 0.0919 - 93ms/epoch - 93ms/step\n",
      "Epoch 104/400\n",
      "1/1 - 0s - loss: 0.1026 - val_loss: 0.0913 - 94ms/epoch - 94ms/step\n",
      "Epoch 105/400\n",
      "1/1 - 0s - loss: 0.1019 - val_loss: 0.0907 - 91ms/epoch - 91ms/step\n",
      "Epoch 106/400\n",
      "1/1 - 0s - loss: 0.1014 - val_loss: 0.0902 - 79ms/epoch - 79ms/step\n",
      "Epoch 107/400\n",
      "1/1 - 0s - loss: 0.1008 - val_loss: 0.0896 - 92ms/epoch - 92ms/step\n",
      "Epoch 108/400\n",
      "1/1 - 0s - loss: 0.1002 - val_loss: 0.0891 - 91ms/epoch - 91ms/step\n",
      "Epoch 109/400\n",
      "1/1 - 0s - loss: 0.0997 - val_loss: 0.0886 - 100ms/epoch - 100ms/step\n",
      "Epoch 110/400\n",
      "1/1 - 0s - loss: 0.0992 - val_loss: 0.0881 - 122ms/epoch - 122ms/step\n",
      "Epoch 111/400\n",
      "1/1 - 0s - loss: 0.0986 - val_loss: 0.0876 - 80ms/epoch - 80ms/step\n",
      "Epoch 112/400\n",
      "1/1 - 0s - loss: 0.0981 - val_loss: 0.0871 - 77ms/epoch - 77ms/step\n",
      "Epoch 113/400\n",
      "1/1 - 0s - loss: 0.0976 - val_loss: 0.0866 - 81ms/epoch - 81ms/step\n",
      "Epoch 114/400\n",
      "1/1 - 0s - loss: 0.0972 - val_loss: 0.0862 - 94ms/epoch - 94ms/step\n",
      "Epoch 115/400\n",
      "1/1 - 0s - loss: 0.0967 - val_loss: 0.0857 - 91ms/epoch - 91ms/step\n",
      "Epoch 116/400\n",
      "1/1 - 0s - loss: 0.0962 - val_loss: 0.0853 - 97ms/epoch - 97ms/step\n",
      "Epoch 117/400\n",
      "1/1 - 0s - loss: 0.0958 - val_loss: 0.0849 - 102ms/epoch - 102ms/step\n",
      "Epoch 118/400\n",
      "1/1 - 0s - loss: 0.0953 - val_loss: 0.0845 - 98ms/epoch - 98ms/step\n",
      "Epoch 119/400\n",
      "1/1 - 0s - loss: 0.0949 - val_loss: 0.0841 - 93ms/epoch - 93ms/step\n",
      "Epoch 120/400\n",
      "1/1 - 0s - loss: 0.0945 - val_loss: 0.0837 - 91ms/epoch - 91ms/step\n",
      "Epoch 121/400\n",
      "1/1 - 0s - loss: 0.0941 - val_loss: 0.0833 - 100ms/epoch - 100ms/step\n",
      "Epoch 122/400\n",
      "1/1 - 0s - loss: 0.0937 - val_loss: 0.0829 - 104ms/epoch - 104ms/step\n",
      "Epoch 123/400\n",
      "1/1 - 0s - loss: 0.0933 - val_loss: 0.0826 - 87ms/epoch - 87ms/step\n",
      "Epoch 124/400\n",
      "1/1 - 0s - loss: 0.0929 - val_loss: 0.0822 - 89ms/epoch - 89ms/step\n",
      "Epoch 125/400\n",
      "1/1 - 0s - loss: 0.0925 - val_loss: 0.0818 - 106ms/epoch - 106ms/step\n",
      "Epoch 126/400\n",
      "1/1 - 0s - loss: 0.0922 - val_loss: 0.0815 - 94ms/epoch - 94ms/step\n",
      "Epoch 127/400\n",
      "1/1 - 0s - loss: 0.0918 - val_loss: 0.0812 - 89ms/epoch - 89ms/step\n",
      "Epoch 128/400\n",
      "1/1 - 0s - loss: 0.0914 - val_loss: 0.0808 - 112ms/epoch - 112ms/step\n",
      "Epoch 129/400\n",
      "1/1 - 0s - loss: 0.0911 - val_loss: 0.0805 - 89ms/epoch - 89ms/step\n",
      "Epoch 130/400\n",
      "1/1 - 0s - loss: 0.0908 - val_loss: 0.0802 - 88ms/epoch - 88ms/step\n",
      "Epoch 131/400\n",
      "1/1 - 0s - loss: 0.0904 - val_loss: 0.0799 - 95ms/epoch - 95ms/step\n",
      "Epoch 132/400\n",
      "1/1 - 0s - loss: 0.0901 - val_loss: 0.0796 - 99ms/epoch - 99ms/step\n",
      "Epoch 133/400\n",
      "1/1 - 0s - loss: 0.0898 - val_loss: 0.0793 - 84ms/epoch - 84ms/step\n",
      "Epoch 134/400\n",
      "1/1 - 0s - loss: 0.0895 - val_loss: 0.0790 - 95ms/epoch - 95ms/step\n",
      "Epoch 135/400\n",
      "1/1 - 0s - loss: 0.0892 - val_loss: 0.0787 - 103ms/epoch - 103ms/step\n",
      "Epoch 136/400\n",
      "1/1 - 0s - loss: 0.0889 - val_loss: 0.0785 - 99ms/epoch - 99ms/step\n",
      "Epoch 137/400\n",
      "1/1 - 0s - loss: 0.0886 - val_loss: 0.0782 - 100ms/epoch - 100ms/step\n",
      "Epoch 138/400\n",
      "1/1 - 0s - loss: 0.0883 - val_loss: 0.0779 - 124ms/epoch - 124ms/step\n",
      "Epoch 139/400\n",
      "1/1 - 0s - loss: 0.0880 - val_loss: 0.0777 - 94ms/epoch - 94ms/step\n",
      "Epoch 140/400\n",
      "1/1 - 0s - loss: 0.0877 - val_loss: 0.0774 - 102ms/epoch - 102ms/step\n",
      "Epoch 141/400\n",
      "1/1 - 0s - loss: 0.0875 - val_loss: 0.0772 - 93ms/epoch - 93ms/step\n",
      "Epoch 142/400\n",
      "1/1 - 0s - loss: 0.0872 - val_loss: 0.0769 - 108ms/epoch - 108ms/step\n",
      "Epoch 143/400\n",
      "1/1 - 0s - loss: 0.0869 - val_loss: 0.0767 - 114ms/epoch - 114ms/step\n",
      "Epoch 144/400\n",
      "1/1 - 0s - loss: 0.0867 - val_loss: 0.0765 - 102ms/epoch - 102ms/step\n",
      "Epoch 145/400\n",
      "1/1 - 0s - loss: 0.0864 - val_loss: 0.0762 - 103ms/epoch - 103ms/step\n",
      "Epoch 146/400\n",
      "1/1 - 0s - loss: 0.0862 - val_loss: 0.0760 - 106ms/epoch - 106ms/step\n",
      "Epoch 147/400\n",
      "1/1 - 0s - loss: 0.0859 - val_loss: 0.0758 - 101ms/epoch - 101ms/step\n",
      "Epoch 148/400\n",
      "1/1 - 0s - loss: 0.0857 - val_loss: 0.0756 - 96ms/epoch - 96ms/step\n",
      "Epoch 149/400\n",
      "1/1 - 0s - loss: 0.0855 - val_loss: 0.0754 - 109ms/epoch - 109ms/step\n",
      "Epoch 150/400\n",
      "1/1 - 0s - loss: 0.0852 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 151/400\n",
      "1/1 - 0s - loss: 0.0850 - val_loss: 0.0750 - 102ms/epoch - 102ms/step\n",
      "Epoch 152/400\n",
      "1/1 - 0s - loss: 0.0848 - val_loss: 0.0748 - 97ms/epoch - 97ms/step\n",
      "Epoch 153/400\n",
      "1/1 - 0s - loss: 0.0846 - val_loss: 0.0746 - 101ms/epoch - 101ms/step\n",
      "Epoch 154/400\n",
      "1/1 - 0s - loss: 0.0843 - val_loss: 0.0744 - 96ms/epoch - 96ms/step\n",
      "Epoch 155/400\n",
      "1/1 - 0s - loss: 0.0841 - val_loss: 0.0742 - 90ms/epoch - 90ms/step\n",
      "Epoch 156/400\n",
      "1/1 - 0s - loss: 0.0839 - val_loss: 0.0740 - 108ms/epoch - 108ms/step\n",
      "Epoch 157/400\n",
      "1/1 - 0s - loss: 0.0837 - val_loss: 0.0738 - 100ms/epoch - 100ms/step\n",
      "Epoch 158/400\n",
      "1/1 - 0s - loss: 0.0835 - val_loss: 0.0736 - 101ms/epoch - 101ms/step\n",
      "Epoch 159/400\n",
      "1/1 - 0s - loss: 0.0833 - val_loss: 0.0735 - 95ms/epoch - 95ms/step\n",
      "Epoch 160/400\n",
      "1/1 - 0s - loss: 0.0831 - val_loss: 0.0733 - 80ms/epoch - 80ms/step\n",
      "Epoch 161/400\n",
      "1/1 - 0s - loss: 0.0829 - val_loss: 0.0731 - 99ms/epoch - 99ms/step\n",
      "Epoch 162/400\n",
      "1/1 - 0s - loss: 0.0828 - val_loss: 0.0729 - 103ms/epoch - 103ms/step\n",
      "Epoch 163/400\n",
      "1/1 - 0s - loss: 0.0826 - val_loss: 0.0728 - 86ms/epoch - 86ms/step\n",
      "Epoch 164/400\n",
      "1/1 - 0s - loss: 0.0824 - val_loss: 0.0726 - 85ms/epoch - 85ms/step\n",
      "Epoch 165/400\n",
      "1/1 - 0s - loss: 0.0822 - val_loss: 0.0725 - 92ms/epoch - 92ms/step\n",
      "Epoch 166/400\n",
      "1/1 - 0s - loss: 0.0820 - val_loss: 0.0723 - 92ms/epoch - 92ms/step\n",
      "Epoch 167/400\n",
      "1/1 - 0s - loss: 0.0819 - val_loss: 0.0722 - 99ms/epoch - 99ms/step\n",
      "Epoch 168/400\n",
      "1/1 - 0s - loss: 0.0817 - val_loss: 0.0720 - 84ms/epoch - 84ms/step\n",
      "Epoch 169/400\n",
      "1/1 - 0s - loss: 0.0815 - val_loss: 0.0719 - 94ms/epoch - 94ms/step\n",
      "Epoch 170/400\n",
      "1/1 - 0s - loss: 0.0814 - val_loss: 0.0717 - 96ms/epoch - 96ms/step\n",
      "Epoch 171/400\n",
      "1/1 - 0s - loss: 0.0812 - val_loss: 0.0716 - 82ms/epoch - 82ms/step\n",
      "Epoch 172/400\n",
      "1/1 - 0s - loss: 0.0810 - val_loss: 0.0714 - 94ms/epoch - 94ms/step\n",
      "Epoch 173/400\n",
      "1/1 - 0s - loss: 0.0809 - val_loss: 0.0713 - 79ms/epoch - 79ms/step\n",
      "Epoch 174/400\n",
      "1/1 - 0s - loss: 0.0807 - val_loss: 0.0712 - 78ms/epoch - 78ms/step\n",
      "Epoch 175/400\n",
      "1/1 - 0s - loss: 0.0806 - val_loss: 0.0710 - 93ms/epoch - 93ms/step\n",
      "Epoch 176/400\n",
      "1/1 - 0s - loss: 0.0804 - val_loss: 0.0709 - 90ms/epoch - 90ms/step\n",
      "Epoch 177/400\n",
      "1/1 - 0s - loss: 0.0803 - val_loss: 0.0708 - 84ms/epoch - 84ms/step\n",
      "Epoch 178/400\n",
      "1/1 - 0s - loss: 0.0801 - val_loss: 0.0706 - 83ms/epoch - 83ms/step\n",
      "Epoch 179/400\n",
      "1/1 - 0s - loss: 0.0800 - val_loss: 0.0705 - 89ms/epoch - 89ms/step\n",
      "Epoch 180/400\n",
      "1/1 - 0s - loss: 0.0799 - val_loss: 0.0704 - 100ms/epoch - 100ms/step\n",
      "Epoch 181/400\n",
      "1/1 - 0s - loss: 0.0797 - val_loss: 0.0703 - 101ms/epoch - 101ms/step\n",
      "Epoch 182/400\n",
      "1/1 - 0s - loss: 0.0796 - val_loss: 0.0702 - 93ms/epoch - 93ms/step\n",
      "Epoch 183/400\n",
      "1/1 - 0s - loss: 0.0794 - val_loss: 0.0700 - 94ms/epoch - 94ms/step\n",
      "Epoch 184/400\n",
      "1/1 - 0s - loss: 0.0793 - val_loss: 0.0699 - 89ms/epoch - 89ms/step\n",
      "Epoch 185/400\n",
      "1/1 - 0s - loss: 0.0792 - val_loss: 0.0698 - 97ms/epoch - 97ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 186/400\n",
      "1/1 - 0s - loss: 0.0791 - val_loss: 0.0697 - 95ms/epoch - 95ms/step\n",
      "Epoch 187/400\n",
      "1/1 - 0s - loss: 0.0789 - val_loss: 0.0696 - 104ms/epoch - 104ms/step\n",
      "Epoch 188/400\n",
      "1/1 - 0s - loss: 0.0788 - val_loss: 0.0695 - 78ms/epoch - 78ms/step\n",
      "Epoch 189/400\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0694 - 103ms/epoch - 103ms/step\n",
      "Epoch 190/400\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0693 - 91ms/epoch - 91ms/step\n",
      "Epoch 191/400\n",
      "1/1 - 0s - loss: 0.0784 - val_loss: 0.0692 - 89ms/epoch - 89ms/step\n",
      "Epoch 192/400\n",
      "1/1 - 0s - loss: 0.0783 - val_loss: 0.0691 - 89ms/epoch - 89ms/step\n",
      "Epoch 193/400\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0690 - 98ms/epoch - 98ms/step\n",
      "Epoch 194/400\n",
      "1/1 - 0s - loss: 0.0781 - val_loss: 0.0689 - 87ms/epoch - 87ms/step\n",
      "Epoch 195/400\n",
      "1/1 - 0s - loss: 0.0780 - val_loss: 0.0688 - 82ms/epoch - 82ms/step\n",
      "Epoch 196/400\n",
      "1/1 - 0s - loss: 0.0779 - val_loss: 0.0687 - 109ms/epoch - 109ms/step\n",
      "Epoch 197/400\n",
      "1/1 - 0s - loss: 0.0777 - val_loss: 0.0686 - 97ms/epoch - 97ms/step\n",
      "Epoch 198/400\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0685 - 96ms/epoch - 96ms/step\n",
      "Epoch 199/400\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0684 - 88ms/epoch - 88ms/step\n",
      "Epoch 200/400\n",
      "1/1 - 0s - loss: 0.0774 - val_loss: 0.0683 - 92ms/epoch - 92ms/step\n",
      "Epoch 201/400\n",
      "1/1 - 0s - loss: 0.0773 - val_loss: 0.0682 - 91ms/epoch - 91ms/step\n",
      "Epoch 202/400\n",
      "1/1 - 0s - loss: 0.0772 - val_loss: 0.0681 - 99ms/epoch - 99ms/step\n",
      "Epoch 203/400\n",
      "1/1 - 0s - loss: 0.0771 - val_loss: 0.0681 - 89ms/epoch - 89ms/step\n",
      "Epoch 204/400\n",
      "1/1 - 0s - loss: 0.0770 - val_loss: 0.0680 - 103ms/epoch - 103ms/step\n",
      "Epoch 205/400\n",
      "1/1 - 0s - loss: 0.0769 - val_loss: 0.0679 - 104ms/epoch - 104ms/step\n",
      "Epoch 206/400\n",
      "1/1 - 0s - loss: 0.0768 - val_loss: 0.0678 - 109ms/epoch - 109ms/step\n",
      "Epoch 207/400\n",
      "1/1 - 0s - loss: 0.0767 - val_loss: 0.0677 - 97ms/epoch - 97ms/step\n",
      "Epoch 208/400\n",
      "1/1 - 0s - loss: 0.0766 - val_loss: 0.0677 - 96ms/epoch - 96ms/step\n",
      "Epoch 209/400\n",
      "1/1 - 0s - loss: 0.0765 - val_loss: 0.0676 - 101ms/epoch - 101ms/step\n",
      "Epoch 210/400\n",
      "1/1 - 0s - loss: 0.0764 - val_loss: 0.0675 - 78ms/epoch - 78ms/step\n",
      "Epoch 211/400\n",
      "1/1 - 0s - loss: 0.0763 - val_loss: 0.0674 - 84ms/epoch - 84ms/step\n",
      "Epoch 212/400\n",
      "1/1 - 0s - loss: 0.0763 - val_loss: 0.0674 - 109ms/epoch - 109ms/step\n",
      "Epoch 213/400\n",
      "1/1 - 0s - loss: 0.0762 - val_loss: 0.0673 - 85ms/epoch - 85ms/step\n",
      "Epoch 214/400\n",
      "1/1 - 0s - loss: 0.0761 - val_loss: 0.0672 - 109ms/epoch - 109ms/step\n",
      "Epoch 215/400\n",
      "1/1 - 0s - loss: 0.0760 - val_loss: 0.0671 - 107ms/epoch - 107ms/step\n",
      "Epoch 216/400\n",
      "1/1 - 0s - loss: 0.0759 - val_loss: 0.0671 - 101ms/epoch - 101ms/step\n",
      "Epoch 217/400\n",
      "1/1 - 0s - loss: 0.0758 - val_loss: 0.0670 - 90ms/epoch - 90ms/step\n",
      "Epoch 218/400\n",
      "1/1 - 0s - loss: 0.0757 - val_loss: 0.0669 - 93ms/epoch - 93ms/step\n",
      "Epoch 219/400\n",
      "1/1 - 0s - loss: 0.0757 - val_loss: 0.0669 - 112ms/epoch - 112ms/step\n",
      "Epoch 220/400\n",
      "1/1 - 0s - loss: 0.0756 - val_loss: 0.0668 - 117ms/epoch - 117ms/step\n",
      "Epoch 221/400\n",
      "1/1 - 0s - loss: 0.0755 - val_loss: 0.0667 - 79ms/epoch - 79ms/step\n",
      "Epoch 222/400\n",
      "1/1 - 0s - loss: 0.0754 - val_loss: 0.0667 - 103ms/epoch - 103ms/step\n",
      "Epoch 223/400\n",
      "1/1 - 0s - loss: 0.0753 - val_loss: 0.0666 - 113ms/epoch - 113ms/step\n",
      "Epoch 224/400\n",
      "1/1 - 0s - loss: 0.0753 - val_loss: 0.0665 - 106ms/epoch - 106ms/step\n",
      "Epoch 225/400\n",
      "1/1 - 0s - loss: 0.0752 - val_loss: 0.0665 - 108ms/epoch - 108ms/step\n",
      "Epoch 226/400\n",
      "1/1 - 0s - loss: 0.0751 - val_loss: 0.0664 - 94ms/epoch - 94ms/step\n",
      "Epoch 227/400\n",
      "1/1 - 0s - loss: 0.0750 - val_loss: 0.0664 - 94ms/epoch - 94ms/step\n",
      "Epoch 228/400\n",
      "1/1 - 0s - loss: 0.0750 - val_loss: 0.0663 - 92ms/epoch - 92ms/step\n",
      "Epoch 229/400\n",
      "1/1 - 0s - loss: 0.0749 - val_loss: 0.0662 - 80ms/epoch - 80ms/step\n",
      "Epoch 230/400\n",
      "1/1 - 0s - loss: 0.0748 - val_loss: 0.0662 - 97ms/epoch - 97ms/step\n",
      "Epoch 231/400\n",
      "1/1 - 0s - loss: 0.0747 - val_loss: 0.0661 - 96ms/epoch - 96ms/step\n",
      "Epoch 232/400\n",
      "1/1 - 0s - loss: 0.0747 - val_loss: 0.0661 - 101ms/epoch - 101ms/step\n",
      "Epoch 233/400\n",
      "1/1 - 0s - loss: 0.0746 - val_loss: 0.0660 - 88ms/epoch - 88ms/step\n",
      "Epoch 234/400\n",
      "1/1 - 0s - loss: 0.0745 - val_loss: 0.0660 - 97ms/epoch - 97ms/step\n",
      "Epoch 235/400\n",
      "1/1 - 0s - loss: 0.0745 - val_loss: 0.0659 - 99ms/epoch - 99ms/step\n",
      "Epoch 236/400\n",
      "1/1 - 0s - loss: 0.0744 - val_loss: 0.0659 - 90ms/epoch - 90ms/step\n",
      "Epoch 237/400\n",
      "1/1 - 0s - loss: 0.0743 - val_loss: 0.0658 - 102ms/epoch - 102ms/step\n",
      "Epoch 238/400\n",
      "1/1 - 0s - loss: 0.0743 - val_loss: 0.0658 - 97ms/epoch - 97ms/step\n",
      "Epoch 239/400\n",
      "1/1 - 0s - loss: 0.0742 - val_loss: 0.0657 - 96ms/epoch - 96ms/step\n",
      "Epoch 240/400\n",
      "1/1 - 0s - loss: 0.0741 - val_loss: 0.0657 - 95ms/epoch - 95ms/step\n",
      "Epoch 241/400\n",
      "1/1 - 0s - loss: 0.0741 - val_loss: 0.0656 - 122ms/epoch - 122ms/step\n",
      "Epoch 242/400\n",
      "1/1 - 0s - loss: 0.0740 - val_loss: 0.0656 - 99ms/epoch - 99ms/step\n",
      "Epoch 243/400\n",
      "1/1 - 0s - loss: 0.0739 - val_loss: 0.0655 - 93ms/epoch - 93ms/step\n",
      "Epoch 244/400\n",
      "1/1 - 0s - loss: 0.0739 - val_loss: 0.0655 - 93ms/epoch - 93ms/step\n",
      "Epoch 245/400\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0654 - 95ms/epoch - 95ms/step\n",
      "Epoch 246/400\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0654 - 75ms/epoch - 75ms/step\n",
      "Epoch 247/400\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0653 - 96ms/epoch - 96ms/step\n",
      "Epoch 248/400\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0653 - 99ms/epoch - 99ms/step\n",
      "Epoch 249/400\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0652 - 102ms/epoch - 102ms/step\n",
      "Epoch 250/400\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0652 - 92ms/epoch - 92ms/step\n",
      "Epoch 251/400\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0652 - 87ms/epoch - 87ms/step\n",
      "Epoch 252/400\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0651 - 92ms/epoch - 92ms/step\n",
      "Epoch 253/400\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0651 - 110ms/epoch - 110ms/step\n",
      "Epoch 254/400\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0650 - 95ms/epoch - 95ms/step\n",
      "Epoch 255/400\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0650 - 94ms/epoch - 94ms/step\n",
      "Epoch 256/400\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0650 - 90ms/epoch - 90ms/step\n",
      "Epoch 257/400\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0649 - 86ms/epoch - 86ms/step\n",
      "Epoch 258/400\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0649 - 98ms/epoch - 98ms/step\n",
      "Epoch 259/400\n",
      "1/1 - 0s - loss: 0.0730 - val_loss: 0.0648 - 87ms/epoch - 87ms/step\n",
      "Epoch 260/400\n",
      "1/1 - 0s - loss: 0.0730 - val_loss: 0.0648 - 88ms/epoch - 88ms/step\n",
      "Epoch 261/400\n",
      "1/1 - 0s - loss: 0.0729 - val_loss: 0.0648 - 98ms/epoch - 98ms/step\n",
      "Epoch 262/400\n",
      "1/1 - 0s - loss: 0.0729 - val_loss: 0.0647 - 85ms/epoch - 85ms/step\n",
      "Epoch 263/400\n",
      "1/1 - 0s - loss: 0.0728 - val_loss: 0.0647 - 103ms/epoch - 103ms/step\n",
      "Epoch 264/400\n",
      "1/1 - 0s - loss: 0.0728 - val_loss: 0.0647 - 102ms/epoch - 102ms/step\n",
      "Epoch 265/400\n",
      "1/1 - 0s - loss: 0.0728 - val_loss: 0.0646 - 89ms/epoch - 89ms/step\n",
      "Epoch 266/400\n",
      "1/1 - 0s - loss: 0.0727 - val_loss: 0.0646 - 95ms/epoch - 95ms/step\n",
      "Epoch 267/400\n",
      "1/1 - 0s - loss: 0.0727 - val_loss: 0.0646 - 93ms/epoch - 93ms/step\n",
      "Epoch 268/400\n",
      "1/1 - 0s - loss: 0.0726 - val_loss: 0.0645 - 92ms/epoch - 92ms/step\n",
      "Epoch 269/400\n",
      "1/1 - 0s - loss: 0.0726 - val_loss: 0.0645 - 97ms/epoch - 97ms/step\n",
      "Epoch 270/400\n",
      "1/1 - 0s - loss: 0.0725 - val_loss: 0.0645 - 92ms/epoch - 92ms/step\n",
      "Epoch 271/400\n",
      "1/1 - 0s - loss: 0.0725 - val_loss: 0.0644 - 116ms/epoch - 116ms/step\n",
      "Epoch 272/400\n",
      "1/1 - 0s - loss: 0.0724 - val_loss: 0.0644 - 104ms/epoch - 104ms/step\n",
      "Epoch 273/400\n",
      "1/1 - 0s - loss: 0.0724 - val_loss: 0.0644 - 95ms/epoch - 95ms/step\n",
      "Epoch 274/400\n",
      "1/1 - 0s - loss: 0.0723 - val_loss: 0.0643 - 98ms/epoch - 98ms/step\n",
      "Epoch 275/400\n",
      "1/1 - 0s - loss: 0.0723 - val_loss: 0.0643 - 105ms/epoch - 105ms/step\n",
      "Epoch 276/400\n",
      "1/1 - 0s - loss: 0.0723 - val_loss: 0.0643 - 80ms/epoch - 80ms/step\n",
      "Epoch 277/400\n",
      "1/1 - 0s - loss: 0.0722 - val_loss: 0.0642 - 90ms/epoch - 90ms/step\n",
      "Epoch 278/400\n",
      "1/1 - 0s - loss: 0.0722 - val_loss: 0.0642 - 95ms/epoch - 95ms/step\n",
      "Epoch 279/400\n",
      "1/1 - 0s - loss: 0.0721 - val_loss: 0.0642 - 91ms/epoch - 91ms/step\n",
      "Epoch 280/400\n",
      "1/1 - 0s - loss: 0.0721 - val_loss: 0.0642 - 87ms/epoch - 87ms/step\n",
      "Epoch 281/400\n",
      "1/1 - 0s - loss: 0.0721 - val_loss: 0.0641 - 85ms/epoch - 85ms/step\n",
      "Epoch 282/400\n",
      "1/1 - 0s - loss: 0.0720 - val_loss: 0.0641 - 85ms/epoch - 85ms/step\n",
      "Epoch 283/400\n",
      "1/1 - 0s - loss: 0.0720 - val_loss: 0.0641 - 92ms/epoch - 92ms/step\n",
      "Epoch 284/400\n",
      "1/1 - 0s - loss: 0.0719 - val_loss: 0.0640 - 93ms/epoch - 93ms/step\n",
      "Epoch 285/400\n",
      "1/1 - 0s - loss: 0.0719 - val_loss: 0.0640 - 103ms/epoch - 103ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 286/400\n",
      "1/1 - 0s - loss: 0.0719 - val_loss: 0.0640 - 102ms/epoch - 102ms/step\n",
      "Epoch 287/400\n",
      "1/1 - 0s - loss: 0.0718 - val_loss: 0.0640 - 86ms/epoch - 86ms/step\n",
      "Epoch 288/400\n",
      "1/1 - 0s - loss: 0.0718 - val_loss: 0.0639 - 91ms/epoch - 91ms/step\n",
      "Epoch 289/400\n",
      "1/1 - 0s - loss: 0.0717 - val_loss: 0.0639 - 96ms/epoch - 96ms/step\n",
      "Epoch 290/400\n",
      "1/1 - 0s - loss: 0.0717 - val_loss: 0.0639 - 88ms/epoch - 88ms/step\n",
      "Epoch 291/400\n",
      "1/1 - 0s - loss: 0.0717 - val_loss: 0.0639 - 96ms/epoch - 96ms/step\n",
      "Epoch 292/400\n",
      "1/1 - 0s - loss: 0.0716 - val_loss: 0.0638 - 92ms/epoch - 92ms/step\n",
      "Epoch 293/400\n",
      "1/1 - 0s - loss: 0.0716 - val_loss: 0.0638 - 84ms/epoch - 84ms/step\n",
      "Epoch 294/400\n",
      "1/1 - 0s - loss: 0.0716 - val_loss: 0.0638 - 92ms/epoch - 92ms/step\n",
      "Epoch 295/400\n",
      "1/1 - 0s - loss: 0.0715 - val_loss: 0.0638 - 82ms/epoch - 82ms/step\n",
      "Epoch 296/400\n",
      "1/1 - 0s - loss: 0.0715 - val_loss: 0.0638 - 100ms/epoch - 100ms/step\n",
      "Epoch 297/400\n",
      "1/1 - 0s - loss: 0.0715 - val_loss: 0.0637 - 124ms/epoch - 124ms/step\n",
      "Epoch 298/400\n",
      "1/1 - 0s - loss: 0.0714 - val_loss: 0.0637 - 92ms/epoch - 92ms/step\n",
      "Epoch 299/400\n",
      "1/1 - 0s - loss: 0.0714 - val_loss: 0.0637 - 83ms/epoch - 83ms/step\n",
      "Epoch 300/400\n",
      "1/1 - 0s - loss: 0.0714 - val_loss: 0.0637 - 99ms/epoch - 99ms/step\n",
      "Epoch 301/400\n",
      "1/1 - 0s - loss: 0.0713 - val_loss: 0.0637 - 100ms/epoch - 100ms/step\n",
      "Epoch 302/400\n",
      "1/1 - 0s - loss: 0.0713 - val_loss: 0.0636 - 94ms/epoch - 94ms/step\n",
      "Epoch 303/400\n",
      "1/1 - 0s - loss: 0.0713 - val_loss: 0.0636 - 106ms/epoch - 106ms/step\n",
      "Epoch 304/400\n",
      "1/1 - 0s - loss: 0.0712 - val_loss: 0.0636 - 88ms/epoch - 88ms/step\n",
      "Epoch 305/400\n",
      "1/1 - 0s - loss: 0.0712 - val_loss: 0.0636 - 110ms/epoch - 110ms/step\n",
      "Epoch 306/400\n",
      "1/1 - 0s - loss: 0.0712 - val_loss: 0.0636 - 90ms/epoch - 90ms/step\n",
      "Epoch 307/400\n",
      "1/1 - 0s - loss: 0.0712 - val_loss: 0.0635 - 91ms/epoch - 91ms/step\n",
      "Epoch 308/400\n",
      "1/1 - 0s - loss: 0.0711 - val_loss: 0.0635 - 105ms/epoch - 105ms/step\n",
      "Epoch 309/400\n",
      "1/1 - 0s - loss: 0.0711 - val_loss: 0.0635 - 99ms/epoch - 99ms/step\n",
      "Epoch 310/400\n",
      "1/1 - 0s - loss: 0.0711 - val_loss: 0.0635 - 97ms/epoch - 97ms/step\n",
      "Epoch 311/400\n",
      "1/1 - 0s - loss: 0.0710 - val_loss: 0.0635 - 75ms/epoch - 75ms/step\n",
      "Epoch 312/400\n",
      "1/1 - 0s - loss: 0.0710 - val_loss: 0.0634 - 91ms/epoch - 91ms/step\n",
      "Epoch 313/400\n",
      "1/1 - 0s - loss: 0.0710 - val_loss: 0.0634 - 95ms/epoch - 95ms/step\n",
      "Epoch 314/400\n",
      "1/1 - 0s - loss: 0.0710 - val_loss: 0.0634 - 92ms/epoch - 92ms/step\n",
      "Epoch 315/400\n",
      "1/1 - 0s - loss: 0.0709 - val_loss: 0.0634 - 100ms/epoch - 100ms/step\n",
      "Epoch 316/400\n",
      "1/1 - 0s - loss: 0.0709 - val_loss: 0.0634 - 92ms/epoch - 92ms/step\n",
      "Epoch 317/400\n",
      "1/1 - 0s - loss: 0.0709 - val_loss: 0.0634 - 96ms/epoch - 96ms/step\n",
      "Epoch 318/400\n",
      "1/1 - 0s - loss: 0.0708 - val_loss: 0.0633 - 97ms/epoch - 97ms/step\n",
      "Epoch 319/400\n",
      "1/1 - 0s - loss: 0.0708 - val_loss: 0.0633 - 107ms/epoch - 107ms/step\n",
      "Epoch 320/400\n",
      "1/1 - 0s - loss: 0.0708 - val_loss: 0.0633 - 91ms/epoch - 91ms/step\n",
      "Epoch 321/400\n",
      "1/1 - 0s - loss: 0.0708 - val_loss: 0.0633 - 79ms/epoch - 79ms/step\n",
      "Epoch 322/400\n",
      "1/1 - 0s - loss: 0.0707 - val_loss: 0.0633 - 82ms/epoch - 82ms/step\n",
      "Epoch 323/400\n",
      "1/1 - 0s - loss: 0.0707 - val_loss: 0.0633 - 91ms/epoch - 91ms/step\n",
      "Epoch 324/400\n",
      "1/1 - 0s - loss: 0.0707 - val_loss: 0.0633 - 100ms/epoch - 100ms/step\n",
      "Epoch 325/400\n",
      "1/1 - 0s - loss: 0.0707 - val_loss: 0.0632 - 97ms/epoch - 97ms/step\n",
      "Epoch 326/400\n",
      "1/1 - 0s - loss: 0.0706 - val_loss: 0.0632 - 103ms/epoch - 103ms/step\n",
      "Epoch 327/400\n",
      "1/1 - 0s - loss: 0.0706 - val_loss: 0.0632 - 94ms/epoch - 94ms/step\n",
      "Epoch 328/400\n",
      "1/1 - 0s - loss: 0.0706 - val_loss: 0.0632 - 91ms/epoch - 91ms/step\n",
      "Epoch 329/400\n",
      "1/1 - 0s - loss: 0.0706 - val_loss: 0.0632 - 99ms/epoch - 99ms/step\n",
      "Epoch 330/400\n",
      "1/1 - 0s - loss: 0.0706 - val_loss: 0.0632 - 90ms/epoch - 90ms/step\n",
      "Epoch 331/400\n",
      "1/1 - 0s - loss: 0.0705 - val_loss: 0.0632 - 87ms/epoch - 87ms/step\n",
      "Epoch 332/400\n",
      "1/1 - 0s - loss: 0.0705 - val_loss: 0.0631 - 88ms/epoch - 88ms/step\n",
      "Epoch 333/400\n",
      "1/1 - 0s - loss: 0.0705 - val_loss: 0.0631 - 100ms/epoch - 100ms/step\n",
      "Epoch 334/400\n",
      "1/1 - 0s - loss: 0.0705 - val_loss: 0.0631 - 108ms/epoch - 108ms/step\n",
      "Epoch 335/400\n",
      "1/1 - 0s - loss: 0.0704 - val_loss: 0.0631 - 95ms/epoch - 95ms/step\n",
      "Epoch 336/400\n",
      "1/1 - 0s - loss: 0.0704 - val_loss: 0.0631 - 90ms/epoch - 90ms/step\n",
      "Epoch 337/400\n",
      "1/1 - 0s - loss: 0.0704 - val_loss: 0.0631 - 110ms/epoch - 110ms/step\n",
      "Epoch 338/400\n",
      "1/1 - 0s - loss: 0.0704 - val_loss: 0.0631 - 89ms/epoch - 89ms/step\n",
      "Epoch 339/400\n",
      "1/1 - 0s - loss: 0.0704 - val_loss: 0.0631 - 84ms/epoch - 84ms/step\n",
      "Epoch 340/400\n",
      "1/1 - 0s - loss: 0.0703 - val_loss: 0.0630 - 103ms/epoch - 103ms/step\n",
      "Epoch 341/400\n",
      "1/1 - 0s - loss: 0.0703 - val_loss: 0.0630 - 88ms/epoch - 88ms/step\n",
      "Epoch 342/400\n",
      "1/1 - 0s - loss: 0.0703 - val_loss: 0.0630 - 109ms/epoch - 109ms/step\n",
      "Epoch 343/400\n",
      "1/1 - 0s - loss: 0.0703 - val_loss: 0.0630 - 86ms/epoch - 86ms/step\n",
      "Epoch 344/400\n",
      "1/1 - 0s - loss: 0.0703 - val_loss: 0.0630 - 102ms/epoch - 102ms/step\n",
      "Epoch 345/400\n",
      "1/1 - 0s - loss: 0.0702 - val_loss: 0.0630 - 100ms/epoch - 100ms/step\n",
      "Epoch 346/400\n",
      "1/1 - 0s - loss: 0.0702 - val_loss: 0.0630 - 94ms/epoch - 94ms/step\n",
      "Epoch 347/400\n",
      "1/1 - 0s - loss: 0.0702 - val_loss: 0.0630 - 94ms/epoch - 94ms/step\n",
      "Epoch 348/400\n",
      "1/1 - 0s - loss: 0.0702 - val_loss: 0.0630 - 95ms/epoch - 95ms/step\n",
      "Epoch 349/400\n",
      "1/1 - 0s - loss: 0.0702 - val_loss: 0.0629 - 107ms/epoch - 107ms/step\n",
      "Epoch 350/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 93ms/epoch - 93ms/step\n",
      "Epoch 351/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 94ms/epoch - 94ms/step\n",
      "Epoch 352/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 92ms/epoch - 92ms/step\n",
      "Epoch 353/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 125ms/epoch - 125ms/step\n",
      "Epoch 354/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 95ms/epoch - 95ms/step\n",
      "Epoch 355/400\n",
      "1/1 - 0s - loss: 0.0701 - val_loss: 0.0629 - 96ms/epoch - 96ms/step\n",
      "Epoch 356/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0629 - 88ms/epoch - 88ms/step\n",
      "Epoch 357/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0629 - 86ms/epoch - 86ms/step\n",
      "Epoch 358/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0629 - 82ms/epoch - 82ms/step\n",
      "Epoch 359/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0629 - 79ms/epoch - 79ms/step\n",
      "Epoch 360/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0628 - 90ms/epoch - 90ms/step\n",
      "Epoch 361/400\n",
      "1/1 - 0s - loss: 0.0700 - val_loss: 0.0628 - 103ms/epoch - 103ms/step\n",
      "Epoch 362/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 100ms/epoch - 100ms/step\n",
      "Epoch 363/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 93ms/epoch - 93ms/step\n",
      "Epoch 364/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 121ms/epoch - 121ms/step\n",
      "Epoch 365/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 91ms/epoch - 91ms/step\n",
      "Epoch 366/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 89ms/epoch - 89ms/step\n",
      "Epoch 367/400\n",
      "1/1 - 0s - loss: 0.0699 - val_loss: 0.0628 - 81ms/epoch - 81ms/step\n",
      "Epoch 368/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 95ms/epoch - 95ms/step\n",
      "Epoch 369/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 89ms/epoch - 89ms/step\n",
      "Epoch 370/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 92ms/epoch - 92ms/step\n",
      "Epoch 371/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 89ms/epoch - 89ms/step\n",
      "Epoch 372/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 92ms/epoch - 92ms/step\n",
      "Epoch 373/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0628 - 122ms/epoch - 122ms/step\n",
      "Epoch 374/400\n",
      "1/1 - 0s - loss: 0.0698 - val_loss: 0.0627 - 90ms/epoch - 90ms/step\n",
      "Epoch 375/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 102ms/epoch - 102ms/step\n",
      "Epoch 376/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 83ms/epoch - 83ms/step\n",
      "Epoch 377/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 88ms/epoch - 88ms/step\n",
      "Epoch 378/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 85ms/epoch - 85ms/step\n",
      "Epoch 379/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 72ms/epoch - 72ms/step\n",
      "Epoch 380/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 86ms/epoch - 86ms/step\n",
      "Epoch 381/400\n",
      "1/1 - 0s - loss: 0.0697 - val_loss: 0.0627 - 96ms/epoch - 96ms/step\n",
      "Epoch 382/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 95ms/epoch - 95ms/step\n",
      "Epoch 383/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 82ms/epoch - 82ms/step\n",
      "Epoch 384/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 98ms/epoch - 98ms/step\n",
      "Epoch 385/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 87ms/epoch - 87ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 386/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 96ms/epoch - 96ms/step\n",
      "Epoch 387/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 100ms/epoch - 100ms/step\n",
      "Epoch 388/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 93ms/epoch - 93ms/step\n",
      "Epoch 389/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 104ms/epoch - 104ms/step\n",
      "Epoch 390/400\n",
      "1/1 - 0s - loss: 0.0696 - val_loss: 0.0627 - 93ms/epoch - 93ms/step\n",
      "Epoch 391/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 78ms/epoch - 78ms/step\n",
      "Epoch 392/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 102ms/epoch - 102ms/step\n",
      "Epoch 393/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 99ms/epoch - 99ms/step\n",
      "Epoch 394/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 95ms/epoch - 95ms/step\n",
      "Epoch 395/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 93ms/epoch - 93ms/step\n",
      "Epoch 396/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 94ms/epoch - 94ms/step\n",
      "Epoch 397/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 106ms/epoch - 106ms/step\n",
      "Epoch 398/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 100ms/epoch - 100ms/step\n",
      "Epoch 399/400\n",
      "1/1 - 0s - loss: 0.0695 - val_loss: 0.0626 - 82ms/epoch - 82ms/step\n",
      "Epoch 400/400\n",
      "1/1 - 0s - loss: 0.0694 - val_loss: 0.0626 - 87ms/epoch - 87ms/step\n"
     ]
    }
   ],
   "source": [
    "#LSTM Model Architecture\n",
    "model = Sequential()\n",
    "model.add(LSTM(10, input_shape=(X_train.shape[1],X_train.shape[2]),return_sequences=True))\n",
    "model.add(LSTM(7))\n",
    "model.add(RepeatVector(n_future))\n",
    "model.add(LSTM(7, return_sequences=True))\n",
    "model.add(LSTM(10, return_sequences=True))\n",
    "model.add(TimeDistributed(Dense(no_of_features)))\n",
    "\n",
    "#comiling the model with adam optimer and loss mean squared error\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "\n",
    "#printing summary of model\n",
    "model.summary()\n",
    "\n",
    "#Fitting the model\n",
    "fit_history1=model.fit(X_train,y_train,epochs=400,validation_split=0.33,batch_size=30,verbose=2,shuffle=False)\n",
    "\n",
    "#Saving the model\n",
    "model.save(\"aus(8step).h5\") # change here with number of step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "id": "n0QXzDIiaeWz"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x000001D996456C10> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
     ]
    }
   ],
   "source": [
    "#Predictions on testing set - Next forecast\n",
    "pred_aus=model.predict(X_test)\n",
    "\n",
    "#Inverse Scaling of the predicted values to get the real value from 0-1 range\n",
    "for index,i in enumerate(train_dataF.columns):\n",
    "    scaler = scalers['scaler_'+i]  \n",
    "    pred_aus[:,:,index]=scaler.inverse_transform(pred_aus[:,:,index])\n",
    "\n",
    "    y_train[:,:,index]=scaler.inverse_transform(y_train[:,:,index])\n",
    "    y_test[:,:,index]=scaler.inverse_transform(y_test[:,:,index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "id": "S0MrEtOybFGR"
   },
   "outputs": [],
   "source": [
    "#Taking inverse of difference as well\n",
    "pred_aus = [diff_inverse( pred_aus[i],  newdatay[i] ) for i in range(len(pred_aus))]\n",
    "pred_aus=np.array(pred_aus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 541
    },
    "id": "W7Mikc3vIH2o",
    "outputId": "ce26c586-8185-473e-e376-31ca4fa0e3b4"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "name": "Training Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.32481253147125244,
          0.32336699962615967,
          0.321901798248291,
          0.32041117548942566,
          0.31889212131500244,
          0.3173425495624542,
          0.3157603144645691,
          0.3141431510448456,
          0.3124886453151703,
          0.3107941746711731,
          0.3090570867061615,
          0.3072746992111206,
          0.30544406175613403,
          0.3035622537136078,
          0.3016261160373688,
          0.29963231086730957,
          0.2975773513317108,
          0.29545754194259644,
          0.2932690978050232,
          0.2910080552101135,
          0.28867045044898987,
          0.28625214099884033,
          0.2837490439414978,
          0.2811570167541504,
          0.27847209572792053,
          0.2756904363632202,
          0.272808313369751,
          0.26982247829437256,
          0.26673001050949097,
          0.2635285258293152,
          0.26021629571914673,
          0.25679248571395874,
          0.253257155418396,
          0.24961161613464355,
          0.24585849046707153,
          0.2420019805431366,
          0.23804804682731628,
          0.23400457203388214,
          0.22988158464431763,
          0.22569139301776886,
          0.2214486002922058,
          0.21717029809951782,
          0.21287591755390167,
          0.20858705043792725,
          0.2043272852897644,
          0.20012173056602478,
          0.19599643349647522,
          0.1919776201248169,
          0.18809092044830322,
          0.18436017632484436,
          0.1808062344789505,
          0.17744554579257965,
          0.17428861558437347,
          0.1713387370109558,
          0.16859090328216553,
          0.16603150963783264,
          0.16363930702209473,
          0.16138821840286255,
          0.15925048291683197,
          0.1571996659040451,
          0.15521258115768433,
          0.15327060222625732,
          0.15136009454727173,
          0.14947229623794556,
          0.14760281145572662,
          0.14575082063674927,
          0.1439182311296463,
          0.1421087682247162,
          0.14032721519470215,
          0.13857868313789368,
          0.1368681788444519,
          0.13520017266273499,
          0.13357825577259064,
          0.13200518488883972,
          0.13048267364501953,
          0.12901148200035095,
          0.1275915801525116,
          0.12622210383415222,
          0.1249016672372818,
          0.12362843006849289,
          0.12240026146173477,
          0.1212148442864418,
          0.12006981670856476,
          0.11896288394927979,
          0.1178918108344078,
          0.11685456335544586,
          0.11584927886724472,
          0.11487426608800888,
          0.11392805725336075,
          0.11300934851169586,
          0.11211700737476349,
          0.11125001311302185,
          0.1104075089097023,
          0.10958866775035858,
          0.10879276692867279,
          0.10801911354064941,
          0.10726700723171234,
          0.10653582215309143,
          0.10582490265369415,
          0.10513356328010559,
          0.1044611781835556,
          0.10380706191062927,
          0.10317055881023407,
          0.10255102068185806,
          0.10194779187440872,
          0.1013602465391159,
          0.10078777372837067,
          0.10022979974746704,
          0.09968573600053787,
          0.09915506839752197,
          0.09863731265068054,
          0.09813197702169418,
          0.09763863682746887,
          0.09715689718723297,
          0.09668634831905365,
          0.09622663259506226,
          0.09577742218971252,
          0.09533838927745819,
          0.09490921348333359,
          0.09448961913585663,
          0.09407930821180344,
          0.09367801249027252,
          0.0932854637503624,
          0.09290140122175217,
          0.09252558648586273,
          0.092157743871212,
          0.09179766476154327,
          0.09144511818885803,
          0.09109988808631897,
          0.09076172113418579,
          0.09043046087026596,
          0.09010587632656097,
          0.08978778123855591,
          0.08947601169347763,
          0.08917036652565002,
          0.08887070417404175,
          0.08857684582471848,
          0.08828864246606827,
          0.08800595253705978,
          0.08772863447666168,
          0.08745654672384262,
          0.08718955516815186,
          0.08692754805088043,
          0.0866703987121582,
          0.08641797304153442,
          0.08617018163204193,
          0.08592689037322998,
          0.08568800985813141,
          0.08545342087745667,
          0.08522301912307739,
          0.08499672263860703,
          0.08477441966533661,
          0.08455601334571838,
          0.08434142172336578,
          0.08413055539131165,
          0.08392331749200821,
          0.0837196335196495,
          0.08351941406726837,
          0.08332259207963943,
          0.08312907814979553,
          0.0829387977719307,
          0.08275168389081955,
          0.08256766200065613,
          0.08238665759563446,
          0.08220861852169037,
          0.08203346282243729,
          0.08186113834381104,
          0.08169157058000565,
          0.08152469992637634,
          0.08136048167943954,
          0.08119885623455048,
          0.08103975653648376,
          0.08088312298059464,
          0.0807289183139801,
          0.08057709038257599,
          0.08042757213115692,
          0.08028033375740051,
          0.08013533055782318,
          0.07999249547719955,
          0.07985179126262665,
          0.07971317321062088,
          0.07957661151885986,
          0.07944205403327942,
          0.07930944859981537,
          0.07917878031730652,
          0.07905000448226929,
          0.07892307639122009,
          0.07879795134067535,
          0.07867462188005447,
          0.07855302095413208,
          0.07843314111232758,
          0.07831493765115738,
          0.0781983733177185,
          0.07808342576026917,
          0.07797007262706757,
          0.07785826176404953,
          0.07774798572063446,
          0.07763919979333878,
          0.07753188908100128,
          0.077426016330719,
          0.07732157409191132,
          0.07721851021051407,
          0.07711681723594666,
          0.07701647281646729,
          0.07691743969917297,
          0.07681971788406372,
          0.07672325521707535,
          0.07662804424762726,
          0.07653407007455826,
          0.07644130289554596,
          0.07634973526000977,
          0.07625932991504669,
          0.07617007195949554,
          0.07608195394277573,
          0.07599493861198425,
          0.07590902596712112,
          0.07582418620586395,
          0.07574041187763214,
          0.0756576731801033,
          0.07557596266269684,
          0.07549525797367096,
          0.07541555911302567,
          0.07533683627843857,
          0.07525907456874847,
          0.07518226653337479,
          0.07510638236999512,
          0.07503142952919006,
          0.07495738565921783,
          0.07488422840833664,
          0.07481196522712708,
          0.07474055886268616,
          0.07467000186443329,
          0.07460029423236847,
          0.07453141361474991,
          0.0744633600115776,
          0.07439611107110977,
          0.07432965189218521,
          0.07426398247480392,
          0.07419908046722412,
          0.0741349458694458,
          0.07407155632972717,
          0.07400892674922943,
          0.073947012424469,
          0.07388582825660706,
          0.07382535934448242,
          0.0737655833363533,
          0.0737065002322197,
          0.0736481100320816,
          0.07359039038419724,
          0.0735333263874054,
          0.07347693294286728,
          0.0734211876988411,
          0.07336607575416565,
          0.07331161201000214,
          0.07325775921344757,
          0.07320451736450195,
          0.07315189391374588,
          0.07309986650943756,
          0.0730484277009964,
          0.07299758493900299,
          0.07294732332229614,
          0.07289762794971466,
          0.07284848392009735,
          0.07279990613460541,
          0.07275188714265823,
          0.07270440459251404,
          0.07265745848417282,
          0.07261104881763458,
          0.07256515324115753,
          0.07251977920532227,
          0.07247492671012878,
          0.0724305659532547,
          0.0723867118358612,
          0.07234334200620651,
          0.07230046391487122,
          0.07225807011127472,
          0.07221615314483643,
          0.07217471301555634,
          0.07213373482227325,
          0.07209320366382599,
          0.07205313444137573,
          0.07201351970434189,
          0.07197434455156326,
          0.07193560898303986,
          0.07189729809761047,
          0.07185942679643631,
          0.07182197272777557,
          0.07178494334220886,
          0.07174832373857498,
          0.07171211391687393,
          0.07167631387710571,
          0.07164090871810913,
          0.07160589098930359,
          0.07157127559185028,
          0.07153704017400742,
          0.07150319218635559,
          0.07146972417831421,
          0.07143662124872208,
          0.07140389084815979,
          0.07137152552604675,
          0.07133952528238297,
          0.07130786776542664,
          0.07127659022808075,
          0.07124564051628113,
          0.07121503353118896,
          0.07118478417396545,
          0.07115486264228821,
          0.07112527638673782,
          0.0710960179567337,
          0.07106709480285645,
          0.07103848457336426,
          0.07101019471883774,
          0.07098221778869629,
          0.07095456123352051,
          0.0709272027015686,
          0.07090016454458237,
          0.07087342441082001,
          0.07084697484970093,
          0.07082082331180573,
          0.0707949697971344,
          0.07076939940452576,
          0.0707441121339798,
          0.07071910798549652,
          0.07069438695907593,
          0.07066994905471802,
          0.070645771920681,
          0.07062187045812607,
          0.07059822976589203,
          0.07057486474514008,
          0.07055175304412842,
          0.07052890956401825,
          0.07050630450248718,
          0.0704839676618576,
          0.07046188414096832,
          0.07044003903865814,
          0.07041843980550766,
          0.07039707899093628,
          0.070375956594944,
          0.07035508006811142,
          0.07033443450927734,
          0.07031401991844177,
          0.07029382884502411,
          0.07027387619018555,
          0.0702541321516037,
          0.07023462653160095,
          0.07021532952785492,
          0.0701962411403656,
          0.07017738372087479,
          0.07015873491764069,
          0.0701402872800827,
          0.07012205570936203,
          0.07010402530431747,
          0.07008619606494904,
          0.07006856799125671,
          0.07005113363265991,
          0.07003391534090042,
          0.07001687586307526,
          0.07000003010034561,
          0.06998337805271149,
          0.06996690481901169,
          0.06995062530040741,
          0.06993452459573746,
          0.06991861015558243,
          0.06990286707878113,
          0.06988731026649475,
          0.0698719248175621,
          0.06985671818256378,
          0.06984168291091919,
          0.06982681155204773,
          0.06981211155653,
          0.0697975754737854,
          0.06978321075439453,
          0.0697690024971962,
          0.069754958152771,
          0.06974107027053833,
          0.0697273463010788,
          0.0697137713432312,
          0.06970034539699554,
          0.06968708336353302,
          0.06967397034168243,
          0.06966099888086319,
          0.06964817643165588,
          0.06963550299406052,
          0.06962297111749649,
          0.0696105808019638,
          0.06959833204746246,
          0.06958621740341187,
          0.0695742517709732,
          0.0695624127984047,
          0.06955072283744812,
          0.0695391446352005,
          0.06952771544456482,
          0.06951640546321869,
          0.0695052295923233,
          0.06949417293071747,
          0.06948325037956238,
          0.06947246193885803,
          0.06946177780628204,
          0.0694512277841568,
          0.0694407969713211
         ],
         "yaxis": "y"
        },
        {
         "name": "Validation Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.3181358575820923,
          0.3166464567184448,
          0.3151305913925171,
          0.31358474493026733,
          0.31200653314590454,
          0.31039363145828247,
          0.30874350666999817,
          0.30705350637435913,
          0.30532073974609375,
          0.3035423159599304,
          0.3017151355743408,
          0.29983606934547424,
          0.29790180921554565,
          0.29590892791748047,
          0.2938537001609802,
          0.2917323112487793,
          0.28954076766967773,
          0.28727489709854126,
          0.28493034839630127,
          0.28250277042388916,
          0.27998781204223633,
          0.277381032705307,
          0.2746780514717102,
          0.27187466621398926,
          0.268966943025589,
          0.26595109701156616,
          0.2628238797187805,
          0.2595824599266052,
          0.25622475147247314,
          0.25274935364723206,
          0.24915584921836853,
          0.24544495344161987,
          0.24161875247955322,
          0.23768076300621033,
          0.23363631963729858,
          0.22949263453483582,
          0.22525915503501892,
          0.2209475338459015,
          0.21657192707061768,
          0.21214911341667175,
          0.20769831538200378,
          0.20324131846427917,
          0.198802188038826,
          0.19440695643424988,
          0.1900830864906311,
          0.1858588457107544,
          0.1817624866962433,
          0.17782117426395416,
          0.17405979335308075,
          0.17049959301948547,
          0.1671564280986786,
          0.16403928399085999,
          0.16114871203899384,
          0.15847575664520264,
          0.15600177645683289,
          0.15369988977909088,
          0.1515381634235382,
          0.1494835615158081,
          0.14750516414642334,
          0.1455765664577484,
          0.1436769962310791,
          0.14179188013076782,
          0.13991248607635498,
          0.13803523778915405,
          0.1361607164144516,
          0.1342926323413849,
          0.13243675231933594,
          0.1305999606847763,
          0.128789484500885,
          0.12701231241226196,
          0.12527471780776978,
          0.12358196824789047,
          0.12193819880485535,
          0.12034633010625839,
          0.11880812048912048,
          0.11732426285743713,
          0.11589454114437103,
          0.11451795697212219,
          0.11319297552108765,
          0.11191759258508682,
          0.11068958044052124,
          0.10950654745101929,
          0.10836610198020935,
          0.10726587474346161,
          0.10620366036891937,
          0.10517735779285431,
          0.104185089468956,
          0.10322511196136475,
          0.1022959053516388,
          0.10139606148004532,
          0.10052435100078583,
          0.0996796190738678,
          0.09886083006858826,
          0.0980670228600502,
          0.09729728102684021,
          0.09655071794986725,
          0.09582647681236267,
          0.09512372314929962,
          0.09444162249565125,
          0.09377936273813248,
          0.09313616156578064,
          0.09251121431589127,
          0.09190377593040466,
          0.09131309390068054,
          0.09073847532272339,
          0.09017923474311829,
          0.08963476121425629,
          0.08910444378852844,
          0.08858772367238998,
          0.08808411657810211,
          0.08759311586618423,
          0.08711430430412292,
          0.08664727210998535,
          0.08619163185358047,
          0.08574706315994263,
          0.08531319350004196,
          0.08488974720239639,
          0.08447639644145966,
          0.08407288789749146,
          0.08367890119552612,
          0.08329421281814575,
          0.08291852474212646,
          0.08255157619714737,
          0.08219312876462936,
          0.08184292167425156,
          0.08150070905685425,
          0.08116624504327774,
          0.08083930611610413,
          0.08051963895559311,
          0.08020703494548798,
          0.07990127801895142,
          0.07960216701030731,
          0.07930947840213776,
          0.07902303338050842,
          0.07874264568090439,
          0.07846812903881073,
          0.07819931209087372,
          0.07793605327606201,
          0.07767817378044128,
          0.0774255096912384,
          0.07717794924974442,
          0.07693535089492798,
          0.07669755816459656,
          0.0764644518494606,
          0.07623592019081116,
          0.07601182907819748,
          0.07579207420349121,
          0.0755765438079834,
          0.07536512613296509,
          0.07515772432088852,
          0.07495422661304474,
          0.07475455105304718,
          0.07455860078334808,
          0.07436627149581909,
          0.07417748868465424,
          0.07399217784404755,
          0.07381024211645126,
          0.07363159954547882,
          0.07345618307590485,
          0.07328391075134277,
          0.07311470806598663,
          0.07294851541519165,
          0.07278524339199066,
          0.07262485474348068,
          0.07246726751327515,
          0.07231240719556808,
          0.07216023653745651,
          0.07201067358255386,
          0.07186367362737656,
          0.07171916961669922,
          0.07157711684703827,
          0.07143746316432953,
          0.07130014151334763,
          0.07116510719060898,
          0.07103231549263,
          0.07090172171592712,
          0.07077327370643616,
          0.07064692676067352,
          0.07052263617515564,
          0.07040037214756012,
          0.07028007507324219,
          0.07016173005104065,
          0.07004527002573013,
          0.06993067264556885,
          0.069817915558815,
          0.06970694661140442,
          0.06959772109985352,
          0.0694902241230011,
          0.06938442587852478,
          0.06928028911352158,
          0.0691777765750885,
          0.06907686591148376,
          0.06897751986980438,
          0.06887972354888916,
          0.06878343969583511,
          0.06868863105773926,
          0.068595290184021,
          0.06850337982177734,
          0.0684128850698471,
          0.0683237612247467,
          0.06823599338531494,
          0.06814956665039062,
          0.06806443631649017,
          0.06798059493303299,
          0.06789801269769669,
          0.06781667470932007,
          0.06773655116558075,
          0.06765762716531754,
          0.06757988035678864,
          0.06750328838825226,
          0.06742782145738602,
          0.06735347956418991,
          0.06728023290634155,
          0.06720805913209915,
          0.06713694334030151,
          0.06706687808036804,
          0.06699782609939575,
          0.06692979484796524,
          0.06686273962259293,
          0.0667966678738594,
          0.06673155725002289,
          0.06666737794876099,
          0.0666041374206543,
          0.06654179096221924,
          0.0664803683757782,
          0.066419817507267,
          0.06636013835668564,
          0.06630130857229233,
          0.06624332815408707,
          0.06618617475032806,
          0.06612984091043472,
          0.06607431173324585,
          0.06601956486701965,
          0.06596561521291733,
          0.06591241806745529,
          0.06585998833179474,
          0.06580829620361328,
          0.06575733423233032,
          0.06570709496736526,
          0.06565757095813751,
          0.06560873985290527,
          0.06556060165166855,
          0.06551314890384674,
          0.06546636670827866,
          0.0654202327132225,
          0.06537475436925888,
          0.06532991677522659,
          0.06528571248054504,
          0.06524212658405304,
          0.06519915163516998,
          0.06515678018331528,
          0.06511501222848892,
          0.06507381796836853,
          0.0650332123041153,
          0.06499317288398743,
          0.06495369970798492,
          0.0649147778749466,
          0.06487639993429184,
          0.06483856588602066,
          0.06480126082897186,
          0.06476448476314545,
          0.06472821533679962,
          0.06469246000051498,
          0.06465721130371094,
          0.06462245434522629,
          0.06458818912506104,
          0.06455440819263458,
          0.06452109664678574,
          0.06448826193809509,
          0.06445588171482086,
          0.06442396342754364,
          0.06439249962568283,
          0.06436147540807724,
          0.06433089077472687,
          0.06430073827505112,
          0.06427101045846939,
          0.06424170732498169,
          0.06421282142400742,
          0.06418434530496597,
          0.06415626406669617,
          0.06412859261035919,
          0.06410130858421326,
          0.06407441198825836,
          0.0640479028224945,
          0.0640217661857605,
          0.06399600207805634,
          0.06397061049938202,
          0.06394558399915695,
          0.06392091512680054,
          0.06389659643173218,
          0.06387262791395187,
          0.06384900212287903,
          0.06382571160793304,
          0.06380276381969452,
          0.06378014385700226,
          0.06375785171985626,
          0.06373587995767593,
          0.06371422111988068,
          0.06369289010763168,
          0.06367184966802597,
          0.06365112960338593,
          0.06363070011138916,
          0.06361056864261627,
          0.06359074264764786,
          0.06357119977474213,
          0.06355194002389908,
          0.06353296339511871,
          0.06351426243782043,
          0.06349583715200424,
          0.06347768008708954,
          0.06345979869365692,
          0.0634421706199646,
          0.06342481076717377,
          0.06340770423412323,
          0.06339085102081299,
          0.06337425112724304,
          0.0633578971028328,
          0.06334178149700165,
          0.0633259117603302,
          0.06331028044223785,
          0.06329488009214401,
          0.06327970325946808,
          0.06326476484537125,
          0.06325004994869232,
          0.0632355585694313,
          0.063221275806427,
          0.0632072240114212,
          0.06319337338209152,
          0.06317973881959915,
          0.0631663054227829,
          0.06315308809280396,
          0.06314006447792053,
          0.06312724202871323,
          0.06311462074518204,
          0.06310218572616577,
          0.06308995187282562,
          0.0630778968334198,
          0.0630660355091095,
          0.06305436044931412,
          0.06304286420345306,
          0.06303153932094574,
          0.06302039325237274,
          0.06300944089889526,
          0.06299863755702972,
          0.06298802047967911,
          0.06297756731510162,
          0.06296727061271667,
          0.06295714527368546,
          0.06294716894626617,
          0.06293737143278122,
          0.0629277229309082,
          0.06291822344064713,
          0.06290888786315918,
          0.06289969384670258,
          0.06289064884185791,
          0.06288175284862518,
          0.0628729984164238,
          0.06286439299583435,
          0.06285592913627625,
          0.06284759938716888,
          0.06283940374851227,
          0.062831349670887,
          0.06282342225313187,
          0.06281562894582748,
          0.06280796974897385,
          0.06280043721199036,
          0.06279303133487701,
          0.06278574466705322,
          0.06277858465909958,
          0.06277154386043549,
          0.06276463717222214,
          0.06275783479213715,
          0.06275114417076111,
          0.06274458020925522,
          0.06273812055587769,
          0.0627317801117897,
          0.06272554397583008,
          0.0627194195985794,
          0.06271340698003769,
          0.06270749121904373,
          0.06270168721675873,
          0.06269598007202148,
          0.0626903846859932,
          0.06268487870693207,
          0.0626794770359993,
          0.06267417222261429,
          0.06266896426677704,
          0.06266384571790695,
          0.06265882402658463,
          0.06265389919281006,
          0.06264906376600266,
          0.06264430284500122,
          0.06263965368270874,
          0.06263507902622223,
          0.06263059377670288,
          0.0626261904835701,
          0.06262186914682388,
          0.06261763721704483,
          0.06261347979307175,
          0.06260940432548523
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Training and Validation Loss"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "Epochs"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>Training Loss</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>Validation Loss</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"1e83b570-ec98-482e-9d8e-0f350514a1a4\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1e83b570-ec98-482e-9d8e-0f350514a1a4\")) {                    Plotly.newPlot(                        \"1e83b570-ec98-482e-9d8e-0f350514a1a4\",                        [{\"name\":\"Training Loss\",\"y\":[0.32481253147125244,0.32336699962615967,0.321901798248291,0.32041117548942566,0.31889212131500244,0.3173425495624542,0.3157603144645691,0.3141431510448456,0.3124886453151703,0.3107941746711731,0.3090570867061615,0.3072746992111206,0.30544406175613403,0.3035622537136078,0.3016261160373688,0.29963231086730957,0.2975773513317108,0.29545754194259644,0.2932690978050232,0.2910080552101135,0.28867045044898987,0.28625214099884033,0.2837490439414978,0.2811570167541504,0.27847209572792053,0.2756904363632202,0.272808313369751,0.26982247829437256,0.26673001050949097,0.2635285258293152,0.26021629571914673,0.25679248571395874,0.253257155418396,0.24961161613464355,0.24585849046707153,0.2420019805431366,0.23804804682731628,0.23400457203388214,0.22988158464431763,0.22569139301776886,0.2214486002922058,0.21717029809951782,0.21287591755390167,0.20858705043792725,0.2043272852897644,0.20012173056602478,0.19599643349647522,0.1919776201248169,0.18809092044830322,0.18436017632484436,0.1808062344789505,0.17744554579257965,0.17428861558437347,0.1713387370109558,0.16859090328216553,0.16603150963783264,0.16363930702209473,0.16138821840286255,0.15925048291683197,0.1571996659040451,0.15521258115768433,0.15327060222625732,0.15136009454727173,0.14947229623794556,0.14760281145572662,0.14575082063674927,0.1439182311296463,0.1421087682247162,0.14032721519470215,0.13857868313789368,0.1368681788444519,0.13520017266273499,0.13357825577259064,0.13200518488883972,0.13048267364501953,0.12901148200035095,0.1275915801525116,0.12622210383415222,0.1249016672372818,0.12362843006849289,0.12240026146173477,0.1212148442864418,0.12006981670856476,0.11896288394927979,0.1178918108344078,0.11685456335544586,0.11584927886724472,0.11487426608800888,0.11392805725336075,0.11300934851169586,0.11211700737476349,0.11125001311302185,0.1104075089097023,0.10958866775035858,0.10879276692867279,0.10801911354064941,0.10726700723171234,0.10653582215309143,0.10582490265369415,0.10513356328010559,0.1044611781835556,0.10380706191062927,0.10317055881023407,0.10255102068185806,0.10194779187440872,0.1013602465391159,0.10078777372837067,0.10022979974746704,0.09968573600053787,0.09915506839752197,0.09863731265068054,0.09813197702169418,0.09763863682746887,0.09715689718723297,0.09668634831905365,0.09622663259506226,0.09577742218971252,0.09533838927745819,0.09490921348333359,0.09448961913585663,0.09407930821180344,0.09367801249027252,0.0932854637503624,0.09290140122175217,0.09252558648586273,0.092157743871212,0.09179766476154327,0.09144511818885803,0.09109988808631897,0.09076172113418579,0.09043046087026596,0.09010587632656097,0.08978778123855591,0.08947601169347763,0.08917036652565002,0.08887070417404175,0.08857684582471848,0.08828864246606827,0.08800595253705978,0.08772863447666168,0.08745654672384262,0.08718955516815186,0.08692754805088043,0.0866703987121582,0.08641797304153442,0.08617018163204193,0.08592689037322998,0.08568800985813141,0.08545342087745667,0.08522301912307739,0.08499672263860703,0.08477441966533661,0.08455601334571838,0.08434142172336578,0.08413055539131165,0.08392331749200821,0.0837196335196495,0.08351941406726837,0.08332259207963943,0.08312907814979553,0.0829387977719307,0.08275168389081955,0.08256766200065613,0.08238665759563446,0.08220861852169037,0.08203346282243729,0.08186113834381104,0.08169157058000565,0.08152469992637634,0.08136048167943954,0.08119885623455048,0.08103975653648376,0.08088312298059464,0.0807289183139801,0.08057709038257599,0.08042757213115692,0.08028033375740051,0.08013533055782318,0.07999249547719955,0.07985179126262665,0.07971317321062088,0.07957661151885986,0.07944205403327942,0.07930944859981537,0.07917878031730652,0.07905000448226929,0.07892307639122009,0.07879795134067535,0.07867462188005447,0.07855302095413208,0.07843314111232758,0.07831493765115738,0.0781983733177185,0.07808342576026917,0.07797007262706757,0.07785826176404953,0.07774798572063446,0.07763919979333878,0.07753188908100128,0.077426016330719,0.07732157409191132,0.07721851021051407,0.07711681723594666,0.07701647281646729,0.07691743969917297,0.07681971788406372,0.07672325521707535,0.07662804424762726,0.07653407007455826,0.07644130289554596,0.07634973526000977,0.07625932991504669,0.07617007195949554,0.07608195394277573,0.07599493861198425,0.07590902596712112,0.07582418620586395,0.07574041187763214,0.0756576731801033,0.07557596266269684,0.07549525797367096,0.07541555911302567,0.07533683627843857,0.07525907456874847,0.07518226653337479,0.07510638236999512,0.07503142952919006,0.07495738565921783,0.07488422840833664,0.07481196522712708,0.07474055886268616,0.07467000186443329,0.07460029423236847,0.07453141361474991,0.0744633600115776,0.07439611107110977,0.07432965189218521,0.07426398247480392,0.07419908046722412,0.0741349458694458,0.07407155632972717,0.07400892674922943,0.073947012424469,0.07388582825660706,0.07382535934448242,0.0737655833363533,0.0737065002322197,0.0736481100320816,0.07359039038419724,0.0735333263874054,0.07347693294286728,0.0734211876988411,0.07336607575416565,0.07331161201000214,0.07325775921344757,0.07320451736450195,0.07315189391374588,0.07309986650943756,0.0730484277009964,0.07299758493900299,0.07294732332229614,0.07289762794971466,0.07284848392009735,0.07279990613460541,0.07275188714265823,0.07270440459251404,0.07265745848417282,0.07261104881763458,0.07256515324115753,0.07251977920532227,0.07247492671012878,0.0724305659532547,0.0723867118358612,0.07234334200620651,0.07230046391487122,0.07225807011127472,0.07221615314483643,0.07217471301555634,0.07213373482227325,0.07209320366382599,0.07205313444137573,0.07201351970434189,0.07197434455156326,0.07193560898303986,0.07189729809761047,0.07185942679643631,0.07182197272777557,0.07178494334220886,0.07174832373857498,0.07171211391687393,0.07167631387710571,0.07164090871810913,0.07160589098930359,0.07157127559185028,0.07153704017400742,0.07150319218635559,0.07146972417831421,0.07143662124872208,0.07140389084815979,0.07137152552604675,0.07133952528238297,0.07130786776542664,0.07127659022808075,0.07124564051628113,0.07121503353118896,0.07118478417396545,0.07115486264228821,0.07112527638673782,0.0710960179567337,0.07106709480285645,0.07103848457336426,0.07101019471883774,0.07098221778869629,0.07095456123352051,0.0709272027015686,0.07090016454458237,0.07087342441082001,0.07084697484970093,0.07082082331180573,0.0707949697971344,0.07076939940452576,0.0707441121339798,0.07071910798549652,0.07069438695907593,0.07066994905471802,0.070645771920681,0.07062187045812607,0.07059822976589203,0.07057486474514008,0.07055175304412842,0.07052890956401825,0.07050630450248718,0.0704839676618576,0.07046188414096832,0.07044003903865814,0.07041843980550766,0.07039707899093628,0.070375956594944,0.07035508006811142,0.07033443450927734,0.07031401991844177,0.07029382884502411,0.07027387619018555,0.0702541321516037,0.07023462653160095,0.07021532952785492,0.0701962411403656,0.07017738372087479,0.07015873491764069,0.0701402872800827,0.07012205570936203,0.07010402530431747,0.07008619606494904,0.07006856799125671,0.07005113363265991,0.07003391534090042,0.07001687586307526,0.07000003010034561,0.06998337805271149,0.06996690481901169,0.06995062530040741,0.06993452459573746,0.06991861015558243,0.06990286707878113,0.06988731026649475,0.0698719248175621,0.06985671818256378,0.06984168291091919,0.06982681155204773,0.06981211155653,0.0697975754737854,0.06978321075439453,0.0697690024971962,0.069754958152771,0.06974107027053833,0.0697273463010788,0.0697137713432312,0.06970034539699554,0.06968708336353302,0.06967397034168243,0.06966099888086319,0.06964817643165588,0.06963550299406052,0.06962297111749649,0.0696105808019638,0.06959833204746246,0.06958621740341187,0.0695742517709732,0.0695624127984047,0.06955072283744812,0.0695391446352005,0.06952771544456482,0.06951640546321869,0.0695052295923233,0.06949417293071747,0.06948325037956238,0.06947246193885803,0.06946177780628204,0.0694512277841568,0.0694407969713211],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"name\":\"Validation Loss\",\"y\":[0.3181358575820923,0.3166464567184448,0.3151305913925171,0.31358474493026733,0.31200653314590454,0.31039363145828247,0.30874350666999817,0.30705350637435913,0.30532073974609375,0.3035423159599304,0.3017151355743408,0.29983606934547424,0.29790180921554565,0.29590892791748047,0.2938537001609802,0.2917323112487793,0.28954076766967773,0.28727489709854126,0.28493034839630127,0.28250277042388916,0.27998781204223633,0.277381032705307,0.2746780514717102,0.27187466621398926,0.268966943025589,0.26595109701156616,0.2628238797187805,0.2595824599266052,0.25622475147247314,0.25274935364723206,0.24915584921836853,0.24544495344161987,0.24161875247955322,0.23768076300621033,0.23363631963729858,0.22949263453483582,0.22525915503501892,0.2209475338459015,0.21657192707061768,0.21214911341667175,0.20769831538200378,0.20324131846427917,0.198802188038826,0.19440695643424988,0.1900830864906311,0.1858588457107544,0.1817624866962433,0.17782117426395416,0.17405979335308075,0.17049959301948547,0.1671564280986786,0.16403928399085999,0.16114871203899384,0.15847575664520264,0.15600177645683289,0.15369988977909088,0.1515381634235382,0.1494835615158081,0.14750516414642334,0.1455765664577484,0.1436769962310791,0.14179188013076782,0.13991248607635498,0.13803523778915405,0.1361607164144516,0.1342926323413849,0.13243675231933594,0.1305999606847763,0.128789484500885,0.12701231241226196,0.12527471780776978,0.12358196824789047,0.12193819880485535,0.12034633010625839,0.11880812048912048,0.11732426285743713,0.11589454114437103,0.11451795697212219,0.11319297552108765,0.11191759258508682,0.11068958044052124,0.10950654745101929,0.10836610198020935,0.10726587474346161,0.10620366036891937,0.10517735779285431,0.104185089468956,0.10322511196136475,0.1022959053516388,0.10139606148004532,0.10052435100078583,0.0996796190738678,0.09886083006858826,0.0980670228600502,0.09729728102684021,0.09655071794986725,0.09582647681236267,0.09512372314929962,0.09444162249565125,0.09377936273813248,0.09313616156578064,0.09251121431589127,0.09190377593040466,0.09131309390068054,0.09073847532272339,0.09017923474311829,0.08963476121425629,0.08910444378852844,0.08858772367238998,0.08808411657810211,0.08759311586618423,0.08711430430412292,0.08664727210998535,0.08619163185358047,0.08574706315994263,0.08531319350004196,0.08488974720239639,0.08447639644145966,0.08407288789749146,0.08367890119552612,0.08329421281814575,0.08291852474212646,0.08255157619714737,0.08219312876462936,0.08184292167425156,0.08150070905685425,0.08116624504327774,0.08083930611610413,0.08051963895559311,0.08020703494548798,0.07990127801895142,0.07960216701030731,0.07930947840213776,0.07902303338050842,0.07874264568090439,0.07846812903881073,0.07819931209087372,0.07793605327606201,0.07767817378044128,0.0774255096912384,0.07717794924974442,0.07693535089492798,0.07669755816459656,0.0764644518494606,0.07623592019081116,0.07601182907819748,0.07579207420349121,0.0755765438079834,0.07536512613296509,0.07515772432088852,0.07495422661304474,0.07475455105304718,0.07455860078334808,0.07436627149581909,0.07417748868465424,0.07399217784404755,0.07381024211645126,0.07363159954547882,0.07345618307590485,0.07328391075134277,0.07311470806598663,0.07294851541519165,0.07278524339199066,0.07262485474348068,0.07246726751327515,0.07231240719556808,0.07216023653745651,0.07201067358255386,0.07186367362737656,0.07171916961669922,0.07157711684703827,0.07143746316432953,0.07130014151334763,0.07116510719060898,0.07103231549263,0.07090172171592712,0.07077327370643616,0.07064692676067352,0.07052263617515564,0.07040037214756012,0.07028007507324219,0.07016173005104065,0.07004527002573013,0.06993067264556885,0.069817915558815,0.06970694661140442,0.06959772109985352,0.0694902241230011,0.06938442587852478,0.06928028911352158,0.0691777765750885,0.06907686591148376,0.06897751986980438,0.06887972354888916,0.06878343969583511,0.06868863105773926,0.068595290184021,0.06850337982177734,0.0684128850698471,0.0683237612247467,0.06823599338531494,0.06814956665039062,0.06806443631649017,0.06798059493303299,0.06789801269769669,0.06781667470932007,0.06773655116558075,0.06765762716531754,0.06757988035678864,0.06750328838825226,0.06742782145738602,0.06735347956418991,0.06728023290634155,0.06720805913209915,0.06713694334030151,0.06706687808036804,0.06699782609939575,0.06692979484796524,0.06686273962259293,0.0667966678738594,0.06673155725002289,0.06666737794876099,0.0666041374206543,0.06654179096221924,0.0664803683757782,0.066419817507267,0.06636013835668564,0.06630130857229233,0.06624332815408707,0.06618617475032806,0.06612984091043472,0.06607431173324585,0.06601956486701965,0.06596561521291733,0.06591241806745529,0.06585998833179474,0.06580829620361328,0.06575733423233032,0.06570709496736526,0.06565757095813751,0.06560873985290527,0.06556060165166855,0.06551314890384674,0.06546636670827866,0.0654202327132225,0.06537475436925888,0.06532991677522659,0.06528571248054504,0.06524212658405304,0.06519915163516998,0.06515678018331528,0.06511501222848892,0.06507381796836853,0.0650332123041153,0.06499317288398743,0.06495369970798492,0.0649147778749466,0.06487639993429184,0.06483856588602066,0.06480126082897186,0.06476448476314545,0.06472821533679962,0.06469246000051498,0.06465721130371094,0.06462245434522629,0.06458818912506104,0.06455440819263458,0.06452109664678574,0.06448826193809509,0.06445588171482086,0.06442396342754364,0.06439249962568283,0.06436147540807724,0.06433089077472687,0.06430073827505112,0.06427101045846939,0.06424170732498169,0.06421282142400742,0.06418434530496597,0.06415626406669617,0.06412859261035919,0.06410130858421326,0.06407441198825836,0.0640479028224945,0.0640217661857605,0.06399600207805634,0.06397061049938202,0.06394558399915695,0.06392091512680054,0.06389659643173218,0.06387262791395187,0.06384900212287903,0.06382571160793304,0.06380276381969452,0.06378014385700226,0.06375785171985626,0.06373587995767593,0.06371422111988068,0.06369289010763168,0.06367184966802597,0.06365112960338593,0.06363070011138916,0.06361056864261627,0.06359074264764786,0.06357119977474213,0.06355194002389908,0.06353296339511871,0.06351426243782043,0.06349583715200424,0.06347768008708954,0.06345979869365692,0.0634421706199646,0.06342481076717377,0.06340770423412323,0.06339085102081299,0.06337425112724304,0.0633578971028328,0.06334178149700165,0.0633259117603302,0.06331028044223785,0.06329488009214401,0.06327970325946808,0.06326476484537125,0.06325004994869232,0.0632355585694313,0.063221275806427,0.0632072240114212,0.06319337338209152,0.06317973881959915,0.0631663054227829,0.06315308809280396,0.06314006447792053,0.06312724202871323,0.06311462074518204,0.06310218572616577,0.06308995187282562,0.0630778968334198,0.0630660355091095,0.06305436044931412,0.06304286420345306,0.06303153932094574,0.06302039325237274,0.06300944089889526,0.06299863755702972,0.06298802047967911,0.06297756731510162,0.06296727061271667,0.06295714527368546,0.06294716894626617,0.06293737143278122,0.0629277229309082,0.06291822344064713,0.06290888786315918,0.06289969384670258,0.06289064884185791,0.06288175284862518,0.0628729984164238,0.06286439299583435,0.06285592913627625,0.06284759938716888,0.06283940374851227,0.062831349670887,0.06282342225313187,0.06281562894582748,0.06280796974897385,0.06280043721199036,0.06279303133487701,0.06278574466705322,0.06277858465909958,0.06277154386043549,0.06276463717222214,0.06275783479213715,0.06275114417076111,0.06274458020925522,0.06273812055587769,0.0627317801117897,0.06272554397583008,0.0627194195985794,0.06271340698003769,0.06270749121904373,0.06270168721675873,0.06269598007202148,0.0626903846859932,0.06268487870693207,0.0626794770359993,0.06267417222261429,0.06266896426677704,0.06266384571790695,0.06265882402658463,0.06265389919281006,0.06264906376600266,0.06264430284500122,0.06263965368270874,0.06263507902622223,0.06263059377670288,0.0626261904835701,0.06262186914682388,0.06261763721704483,0.06261347979307175,0.06260940432548523],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"Epochs\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>Training Loss</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>Validation Loss</b>\"}},\"title\":{\"text\":\"Training and Validation Loss\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('1e83b570-ec98-482e-9d8e-0f350514a1a4');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plots for losses \n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "#History for model 1 (first 56 columns)\n",
    "history = fit_history1\n",
    "#plot the training and validation accuracy and loss at each epoch\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(1, len(loss) + 1)\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=loss, name=\"Training Loss\"),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=val_loss, name=\"Validation Loss\"),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Training and Validation Loss\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"Epochs\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Training Loss</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>Validation Loss</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NDdf2gw2H3m7",
    "outputId": "7edcb7e1-5bf8-492d-ba74-36516b344115"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE_0 4.046742852354543\n",
      "RMSE_0 0.02518252763816192\n",
      "dRMSE_0 0.02518252763816192\n",
      "MAE_1 3.4855356842389753\n",
      "MAE_2 3.6680218269265867\n",
      "MAE_3 4.667604583567234\n",
      "MAE_4 3.7679894428610976\n",
      "MAE_5 3.572226613648399\n",
      "\n",
      "Full MAE 3.9583438508283515\n",
      "Full RMSE 0.02051268332402075\n",
      "dRMSE 0.02051268332402075\n"
     ]
    }
   ],
   "source": [
    "#Checking the metrics - RMSE and MAE\n",
    "\n",
    "print('MAE_0',(MAE(newdatay[0,:], pred_aus[0,:])).mean()) # for quarter 21 \n",
    "print('RMSE_0', (RMSE(newdatay[0,:], pred_aus[0,:])).mean())\n",
    "print('dRMSE_0', (RMSE(newdatay[0,:], pred_aus[0,:])).mean())\n",
    "\n",
    "\n",
    "print('MAE_1', (MAE(newdatay[1,:], pred_aus[1,:])).mean()) # for quarter 22\n",
    "\n",
    "print('MAE_2', (MAE(newdatay[2,:], pred_aus[2,:])).mean()) #  for quarter 23\n",
    "\n",
    "print('MAE_3', (MAE(newdatay[3,:], pred_aus[3,:])).mean()) # for quarter 24  etc.\n",
    "\n",
    "print('MAE_4', (MAE(newdatay[4,:], pred_aus[4,:])).mean())\n",
    "\n",
    "print('MAE_5', (MAE(newdatay[5,:], pred_aus[5,:])).mean())\n",
    "\n",
    "print()\n",
    "print('Full MAE', (MAE(newdatay, pred_aus)).mean())\n",
    "print('Full RMSE', (RMSE(newdatay, pred_aus)).mean())\n",
    "print('dRMSE', (RMSE(newdatay, pred_aus)).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "id": "6kFczDo280_D"
   },
   "outputs": [],
   "source": [
    "# Forecasting Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 684
    },
    "id": "5HQKiOxH2_Je",
    "outputId": "bd675ad9-6a80-4abe-de41-5c898172083b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3096</td>\n",
       "      <td>14493</td>\n",
       "      <td>2531</td>\n",
       "      <td>7881</td>\n",
       "      <td>4688</td>\n",
       "      <td>4390</td>\n",
       "      <td>888</td>\n",
       "      <td>2201</td>\n",
       "      <td>1383</td>\n",
       "      <td>2066</td>\n",
       "      <td>...</td>\n",
       "      <td>431</td>\n",
       "      <td>271</td>\n",
       "      <td>244</td>\n",
       "      <td>73</td>\n",
       "      <td>168</td>\n",
       "      <td>37</td>\n",
       "      <td>76</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1479</td>\n",
       "      <td>9548</td>\n",
       "      <td>1439</td>\n",
       "      <td>4586</td>\n",
       "      <td>2320</td>\n",
       "      <td>3990</td>\n",
       "      <td>521</td>\n",
       "      <td>1414</td>\n",
       "      <td>1059</td>\n",
       "      <td>1395</td>\n",
       "      <td>...</td>\n",
       "      <td>669</td>\n",
       "      <td>170</td>\n",
       "      <td>142</td>\n",
       "      <td>221</td>\n",
       "      <td>170</td>\n",
       "      <td>99</td>\n",
       "      <td>36</td>\n",
       "      <td>61</td>\n",
       "      <td>69</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1609</td>\n",
       "      <td>7301</td>\n",
       "      <td>1488</td>\n",
       "      <td>3572</td>\n",
       "      <td>4758</td>\n",
       "      <td>6975</td>\n",
       "      <td>476</td>\n",
       "      <td>1093</td>\n",
       "      <td>1101</td>\n",
       "      <td>2297</td>\n",
       "      <td>...</td>\n",
       "      <td>270</td>\n",
       "      <td>1164</td>\n",
       "      <td>397</td>\n",
       "      <td>315</td>\n",
       "      <td>380</td>\n",
       "      <td>1166</td>\n",
       "      <td>32</td>\n",
       "      <td>23</td>\n",
       "      <td>150</td>\n",
       "      <td>338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1520</td>\n",
       "      <td>9138</td>\n",
       "      <td>1906</td>\n",
       "      <td>3575</td>\n",
       "      <td>3328</td>\n",
       "      <td>4781</td>\n",
       "      <td>571</td>\n",
       "      <td>1699</td>\n",
       "      <td>1128</td>\n",
       "      <td>2433</td>\n",
       "      <td>...</td>\n",
       "      <td>214</td>\n",
       "      <td>535</td>\n",
       "      <td>194</td>\n",
       "      <td>260</td>\n",
       "      <td>410</td>\n",
       "      <td>1139</td>\n",
       "      <td>48</td>\n",
       "      <td>43</td>\n",
       "      <td>172</td>\n",
       "      <td>453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1958</td>\n",
       "      <td>14194</td>\n",
       "      <td>2517</td>\n",
       "      <td>8441</td>\n",
       "      <td>4930</td>\n",
       "      <td>5117</td>\n",
       "      <td>873</td>\n",
       "      <td>2150</td>\n",
       "      <td>1560</td>\n",
       "      <td>2727</td>\n",
       "      <td>...</td>\n",
       "      <td>458</td>\n",
       "      <td>557</td>\n",
       "      <td>147</td>\n",
       "      <td>33</td>\n",
       "      <td>162</td>\n",
       "      <td>28</td>\n",
       "      <td>77</td>\n",
       "      <td>60</td>\n",
       "      <td>15</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1372</td>\n",
       "      <td>8468</td>\n",
       "      <td>1485</td>\n",
       "      <td>4356</td>\n",
       "      <td>3459</td>\n",
       "      <td>4629</td>\n",
       "      <td>481</td>\n",
       "      <td>1738</td>\n",
       "      <td>1909</td>\n",
       "      <td>1996</td>\n",
       "      <td>...</td>\n",
       "      <td>364</td>\n",
       "      <td>555</td>\n",
       "      <td>342</td>\n",
       "      <td>129</td>\n",
       "      <td>125</td>\n",
       "      <td>161</td>\n",
       "      <td>70</td>\n",
       "      <td>90</td>\n",
       "      <td>72</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1561</td>\n",
       "      <td>7704</td>\n",
       "      <td>1512</td>\n",
       "      <td>3592</td>\n",
       "      <td>3815</td>\n",
       "      <td>8738</td>\n",
       "      <td>477</td>\n",
       "      <td>1235</td>\n",
       "      <td>995</td>\n",
       "      <td>2734</td>\n",
       "      <td>...</td>\n",
       "      <td>935</td>\n",
       "      <td>1865</td>\n",
       "      <td>137</td>\n",
       "      <td>109</td>\n",
       "      <td>546</td>\n",
       "      <td>243</td>\n",
       "      <td>26</td>\n",
       "      <td>49</td>\n",
       "      <td>75</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1687</td>\n",
       "      <td>8740</td>\n",
       "      <td>1321</td>\n",
       "      <td>3453</td>\n",
       "      <td>3769</td>\n",
       "      <td>5883</td>\n",
       "      <td>590</td>\n",
       "      <td>1350</td>\n",
       "      <td>778</td>\n",
       "      <td>1954</td>\n",
       "      <td>...</td>\n",
       "      <td>640</td>\n",
       "      <td>703</td>\n",
       "      <td>400</td>\n",
       "      <td>251</td>\n",
       "      <td>299</td>\n",
       "      <td>568</td>\n",
       "      <td>34</td>\n",
       "      <td>56</td>\n",
       "      <td>145</td>\n",
       "      <td>217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2769</td>\n",
       "      <td>13571</td>\n",
       "      <td>2294</td>\n",
       "      <td>7678</td>\n",
       "      <td>4824</td>\n",
       "      <td>5253</td>\n",
       "      <td>932</td>\n",
       "      <td>2350</td>\n",
       "      <td>2412</td>\n",
       "      <td>2719</td>\n",
       "      <td>...</td>\n",
       "      <td>513</td>\n",
       "      <td>374</td>\n",
       "      <td>274</td>\n",
       "      <td>155</td>\n",
       "      <td>365</td>\n",
       "      <td>266</td>\n",
       "      <td>49</td>\n",
       "      <td>122</td>\n",
       "      <td>37</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1275</td>\n",
       "      <td>8522</td>\n",
       "      <td>1619</td>\n",
       "      <td>4139</td>\n",
       "      <td>3880</td>\n",
       "      <td>4684</td>\n",
       "      <td>427</td>\n",
       "      <td>1418</td>\n",
       "      <td>1158</td>\n",
       "      <td>2166</td>\n",
       "      <td>...</td>\n",
       "      <td>298</td>\n",
       "      <td>249</td>\n",
       "      <td>348</td>\n",
       "      <td>84</td>\n",
       "      <td>212</td>\n",
       "      <td>299</td>\n",
       "      <td>33</td>\n",
       "      <td>47</td>\n",
       "      <td>41</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2459</td>\n",
       "      <td>7935</td>\n",
       "      <td>1288</td>\n",
       "      <td>3455</td>\n",
       "      <td>4229</td>\n",
       "      <td>6573</td>\n",
       "      <td>587</td>\n",
       "      <td>2012</td>\n",
       "      <td>610</td>\n",
       "      <td>2508</td>\n",
       "      <td>...</td>\n",
       "      <td>511</td>\n",
       "      <td>1190</td>\n",
       "      <td>155</td>\n",
       "      <td>173</td>\n",
       "      <td>252</td>\n",
       "      <td>414</td>\n",
       "      <td>79</td>\n",
       "      <td>19</td>\n",
       "      <td>389</td>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2916</td>\n",
       "      <td>8320</td>\n",
       "      <td>1336</td>\n",
       "      <td>4102</td>\n",
       "      <td>3734</td>\n",
       "      <td>4953</td>\n",
       "      <td>610</td>\n",
       "      <td>1363</td>\n",
       "      <td>1455</td>\n",
       "      <td>1558</td>\n",
       "      <td>...</td>\n",
       "      <td>833</td>\n",
       "      <td>1039</td>\n",
       "      <td>215</td>\n",
       "      <td>147</td>\n",
       "      <td>163</td>\n",
       "      <td>390</td>\n",
       "      <td>56</td>\n",
       "      <td>17</td>\n",
       "      <td>114</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2030</td>\n",
       "      <td>12995</td>\n",
       "      <td>2899</td>\n",
       "      <td>8288</td>\n",
       "      <td>4522</td>\n",
       "      <td>5037</td>\n",
       "      <td>790</td>\n",
       "      <td>2248</td>\n",
       "      <td>1159</td>\n",
       "      <td>1977</td>\n",
       "      <td>...</td>\n",
       "      <td>709</td>\n",
       "      <td>323</td>\n",
       "      <td>216</td>\n",
       "      <td>65</td>\n",
       "      <td>245</td>\n",
       "      <td>96</td>\n",
       "      <td>130</td>\n",
       "      <td>119</td>\n",
       "      <td>21</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1763</td>\n",
       "      <td>8176</td>\n",
       "      <td>1847</td>\n",
       "      <td>4261</td>\n",
       "      <td>3377</td>\n",
       "      <td>5088</td>\n",
       "      <td>430</td>\n",
       "      <td>1608</td>\n",
       "      <td>937</td>\n",
       "      <td>2667</td>\n",
       "      <td>...</td>\n",
       "      <td>429</td>\n",
       "      <td>719</td>\n",
       "      <td>210</td>\n",
       "      <td>256</td>\n",
       "      <td>457</td>\n",
       "      <td>62</td>\n",
       "      <td>60</td>\n",
       "      <td>128</td>\n",
       "      <td>84</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1383</td>\n",
       "      <td>7482</td>\n",
       "      <td>1327</td>\n",
       "      <td>3477</td>\n",
       "      <td>4545</td>\n",
       "      <td>6879</td>\n",
       "      <td>611</td>\n",
       "      <td>1104</td>\n",
       "      <td>999</td>\n",
       "      <td>2414</td>\n",
       "      <td>...</td>\n",
       "      <td>717</td>\n",
       "      <td>774</td>\n",
       "      <td>300</td>\n",
       "      <td>179</td>\n",
       "      <td>233</td>\n",
       "      <td>283</td>\n",
       "      <td>11</td>\n",
       "      <td>48</td>\n",
       "      <td>116</td>\n",
       "      <td>331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1517</td>\n",
       "      <td>8941</td>\n",
       "      <td>1517</td>\n",
       "      <td>3638</td>\n",
       "      <td>4892</td>\n",
       "      <td>5505</td>\n",
       "      <td>643</td>\n",
       "      <td>1529</td>\n",
       "      <td>830</td>\n",
       "      <td>1898</td>\n",
       "      <td>...</td>\n",
       "      <td>470</td>\n",
       "      <td>1288</td>\n",
       "      <td>345</td>\n",
       "      <td>247</td>\n",
       "      <td>459</td>\n",
       "      <td>1344</td>\n",
       "      <td>52</td>\n",
       "      <td>119</td>\n",
       "      <td>163</td>\n",
       "      <td>259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1715</td>\n",
       "      <td>13271</td>\n",
       "      <td>2484</td>\n",
       "      <td>7171</td>\n",
       "      <td>5730</td>\n",
       "      <td>5333</td>\n",
       "      <td>648</td>\n",
       "      <td>2023</td>\n",
       "      <td>1747</td>\n",
       "      <td>2421</td>\n",
       "      <td>...</td>\n",
       "      <td>352</td>\n",
       "      <td>771</td>\n",
       "      <td>275</td>\n",
       "      <td>112</td>\n",
       "      <td>328</td>\n",
       "      <td>146</td>\n",
       "      <td>31</td>\n",
       "      <td>59</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1292</td>\n",
       "      <td>8180</td>\n",
       "      <td>1338</td>\n",
       "      <td>4062</td>\n",
       "      <td>3487</td>\n",
       "      <td>3836</td>\n",
       "      <td>492</td>\n",
       "      <td>1617</td>\n",
       "      <td>845</td>\n",
       "      <td>2003</td>\n",
       "      <td>...</td>\n",
       "      <td>422</td>\n",
       "      <td>309</td>\n",
       "      <td>334</td>\n",
       "      <td>156</td>\n",
       "      <td>201</td>\n",
       "      <td>179</td>\n",
       "      <td>73</td>\n",
       "      <td>18</td>\n",
       "      <td>40</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1373</td>\n",
       "      <td>7668</td>\n",
       "      <td>1657</td>\n",
       "      <td>3008</td>\n",
       "      <td>4094</td>\n",
       "      <td>7459</td>\n",
       "      <td>607</td>\n",
       "      <td>1203</td>\n",
       "      <td>758</td>\n",
       "      <td>2333</td>\n",
       "      <td>...</td>\n",
       "      <td>559</td>\n",
       "      <td>1255</td>\n",
       "      <td>293</td>\n",
       "      <td>190</td>\n",
       "      <td>320</td>\n",
       "      <td>477</td>\n",
       "      <td>62</td>\n",
       "      <td>247</td>\n",
       "      <td>112</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1613</td>\n",
       "      <td>8972</td>\n",
       "      <td>1613</td>\n",
       "      <td>4093</td>\n",
       "      <td>4084</td>\n",
       "      <td>5512</td>\n",
       "      <td>533</td>\n",
       "      <td>1645</td>\n",
       "      <td>818</td>\n",
       "      <td>1833</td>\n",
       "      <td>...</td>\n",
       "      <td>1311</td>\n",
       "      <td>899</td>\n",
       "      <td>229</td>\n",
       "      <td>199</td>\n",
       "      <td>582</td>\n",
       "      <td>688</td>\n",
       "      <td>102</td>\n",
       "      <td>29</td>\n",
       "      <td>208</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "0               3096                14493              2531   \n",
       "1               1479                 9548              1439   \n",
       "2               1609                 7301              1488   \n",
       "3               1520                 9138              1906   \n",
       "4               1958                14194              2517   \n",
       "5               1372                 8468              1485   \n",
       "6               1561                 7704              1512   \n",
       "7               1687                 8740              1321   \n",
       "8               2769                13571              2294   \n",
       "9               1275                 8522              1619   \n",
       "10              2459                 7935              1288   \n",
       "11              2916                 8320              1336   \n",
       "12              2030                12995              2899   \n",
       "13              1763                 8176              1847   \n",
       "14              1383                 7482              1327   \n",
       "15              1517                 8941              1517   \n",
       "16              1715                13271              2484   \n",
       "17              1292                 8180              1338   \n",
       "18              1373                 7668              1657   \n",
       "19              1613                 8972              1613   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "0                  7881              4688                 4390   \n",
       "1                  4586              2320                 3990   \n",
       "2                  3572              4758                 6975   \n",
       "3                  3575              3328                 4781   \n",
       "4                  8441              4930                 5117   \n",
       "5                  4356              3459                 4629   \n",
       "6                  3592              3815                 8738   \n",
       "7                  3453              3769                 5883   \n",
       "8                  7678              4824                 5253   \n",
       "9                  4139              3880                 4684   \n",
       "10                 3455              4229                 6573   \n",
       "11                 4102              3734                 4953   \n",
       "12                 8288              4522                 5037   \n",
       "13                 4261              3377                 5088   \n",
       "14                 3477              4545                 6879   \n",
       "15                 3638              4892                 5505   \n",
       "16                 7171              5730                 5333   \n",
       "17                 4062              3487                 3836   \n",
       "18                 3008              4094                 7459   \n",
       "19                 4093              4084                 5512   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "0               888                2201             1383                2066   \n",
       "1               521                1414             1059                1395   \n",
       "2               476                1093             1101                2297   \n",
       "3               571                1699             1128                2433   \n",
       "4               873                2150             1560                2727   \n",
       "5               481                1738             1909                1996   \n",
       "6               477                1235              995                2734   \n",
       "7               590                1350              778                1954   \n",
       "8               932                2350             2412                2719   \n",
       "9               427                1418             1158                2166   \n",
       "10              587                2012              610                2508   \n",
       "11              610                1363             1455                1558   \n",
       "12              790                2248             1159                1977   \n",
       "13              430                1608              937                2667   \n",
       "14              611                1104              999                2414   \n",
       "15              643                1529              830                1898   \n",
       "16              648                2023             1747                2421   \n",
       "17              492                1617              845                2003   \n",
       "18              607                1203              758                2333   \n",
       "19              533                1645              818                1833   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "0   ...               431                  271              244   \n",
       "1   ...               669                  170              142   \n",
       "2   ...               270                 1164              397   \n",
       "3   ...               214                  535              194   \n",
       "4   ...               458                  557              147   \n",
       "5   ...               364                  555              342   \n",
       "6   ...               935                 1865              137   \n",
       "7   ...               640                  703              400   \n",
       "8   ...               513                  374              274   \n",
       "9   ...               298                  249              348   \n",
       "10  ...               511                 1190              155   \n",
       "11  ...               833                 1039              215   \n",
       "12  ...               709                  323              216   \n",
       "13  ...               429                  719              210   \n",
       "14  ...               717                  774              300   \n",
       "15  ...               470                 1288              345   \n",
       "16  ...               352                  771              275   \n",
       "17  ...               422                  309              334   \n",
       "18  ...               559                 1255              293   \n",
       "19  ...              1311                  899              229   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "0                   73              168                  37                76   \n",
       "1                  221              170                  99                36   \n",
       "2                  315              380                1166                32   \n",
       "3                  260              410                1139                48   \n",
       "4                   33              162                  28                77   \n",
       "5                  129              125                 161                70   \n",
       "6                  109              546                 243                26   \n",
       "7                  251              299                 568                34   \n",
       "8                  155              365                 266                49   \n",
       "9                   84              212                 299                33   \n",
       "10                 173              252                 414                79   \n",
       "11                 147              163                 390                56   \n",
       "12                  65              245                  96               130   \n",
       "13                 256              457                  62                60   \n",
       "14                 179              233                 283                11   \n",
       "15                 247              459                1344                52   \n",
       "16                 112              328                 146                31   \n",
       "17                 156              201                 179                73   \n",
       "18                 190              320                 477                62   \n",
       "19                 199              582                 688               102   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "0                    24               35                   8  \n",
       "1                    61               69                  39  \n",
       "2                    23              150                 338  \n",
       "3                    43              172                 453  \n",
       "4                    60               15                  47  \n",
       "5                    90               72                  63  \n",
       "6                    49               75                 182  \n",
       "7                    56              145                 217  \n",
       "8                   122               37                  56  \n",
       "9                    47               41                  45  \n",
       "10                   19              389                 259  \n",
       "11                   17              114                 170  \n",
       "12                  119               21                   7  \n",
       "13                  128               84                  58  \n",
       "14                   48              116                 331  \n",
       "15                  119              163                 259  \n",
       "16                   59               14                  12  \n",
       "17                   18               40                  55  \n",
       "18                  247              112                 124  \n",
       "19                   29              208                 248  \n",
       "\n",
       "[20 rows x 56 columns]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets see the first 20 quarters (5 years) data - years which we've trained our model for.\n",
    "first_daily_df[:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Forecasting for next 8 steps in future"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 726
    },
    "id": "nBa4zZg3nNWn",
    "outputId": "905a3e9a-2b51-47f9-e663-582096cceeaa",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1991.178417</td>\n",
       "      <td>13010.448708</td>\n",
       "      <td>2298.833611</td>\n",
       "      <td>7975.659718</td>\n",
       "      <td>4858.513428</td>\n",
       "      <td>5040.821298</td>\n",
       "      <td>700.842434</td>\n",
       "      <td>2181.387277</td>\n",
       "      <td>1108.252820</td>\n",
       "      <td>2452.313702</td>\n",
       "      <td>...</td>\n",
       "      <td>671.719769</td>\n",
       "      <td>475.550116</td>\n",
       "      <td>266.913304</td>\n",
       "      <td>128.549465</td>\n",
       "      <td>358.114018</td>\n",
       "      <td>111.814226</td>\n",
       "      <td>78.458516</td>\n",
       "      <td>98.852058</td>\n",
       "      <td>94.417440</td>\n",
       "      <td>4.531538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1128.200623</td>\n",
       "      <td>6659.608086</td>\n",
       "      <td>1550.843945</td>\n",
       "      <td>3332.746147</td>\n",
       "      <td>3172.596214</td>\n",
       "      <td>4433.844336</td>\n",
       "      <td>504.855207</td>\n",
       "      <td>1551.397986</td>\n",
       "      <td>922.290519</td>\n",
       "      <td>1956.343286</td>\n",
       "      <td>...</td>\n",
       "      <td>510.722101</td>\n",
       "      <td>650.567945</td>\n",
       "      <td>215.914225</td>\n",
       "      <td>106.554796</td>\n",
       "      <td>327.120797</td>\n",
       "      <td>256.828537</td>\n",
       "      <td>33.459186</td>\n",
       "      <td>51.859492</td>\n",
       "      <td>99.420466</td>\n",
       "      <td>35.538261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1134.080750</td>\n",
       "      <td>6968.873535</td>\n",
       "      <td>1484.759497</td>\n",
       "      <td>3127.424969</td>\n",
       "      <td>4039.284256</td>\n",
       "      <td>7277.707979</td>\n",
       "      <td>548.795331</td>\n",
       "      <td>1229.332693</td>\n",
       "      <td>842.106503</td>\n",
       "      <td>2270.228482</td>\n",
       "      <td>...</td>\n",
       "      <td>833.712222</td>\n",
       "      <td>724.457143</td>\n",
       "      <td>174.900249</td>\n",
       "      <td>274.525098</td>\n",
       "      <td>227.094280</td>\n",
       "      <td>427.758199</td>\n",
       "      <td>39.454808</td>\n",
       "      <td>19.829331</td>\n",
       "      <td>204.407656</td>\n",
       "      <td>405.506493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1251.100449</td>\n",
       "      <td>6332.960289</td>\n",
       "      <td>1682.770557</td>\n",
       "      <td>3305.451111</td>\n",
       "      <td>3403.316628</td>\n",
       "      <td>4848.722507</td>\n",
       "      <td>605.802450</td>\n",
       "      <td>1342.340063</td>\n",
       "      <td>937.130774</td>\n",
       "      <td>1556.241508</td>\n",
       "      <td>...</td>\n",
       "      <td>800.712086</td>\n",
       "      <td>841.474087</td>\n",
       "      <td>388.902118</td>\n",
       "      <td>224.529209</td>\n",
       "      <td>341.097151</td>\n",
       "      <td>391.771160</td>\n",
       "      <td>52.455435</td>\n",
       "      <td>55.833021</td>\n",
       "      <td>57.408918</td>\n",
       "      <td>55.510191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2070.894932</td>\n",
       "      <td>12320.703255</td>\n",
       "      <td>3364.633551</td>\n",
       "      <td>7126.872774</td>\n",
       "      <td>5113.764618</td>\n",
       "      <td>4706.500644</td>\n",
       "      <td>735.700621</td>\n",
       "      <td>2255.233543</td>\n",
       "      <td>1191.816966</td>\n",
       "      <td>2155.041706</td>\n",
       "      <td>...</td>\n",
       "      <td>178.695757</td>\n",
       "      <td>460.282984</td>\n",
       "      <td>176.880890</td>\n",
       "      <td>173.478333</td>\n",
       "      <td>204.050855</td>\n",
       "      <td>145.650196</td>\n",
       "      <td>38.448165</td>\n",
       "      <td>238.779242</td>\n",
       "      <td>58.386210</td>\n",
       "      <td>21.456572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1524.647388</td>\n",
       "      <td>7943.473694</td>\n",
       "      <td>1619.179801</td>\n",
       "      <td>3900.077284</td>\n",
       "      <td>3312.840881</td>\n",
       "      <td>4697.377930</td>\n",
       "      <td>625.089407</td>\n",
       "      <td>1757.655591</td>\n",
       "      <td>900.998351</td>\n",
       "      <td>1953.790577</td>\n",
       "      <td>...</td>\n",
       "      <td>480.764362</td>\n",
       "      <td>326.996269</td>\n",
       "      <td>239.969596</td>\n",
       "      <td>192.670226</td>\n",
       "      <td>194.226108</td>\n",
       "      <td>241.078700</td>\n",
       "      <td>86.475931</td>\n",
       "      <td>87.977988</td>\n",
       "      <td>37.472082</td>\n",
       "      <td>48.661762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1324.986088</td>\n",
       "      <td>7647.271362</td>\n",
       "      <td>1139.691518</td>\n",
       "      <td>2943.146471</td>\n",
       "      <td>3331.022720</td>\n",
       "      <td>6828.597567</td>\n",
       "      <td>392.746462</td>\n",
       "      <td>1059.280412</td>\n",
       "      <td>931.956829</td>\n",
       "      <td>3135.134322</td>\n",
       "      <td>...</td>\n",
       "      <td>215.703475</td>\n",
       "      <td>889.366674</td>\n",
       "      <td>183.889398</td>\n",
       "      <td>139.500731</td>\n",
       "      <td>388.072268</td>\n",
       "      <td>219.703928</td>\n",
       "      <td>35.451349</td>\n",
       "      <td>70.804100</td>\n",
       "      <td>85.396646</td>\n",
       "      <td>68.480692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1580.080917</td>\n",
       "      <td>7646.825333</td>\n",
       "      <td>1818.758044</td>\n",
       "      <td>3497.378551</td>\n",
       "      <td>4241.251030</td>\n",
       "      <td>5722.701753</td>\n",
       "      <td>553.791646</td>\n",
       "      <td>1617.329814</td>\n",
       "      <td>1214.098154</td>\n",
       "      <td>2313.218768</td>\n",
       "      <td>...</td>\n",
       "      <td>847.710164</td>\n",
       "      <td>441.455080</td>\n",
       "      <td>165.900542</td>\n",
       "      <td>164.524002</td>\n",
       "      <td>332.091767</td>\n",
       "      <td>425.760089</td>\n",
       "      <td>69.454774</td>\n",
       "      <td>39.826787</td>\n",
       "      <td>35.406263</td>\n",
       "      <td>134.504560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "20       1991.178417         13010.448708       2298.833611   \n",
       "21       1128.200623          6659.608086       1550.843945   \n",
       "22       1134.080750          6968.873535       1484.759497   \n",
       "23       1251.100449          6332.960289       1682.770557   \n",
       "24       2070.894932         12320.703255       3364.633551   \n",
       "25       1524.647388          7943.473694       1619.179801   \n",
       "26       1324.986088          7647.271362       1139.691518   \n",
       "27       1580.080917          7646.825333       1818.758044   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "20          7975.659718       4858.513428          5040.821298   \n",
       "21          3332.746147       3172.596214          4433.844336   \n",
       "22          3127.424969       4039.284256          7277.707979   \n",
       "23          3305.451111       3403.316628          4848.722507   \n",
       "24          7126.872774       5113.764618          4706.500644   \n",
       "25          3900.077284       3312.840881          4697.377930   \n",
       "26          2943.146471       3331.022720          6828.597567   \n",
       "27          3497.378551       4241.251030          5722.701753   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "20       700.842434         2181.387277      1108.252820         2452.313702   \n",
       "21       504.855207         1551.397986       922.290519         1956.343286   \n",
       "22       548.795331         1229.332693       842.106503         2270.228482   \n",
       "23       605.802450         1342.340063       937.130774         1556.241508   \n",
       "24       735.700621         2255.233543      1191.816966         2155.041706   \n",
       "25       625.089407         1757.655591       900.998351         1953.790577   \n",
       "26       392.746462         1059.280412       931.956829         3135.134322   \n",
       "27       553.791646         1617.329814      1214.098154         2313.218768   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "20  ...        671.719769           475.550116       266.913304   \n",
       "21  ...        510.722101           650.567945       215.914225   \n",
       "22  ...        833.712222           724.457143       174.900249   \n",
       "23  ...        800.712086           841.474087       388.902118   \n",
       "24  ...        178.695757           460.282984       176.880890   \n",
       "25  ...        480.764362           326.996269       239.969596   \n",
       "26  ...        215.703475           889.366674       183.889398   \n",
       "27  ...        847.710164           441.455080       165.900542   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "20          128.549465       358.114018          111.814226         78.458516   \n",
       "21          106.554796       327.120797          256.828537         33.459186   \n",
       "22          274.525098       227.094280          427.758199         39.454808   \n",
       "23          224.529209       341.097151          391.771160         52.455435   \n",
       "24          173.478333       204.050855          145.650196         38.448165   \n",
       "25          192.670226       194.226108          241.078700         86.475931   \n",
       "26          139.500731       388.072268          219.703928         35.451349   \n",
       "27          164.524002       332.091767          425.760089         69.454774   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "20            98.852058        94.417440            4.531538  \n",
       "21            51.859492        99.420466           35.538261  \n",
       "22            19.829331       204.407656          405.506493  \n",
       "23            55.833021        57.408918           55.510191  \n",
       "24           238.779242        58.386210           21.456572  \n",
       "25            87.977988        37.472082           48.661762  \n",
       "26            70.804100        85.396646           68.480692  \n",
       "27            39.826787        35.406263          134.504560  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,0,:], index = list(range(20,28))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1071.129280</td>\n",
       "      <td>7290.198715</td>\n",
       "      <td>1141.661621</td>\n",
       "      <td>3709.271336</td>\n",
       "      <td>4116.866310</td>\n",
       "      <td>7896.055569</td>\n",
       "      <td>535.726015</td>\n",
       "      <td>1260.248228</td>\n",
       "      <td>886.462954</td>\n",
       "      <td>2457.270209</td>\n",
       "      <td>...</td>\n",
       "      <td>482.117340</td>\n",
       "      <td>1048.788250</td>\n",
       "      <td>182.200267</td>\n",
       "      <td>311.490046</td>\n",
       "      <td>524.376399</td>\n",
       "      <td>667.488870</td>\n",
       "      <td>58.853011</td>\n",
       "      <td>127.829604</td>\n",
       "      <td>278.629700</td>\n",
       "      <td>345.485824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1461.171854</td>\n",
       "      <td>7806.014893</td>\n",
       "      <td>1880.820992</td>\n",
       "      <td>3374.505550</td>\n",
       "      <td>4260.080582</td>\n",
       "      <td>5711.241318</td>\n",
       "      <td>354.771502</td>\n",
       "      <td>1619.334480</td>\n",
       "      <td>889.645334</td>\n",
       "      <td>1977.334344</td>\n",
       "      <td>...</td>\n",
       "      <td>435.119673</td>\n",
       "      <td>1322.887265</td>\n",
       "      <td>208.225498</td>\n",
       "      <td>197.521115</td>\n",
       "      <td>337.398490</td>\n",
       "      <td>669.514655</td>\n",
       "      <td>169.855478</td>\n",
       "      <td>13.852917</td>\n",
       "      <td>54.633432</td>\n",
       "      <td>132.514062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1758.946634</td>\n",
       "      <td>11703.499557</td>\n",
       "      <td>1999.110285</td>\n",
       "      <td>7641.596430</td>\n",
       "      <td>4322.250137</td>\n",
       "      <td>4779.390598</td>\n",
       "      <td>675.570975</td>\n",
       "      <td>2567.937422</td>\n",
       "      <td>1368.847904</td>\n",
       "      <td>2960.076368</td>\n",
       "      <td>...</td>\n",
       "      <td>474.103791</td>\n",
       "      <td>270.425345</td>\n",
       "      <td>183.106972</td>\n",
       "      <td>185.381966</td>\n",
       "      <td>354.312558</td>\n",
       "      <td>177.386941</td>\n",
       "      <td>102.841698</td>\n",
       "      <td>103.757481</td>\n",
       "      <td>32.618708</td>\n",
       "      <td>12.389175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1355.976686</td>\n",
       "      <td>7944.835022</td>\n",
       "      <td>1397.176649</td>\n",
       "      <td>4533.686062</td>\n",
       "      <td>3578.335503</td>\n",
       "      <td>4587.469257</td>\n",
       "      <td>396.589402</td>\n",
       "      <td>1754.969435</td>\n",
       "      <td>809.929153</td>\n",
       "      <td>1681.100101</td>\n",
       "      <td>...</td>\n",
       "      <td>274.102864</td>\n",
       "      <td>539.480010</td>\n",
       "      <td>231.116805</td>\n",
       "      <td>123.397214</td>\n",
       "      <td>317.321291</td>\n",
       "      <td>223.408947</td>\n",
       "      <td>75.842805</td>\n",
       "      <td>49.768751</td>\n",
       "      <td>43.621493</td>\n",
       "      <td>40.400605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1475.587687</td>\n",
       "      <td>7152.763199</td>\n",
       "      <td>1393.957073</td>\n",
       "      <td>3289.084433</td>\n",
       "      <td>5133.878281</td>\n",
       "      <td>7970.008984</td>\n",
       "      <td>408.244437</td>\n",
       "      <td>1305.288517</td>\n",
       "      <td>829.553252</td>\n",
       "      <td>3050.652037</td>\n",
       "      <td>...</td>\n",
       "      <td>697.076520</td>\n",
       "      <td>871.677287</td>\n",
       "      <td>246.915403</td>\n",
       "      <td>152.156537</td>\n",
       "      <td>242.171518</td>\n",
       "      <td>664.186324</td>\n",
       "      <td>39.819438</td>\n",
       "      <td>29.600552</td>\n",
       "      <td>129.594590</td>\n",
       "      <td>186.185540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1360.029655</td>\n",
       "      <td>7506.161064</td>\n",
       "      <td>1610.716856</td>\n",
       "      <td>3582.223660</td>\n",
       "      <td>4221.404083</td>\n",
       "      <td>4971.683426</td>\n",
       "      <td>617.578861</td>\n",
       "      <td>1293.939987</td>\n",
       "      <td>895.847105</td>\n",
       "      <td>1992.351237</td>\n",
       "      <td>...</td>\n",
       "      <td>710.189033</td>\n",
       "      <td>851.742014</td>\n",
       "      <td>380.710494</td>\n",
       "      <td>326.083640</td>\n",
       "      <td>443.743373</td>\n",
       "      <td>810.976235</td>\n",
       "      <td>67.910397</td>\n",
       "      <td>38.232770</td>\n",
       "      <td>142.694016</td>\n",
       "      <td>145.015040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1949.762819</td>\n",
       "      <td>13182.574181</td>\n",
       "      <td>2316.515514</td>\n",
       "      <td>7967.818558</td>\n",
       "      <td>4865.554039</td>\n",
       "      <td>5088.679970</td>\n",
       "      <td>700.403920</td>\n",
       "      <td>2205.607845</td>\n",
       "      <td>1129.184052</td>\n",
       "      <td>2451.863982</td>\n",
       "      <td>...</td>\n",
       "      <td>674.089761</td>\n",
       "      <td>467.036655</td>\n",
       "      <td>268.008056</td>\n",
       "      <td>129.265016</td>\n",
       "      <td>358.240662</td>\n",
       "      <td>92.284878</td>\n",
       "      <td>77.830360</td>\n",
       "      <td>101.677391</td>\n",
       "      <td>89.605006</td>\n",
       "      <td>8.285383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1086.936951</td>\n",
       "      <td>6834.139671</td>\n",
       "      <td>1569.037624</td>\n",
       "      <td>3325.492393</td>\n",
       "      <td>3180.163338</td>\n",
       "      <td>4482.303844</td>\n",
       "      <td>504.550226</td>\n",
       "      <td>1575.892511</td>\n",
       "      <td>943.773109</td>\n",
       "      <td>1956.048550</td>\n",
       "      <td>...</td>\n",
       "      <td>513.099606</td>\n",
       "      <td>642.390278</td>\n",
       "      <td>217.094140</td>\n",
       "      <td>107.369907</td>\n",
       "      <td>327.303706</td>\n",
       "      <td>237.386941</td>\n",
       "      <td>32.840333</td>\n",
       "      <td>54.749274</td>\n",
       "      <td>94.618170</td>\n",
       "      <td>39.376148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "28       1071.129280          7290.198715       1141.661621   \n",
       "29       1461.171854          7806.014893       1880.820992   \n",
       "30       1758.946634         11703.499557       1999.110285   \n",
       "31       1355.976686          7944.835022       1397.176649   \n",
       "32       1475.587687          7152.763199       1393.957073   \n",
       "33       1360.029655          7506.161064       1610.716856   \n",
       "34       1949.762819         13182.574181       2316.515514   \n",
       "35       1086.936951          6834.139671       1569.037624   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "28          3709.271336       4116.866310          7896.055569   \n",
       "29          3374.505550       4260.080582          5711.241318   \n",
       "30          7641.596430       4322.250137          4779.390598   \n",
       "31          4533.686062       3578.335503          4587.469257   \n",
       "32          3289.084433       5133.878281          7970.008984   \n",
       "33          3582.223660       4221.404083          4971.683426   \n",
       "34          7967.818558       4865.554039          5088.679970   \n",
       "35          3325.492393       3180.163338          4482.303844   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "28       535.726015         1260.248228       886.462954         2457.270209   \n",
       "29       354.771502         1619.334480       889.645334         1977.334344   \n",
       "30       675.570975         2567.937422      1368.847904         2960.076368   \n",
       "31       396.589402         1754.969435       809.929153         1681.100101   \n",
       "32       408.244437         1305.288517       829.553252         3050.652037   \n",
       "33       617.578861         1293.939987       895.847105         1992.351237   \n",
       "34       700.403920         2205.607845      1129.184052         2451.863982   \n",
       "35       504.550226         1575.892511       943.773109         1956.048550   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "28  ...        482.117340          1048.788250       182.200267   \n",
       "29  ...        435.119673          1322.887265       208.225498   \n",
       "30  ...        474.103791           270.425345       183.106972   \n",
       "31  ...        274.102864           539.480010       231.116805   \n",
       "32  ...        697.076520           871.677287       246.915403   \n",
       "33  ...        710.189033           851.742014       380.710494   \n",
       "34  ...        674.089761           467.036655       268.008056   \n",
       "35  ...        513.099606           642.390278       217.094140   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "28          311.490046       524.376399          667.488870         58.853011   \n",
       "29          197.521115       337.398490          669.514655        169.855478   \n",
       "30          185.381966       354.312558          177.386941        102.841698   \n",
       "31          123.397214       317.321291          223.408947         75.842805   \n",
       "32          152.156537       242.171518          664.186324         39.819438   \n",
       "33          326.083640       443.743373          810.976235         67.910397   \n",
       "34          129.265016       358.240662           92.284878         77.830360   \n",
       "35          107.369907       327.303706          237.386941         32.840333   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "28           127.829604       278.629700          345.485824  \n",
       "29            13.852917        54.633432          132.514062  \n",
       "30           103.757481        32.618708           12.389175  \n",
       "31            49.768751        43.621493           40.400605  \n",
       "32            29.600552       129.594590          186.185540  \n",
       "33            38.232770       142.694016          145.015040  \n",
       "34           101.677391        89.605006            8.285383  \n",
       "35            54.749274        94.618170           39.376148  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,1,:], index = list(range(28,36))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1481.190975</td>\n",
       "      <td>7641.133453</td>\n",
       "      <td>1854.855810</td>\n",
       "      <td>3382.713240</td>\n",
       "      <td>4253.425545</td>\n",
       "      <td>5672.682665</td>\n",
       "      <td>352.535920</td>\n",
       "      <td>1599.159348</td>\n",
       "      <td>859.283939</td>\n",
       "      <td>1977.943795</td>\n",
       "      <td>...</td>\n",
       "      <td>435.043522</td>\n",
       "      <td>1313.721223</td>\n",
       "      <td>205.222227</td>\n",
       "      <td>193.380434</td>\n",
       "      <td>336.731771</td>\n",
       "      <td>678.059091</td>\n",
       "      <td>170.063154</td>\n",
       "      <td>10.524093</td>\n",
       "      <td>57.517736</td>\n",
       "      <td>128.879138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1779.222694</td>\n",
       "      <td>11542.398872</td>\n",
       "      <td>1973.883986</td>\n",
       "      <td>7650.815676</td>\n",
       "      <td>4316.543564</td>\n",
       "      <td>4741.719608</td>\n",
       "      <td>673.557224</td>\n",
       "      <td>2548.185949</td>\n",
       "      <td>1339.341003</td>\n",
       "      <td>2960.989717</td>\n",
       "      <td>...</td>\n",
       "      <td>474.042459</td>\n",
       "      <td>261.741409</td>\n",
       "      <td>180.227722</td>\n",
       "      <td>181.387634</td>\n",
       "      <td>353.741740</td>\n",
       "      <td>186.072862</td>\n",
       "      <td>103.064596</td>\n",
       "      <td>100.533711</td>\n",
       "      <td>35.516641</td>\n",
       "      <td>8.889055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1376.049065</td>\n",
       "      <td>7782.218307</td>\n",
       "      <td>1371.722195</td>\n",
       "      <td>4542.434742</td>\n",
       "      <td>3572.091530</td>\n",
       "      <td>4549.524310</td>\n",
       "      <td>394.460697</td>\n",
       "      <td>1735.047301</td>\n",
       "      <td>780.076944</td>\n",
       "      <td>1681.806804</td>\n",
       "      <td>...</td>\n",
       "      <td>274.046300</td>\n",
       "      <td>530.614105</td>\n",
       "      <td>228.193426</td>\n",
       "      <td>119.349963</td>\n",
       "      <td>316.703141</td>\n",
       "      <td>231.999554</td>\n",
       "      <td>76.056099</td>\n",
       "      <td>46.494412</td>\n",
       "      <td>46.522044</td>\n",
       "      <td>36.843252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1496.074108</td>\n",
       "      <td>6996.332703</td>\n",
       "      <td>1369.736807</td>\n",
       "      <td>3299.467821</td>\n",
       "      <td>5129.137367</td>\n",
       "      <td>7933.538630</td>\n",
       "      <td>406.469986</td>\n",
       "      <td>1286.057320</td>\n",
       "      <td>801.106293</td>\n",
       "      <td>3051.824687</td>\n",
       "      <td>...</td>\n",
       "      <td>697.043899</td>\n",
       "      <td>863.633112</td>\n",
       "      <td>244.196034</td>\n",
       "      <td>148.354797</td>\n",
       "      <td>241.707048</td>\n",
       "      <td>673.014000</td>\n",
       "      <td>40.056940</td>\n",
       "      <td>26.499381</td>\n",
       "      <td>132.521858</td>\n",
       "      <td>182.847328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1378.779770</td>\n",
       "      <td>7324.321182</td>\n",
       "      <td>1581.471514</td>\n",
       "      <td>3585.791849</td>\n",
       "      <td>4210.346733</td>\n",
       "      <td>4929.219221</td>\n",
       "      <td>614.306313</td>\n",
       "      <td>1271.827583</td>\n",
       "      <td>861.657616</td>\n",
       "      <td>1991.509199</td>\n",
       "      <td>...</td>\n",
       "      <td>710.051617</td>\n",
       "      <td>840.416666</td>\n",
       "      <td>377.140885</td>\n",
       "      <td>321.290766</td>\n",
       "      <td>442.640257</td>\n",
       "      <td>818.888986</td>\n",
       "      <td>68.042795</td>\n",
       "      <td>34.430015</td>\n",
       "      <td>145.530584</td>\n",
       "      <td>140.770261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>1970.897518</td>\n",
       "      <td>13029.159035</td>\n",
       "      <td>2292.561510</td>\n",
       "      <td>7979.424244</td>\n",
       "      <td>4862.370323</td>\n",
       "      <td>5052.531102</td>\n",
       "      <td>698.948232</td>\n",
       "      <td>2186.755512</td>\n",
       "      <td>1101.396814</td>\n",
       "      <td>2453.716951</td>\n",
       "      <td>...</td>\n",
       "      <td>674.032887</td>\n",
       "      <td>459.255783</td>\n",
       "      <td>265.371953</td>\n",
       "      <td>125.540860</td>\n",
       "      <td>357.897893</td>\n",
       "      <td>101.335716</td>\n",
       "      <td>78.098911</td>\n",
       "      <td>98.690413</td>\n",
       "      <td>92.496941</td>\n",
       "      <td>5.074033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1106.911160</td>\n",
       "      <td>6671.249184</td>\n",
       "      <td>1543.589790</td>\n",
       "      <td>3334.105026</td>\n",
       "      <td>3173.715408</td>\n",
       "      <td>4444.365331</td>\n",
       "      <td>502.381587</td>\n",
       "      <td>1555.935024</td>\n",
       "      <td>913.861082</td>\n",
       "      <td>1956.657449</td>\n",
       "      <td>...</td>\n",
       "      <td>513.048907</td>\n",
       "      <td>633.509345</td>\n",
       "      <td>214.165656</td>\n",
       "      <td>103.318720</td>\n",
       "      <td>326.671200</td>\n",
       "      <td>245.943798</td>\n",
       "      <td>33.049275</td>\n",
       "      <td>51.461721</td>\n",
       "      <td>97.525850</td>\n",
       "      <td>35.806021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>1113.044724</td>\n",
       "      <td>6982.107773</td>\n",
       "      <td>1477.708954</td>\n",
       "      <td>3129.382458</td>\n",
       "      <td>4041.043404</td>\n",
       "      <td>7288.504800</td>\n",
       "      <td>546.451761</td>\n",
       "      <td>1234.032677</td>\n",
       "      <td>834.057491</td>\n",
       "      <td>2270.788480</td>\n",
       "      <td>...</td>\n",
       "      <td>836.044517</td>\n",
       "      <td>707.611306</td>\n",
       "      <td>173.190413</td>\n",
       "      <td>271.347920</td>\n",
       "      <td>226.699193</td>\n",
       "      <td>417.002659</td>\n",
       "      <td>39.055490</td>\n",
       "      <td>19.491348</td>\n",
       "      <td>202.522712</td>\n",
       "      <td>405.838882</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "36       1481.190975          7641.133453       1854.855810   \n",
       "37       1779.222694         11542.398872       1973.883986   \n",
       "38       1376.049065          7782.218307       1371.722195   \n",
       "39       1496.074108          6996.332703       1369.736807   \n",
       "40       1378.779770          7324.321182       1581.471514   \n",
       "41       1970.897518         13029.159035       2292.561510   \n",
       "42       1106.911160          6671.249184       1543.589790   \n",
       "43       1113.044724          6982.107773       1477.708954   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "36          3382.713240       4253.425545          5672.682665   \n",
       "37          7650.815676       4316.543564          4741.719608   \n",
       "38          4542.434742       3572.091530          4549.524310   \n",
       "39          3299.467821       5129.137367          7933.538630   \n",
       "40          3585.791849       4210.346733          4929.219221   \n",
       "41          7979.424244       4862.370323          5052.531102   \n",
       "42          3334.105026       3173.715408          4444.365331   \n",
       "43          3129.382458       4041.043404          7288.504800   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "36       352.535920         1599.159348       859.283939         1977.943795   \n",
       "37       673.557224         2548.185949      1339.341003         2960.989717   \n",
       "38       394.460697         1735.047301       780.076944         1681.806804   \n",
       "39       406.469986         1286.057320       801.106293         3051.824687   \n",
       "40       614.306313         1271.827583       861.657616         1991.509199   \n",
       "41       698.948232         2186.755512      1101.396814         2453.716951   \n",
       "42       502.381587         1555.935024       913.861082         1956.657449   \n",
       "43       546.451761         1234.032677       834.057491         2270.788480   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "36  ...        435.043522          1313.721223       205.222227   \n",
       "37  ...        474.042459           261.741409       180.227722   \n",
       "38  ...        274.046300           530.614105       228.193426   \n",
       "39  ...        697.043899           863.633112       244.196034   \n",
       "40  ...        710.051617           840.416666       377.140885   \n",
       "41  ...        674.032887           459.255783       265.371953   \n",
       "42  ...        513.048907           633.509345       214.165656   \n",
       "43  ...        836.044517           707.611306       173.190413   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "36          193.380434       336.731771          678.059091        170.063154   \n",
       "37          181.387634       353.741740          186.072862        103.064596   \n",
       "38          119.349963       316.703141          231.999554         76.056099   \n",
       "39          148.354797       241.707048          673.014000         40.056940   \n",
       "40          321.290766       442.640257          818.888986         68.042795   \n",
       "41          125.540860       357.897893          101.335716         78.098911   \n",
       "42          103.318720       326.671200          245.943798         33.049275   \n",
       "43          271.347920       226.699193          417.002659         39.055490   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "36            10.524093        57.517736          128.879138  \n",
       "37           100.533711        35.516641            8.889055  \n",
       "38            46.494412        46.522044           36.843252  \n",
       "39            26.499381       132.521858          182.847328  \n",
       "40            34.430015       145.530584          140.770261  \n",
       "41            98.690413        92.496941            5.074033  \n",
       "42            51.461721        97.525850           35.806021  \n",
       "43            19.491348       202.522712          405.838882  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,2,:], index = list(range(36,44))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1790.685993</td>\n",
       "      <td>11536.609169</td>\n",
       "      <td>1977.910780</td>\n",
       "      <td>7659.881268</td>\n",
       "      <td>4318.494072</td>\n",
       "      <td>4740.094958</td>\n",
       "      <td>674.851411</td>\n",
       "      <td>2545.933610</td>\n",
       "      <td>1343.070980</td>\n",
       "      <td>2961.312270</td>\n",
       "      <td>...</td>\n",
       "      <td>474.123995</td>\n",
       "      <td>270.683932</td>\n",
       "      <td>181.009507</td>\n",
       "      <td>183.004751</td>\n",
       "      <td>354.218013</td>\n",
       "      <td>192.761661</td>\n",
       "      <td>103.290700</td>\n",
       "      <td>100.823004</td>\n",
       "      <td>37.386434</td>\n",
       "      <td>9.210350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>1387.709198</td>\n",
       "      <td>7777.818680</td>\n",
       "      <td>1375.929107</td>\n",
       "      <td>4551.983704</td>\n",
       "      <td>3574.593475</td>\n",
       "      <td>4548.130033</td>\n",
       "      <td>395.867213</td>\n",
       "      <td>1732.952265</td>\n",
       "      <td>784.115221</td>\n",
       "      <td>1682.348918</td>\n",
       "      <td>...</td>\n",
       "      <td>274.126602</td>\n",
       "      <td>539.700434</td>\n",
       "      <td>229.012073</td>\n",
       "      <td>121.010307</td>\n",
       "      <td>317.226347</td>\n",
       "      <td>238.775431</td>\n",
       "      <td>76.291644</td>\n",
       "      <td>46.831330</td>\n",
       "      <td>48.388309</td>\n",
       "      <td>37.219090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>1507.576305</td>\n",
       "      <td>6990.877831</td>\n",
       "      <td>1373.809862</td>\n",
       "      <td>3308.597435</td>\n",
       "      <td>5131.213631</td>\n",
       "      <td>7931.949470</td>\n",
       "      <td>407.794665</td>\n",
       "      <td>1283.850698</td>\n",
       "      <td>804.905470</td>\n",
       "      <td>3052.204531</td>\n",
       "      <td>...</td>\n",
       "      <td>697.116414</td>\n",
       "      <td>872.590959</td>\n",
       "      <td>244.990831</td>\n",
       "      <td>149.979686</td>\n",
       "      <td>242.193889</td>\n",
       "      <td>679.704149</td>\n",
       "      <td>40.285713</td>\n",
       "      <td>26.797120</td>\n",
       "      <td>134.381086</td>\n",
       "      <td>183.179254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>1390.597507</td>\n",
       "      <td>7320.979370</td>\n",
       "      <td>1585.822699</td>\n",
       "      <td>3595.631046</td>\n",
       "      <td>4213.252586</td>\n",
       "      <td>4927.966074</td>\n",
       "      <td>615.802440</td>\n",
       "      <td>1269.859910</td>\n",
       "      <td>865.931118</td>\n",
       "      <td>1992.219655</td>\n",
       "      <td>...</td>\n",
       "      <td>710.116036</td>\n",
       "      <td>849.607903</td>\n",
       "      <td>377.992882</td>\n",
       "      <td>322.983822</td>\n",
       "      <td>443.197238</td>\n",
       "      <td>825.717649</td>\n",
       "      <td>68.286426</td>\n",
       "      <td>34.801356</td>\n",
       "      <td>147.381904</td>\n",
       "      <td>141.183372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>1981.371788</td>\n",
       "      <td>13016.367584</td>\n",
       "      <td>2295.626837</td>\n",
       "      <td>7985.941204</td>\n",
       "      <td>4861.584846</td>\n",
       "      <td>5049.667004</td>\n",
       "      <td>699.679256</td>\n",
       "      <td>2183.691437</td>\n",
       "      <td>1103.573071</td>\n",
       "      <td>2452.969737</td>\n",
       "      <td>...</td>\n",
       "      <td>674.098886</td>\n",
       "      <td>467.419894</td>\n",
       "      <td>265.959491</td>\n",
       "      <td>126.931377</td>\n",
       "      <td>358.140934</td>\n",
       "      <td>107.595740</td>\n",
       "      <td>78.276581</td>\n",
       "      <td>98.740569</td>\n",
       "      <td>94.368647</td>\n",
       "      <td>5.115970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>1119.213394</td>\n",
       "      <td>6671.542236</td>\n",
       "      <td>1548.415048</td>\n",
       "      <td>3345.583736</td>\n",
       "      <td>3178.115723</td>\n",
       "      <td>4443.852492</td>\n",
       "      <td>504.155685</td>\n",
       "      <td>1554.362797</td>\n",
       "      <td>918.934254</td>\n",
       "      <td>1957.917636</td>\n",
       "      <td>...</td>\n",
       "      <td>513.170681</td>\n",
       "      <td>643.129496</td>\n",
       "      <td>215.099412</td>\n",
       "      <td>105.131243</td>\n",
       "      <td>327.355982</td>\n",
       "      <td>253.028565</td>\n",
       "      <td>33.315033</td>\n",
       "      <td>51.966424</td>\n",
       "      <td>99.417478</td>\n",
       "      <td>36.376334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>1124.471794</td>\n",
       "      <td>6976.105354</td>\n",
       "      <td>1481.712739</td>\n",
       "      <td>3138.265053</td>\n",
       "      <td>4042.896515</td>\n",
       "      <td>7286.802322</td>\n",
       "      <td>547.735446</td>\n",
       "      <td>1231.768476</td>\n",
       "      <td>837.734364</td>\n",
       "      <td>2271.086416</td>\n",
       "      <td>...</td>\n",
       "      <td>836.107324</td>\n",
       "      <td>716.501374</td>\n",
       "      <td>173.973941</td>\n",
       "      <td>272.954398</td>\n",
       "      <td>227.167052</td>\n",
       "      <td>423.649607</td>\n",
       "      <td>39.280993</td>\n",
       "      <td>19.768545</td>\n",
       "      <td>204.374569</td>\n",
       "      <td>406.146814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>1241.575802</td>\n",
       "      <td>6340.800713</td>\n",
       "      <td>1679.803081</td>\n",
       "      <td>3316.545151</td>\n",
       "      <td>3407.173233</td>\n",
       "      <td>4857.934942</td>\n",
       "      <td>604.789011</td>\n",
       "      <td>1344.842406</td>\n",
       "      <td>932.892904</td>\n",
       "      <td>1557.191285</td>\n",
       "      <td>...</td>\n",
       "      <td>803.113841</td>\n",
       "      <td>833.589338</td>\n",
       "      <td>387.989841</td>\n",
       "      <td>222.978341</td>\n",
       "      <td>341.190699</td>\n",
       "      <td>387.706579</td>\n",
       "      <td>52.285473</td>\n",
       "      <td>55.794335</td>\n",
       "      <td>57.380288</td>\n",
       "      <td>56.176060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "44       1790.685993         11536.609169       1977.910780   \n",
       "45       1387.709198          7777.818680       1375.929107   \n",
       "46       1507.576305          6990.877831       1373.809862   \n",
       "47       1390.597507          7320.979370       1585.822699   \n",
       "48       1981.371788         13016.367584       2295.626837   \n",
       "49       1119.213394          6671.542236       1548.415048   \n",
       "50       1124.471794          6976.105354       1481.712739   \n",
       "51       1241.575802          6340.800713       1679.803081   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "44          7659.881268       4318.494072          4740.094958   \n",
       "45          4551.983704       3574.593475          4548.130033   \n",
       "46          3308.597435       5131.213631          7931.949470   \n",
       "47          3595.631046       4213.252586          4927.966074   \n",
       "48          7985.941204       4861.584846          5049.667004   \n",
       "49          3345.583736       3178.115723          4443.852492   \n",
       "50          3138.265053       4042.896515          7286.802322   \n",
       "51          3316.545151       3407.173233          4857.934942   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "44       674.851411         2545.933610      1343.070980         2961.312270   \n",
       "45       395.867213         1732.952265       784.115221         1682.348918   \n",
       "46       407.794665         1283.850698       804.905470         3052.204531   \n",
       "47       615.802440         1269.859910       865.931118         1992.219655   \n",
       "48       699.679256         2183.691437      1103.573071         2452.969737   \n",
       "49       504.155685         1554.362797       918.934254         1957.917636   \n",
       "50       547.735446         1231.768476       837.734364         2271.086416   \n",
       "51       604.789011         1344.842406       932.892904         1557.191285   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "44  ...        474.123995           270.683932       181.009507   \n",
       "45  ...        274.126602           539.700434       229.012073   \n",
       "46  ...        697.116414           872.590959       244.990831   \n",
       "47  ...        710.116036           849.607903       377.992882   \n",
       "48  ...        674.098886           467.419894       265.959491   \n",
       "49  ...        513.170681           643.129496       215.099412   \n",
       "50  ...        836.107324           716.501374       173.973941   \n",
       "51  ...        803.113841           833.589338       387.989841   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "44          183.004751       354.218013          192.761661        103.290700   \n",
       "45          121.010307       317.226347          238.775431         76.291644   \n",
       "46          149.979686       242.193889          679.704149         40.285713   \n",
       "47          322.983822       443.197238          825.717649         68.286426   \n",
       "48          126.931377       358.140934          107.595740         78.276581   \n",
       "49          105.131243       327.355982          253.028565         33.315033   \n",
       "50          272.954398       227.167052          423.649607         39.280993   \n",
       "51          222.978341       341.190699          387.706579         52.285473   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "44           100.823004        37.386434            9.210350  \n",
       "45            46.831330        48.388309           37.219090  \n",
       "46            26.797120       134.381086          183.179254  \n",
       "47            34.801356       147.381904          141.183372  \n",
       "48            98.740569        94.368647            5.115970  \n",
       "49            51.966424        99.417478           36.376334  \n",
       "50            19.768545       204.374569          406.146814  \n",
       "51            55.794335        57.380288           56.176060  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,3,:], index = list(range(44,52))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>1392.567852</td>\n",
       "      <td>7770.212189</td>\n",
       "      <td>1376.895014</td>\n",
       "      <td>4547.009151</td>\n",
       "      <td>3572.287186</td>\n",
       "      <td>4542.685133</td>\n",
       "      <td>396.230907</td>\n",
       "      <td>1731.183237</td>\n",
       "      <td>785.528561</td>\n",
       "      <td>1681.698072</td>\n",
       "      <td>...</td>\n",
       "      <td>273.033862</td>\n",
       "      <td>543.460914</td>\n",
       "      <td>229.367692</td>\n",
       "      <td>121.698925</td>\n",
       "      <td>317.150903</td>\n",
       "      <td>240.859091</td>\n",
       "      <td>76.366600</td>\n",
       "      <td>46.767466</td>\n",
       "      <td>48.545328</td>\n",
       "      <td>36.802912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>1512.589558</td>\n",
       "      <td>6984.389557</td>\n",
       "      <td>1374.907367</td>\n",
       "      <td>3304.103054</td>\n",
       "      <td>5129.376274</td>\n",
       "      <td>7926.713151</td>\n",
       "      <td>408.244589</td>\n",
       "      <td>1282.196940</td>\n",
       "      <td>806.567636</td>\n",
       "      <td>3051.730637</td>\n",
       "      <td>...</td>\n",
       "      <td>696.036744</td>\n",
       "      <td>876.476532</td>\n",
       "      <td>245.368989</td>\n",
       "      <td>150.703958</td>\n",
       "      <td>242.158240</td>\n",
       "      <td>681.873131</td>\n",
       "      <td>40.367373</td>\n",
       "      <td>26.775112</td>\n",
       "      <td>134.547928</td>\n",
       "      <td>182.810475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>1395.466679</td>\n",
       "      <td>7313.579170</td>\n",
       "      <td>1586.813634</td>\n",
       "      <td>3590.748795</td>\n",
       "      <td>4211.036819</td>\n",
       "      <td>4922.560814</td>\n",
       "      <td>616.180877</td>\n",
       "      <td>1268.117828</td>\n",
       "      <td>867.378370</td>\n",
       "      <td>1991.602808</td>\n",
       "      <td>...</td>\n",
       "      <td>709.025252</td>\n",
       "      <td>853.372213</td>\n",
       "      <td>378.353312</td>\n",
       "      <td>323.675431</td>\n",
       "      <td>443.129490</td>\n",
       "      <td>827.802254</td>\n",
       "      <td>68.362394</td>\n",
       "      <td>34.743713</td>\n",
       "      <td>147.537271</td>\n",
       "      <td>140.775471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>1986.486881</td>\n",
       "      <td>13010.671066</td>\n",
       "      <td>2296.824695</td>\n",
       "      <td>7981.778671</td>\n",
       "      <td>4860.071770</td>\n",
       "      <td>5044.576173</td>\n",
       "      <td>700.188147</td>\n",
       "      <td>2182.125773</td>\n",
       "      <td>1105.402555</td>\n",
       "      <td>2452.616716</td>\n",
       "      <td>...</td>\n",
       "      <td>673.025149</td>\n",
       "      <td>471.388568</td>\n",
       "      <td>266.355112</td>\n",
       "      <td>127.679392</td>\n",
       "      <td>358.132520</td>\n",
       "      <td>109.815484</td>\n",
       "      <td>78.363055</td>\n",
       "      <td>98.747576</td>\n",
       "      <td>94.538384</td>\n",
       "      <td>4.779295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>1123.276855</td>\n",
       "      <td>6658.281647</td>\n",
       "      <td>1548.672107</td>\n",
       "      <td>3338.141647</td>\n",
       "      <td>3173.471916</td>\n",
       "      <td>4437.326291</td>\n",
       "      <td>504.079856</td>\n",
       "      <td>1551.995647</td>\n",
       "      <td>919.079796</td>\n",
       "      <td>1956.394616</td>\n",
       "      <td>...</td>\n",
       "      <td>512.005734</td>\n",
       "      <td>646.209252</td>\n",
       "      <td>215.331136</td>\n",
       "      <td>105.630534</td>\n",
       "      <td>327.082476</td>\n",
       "      <td>254.693980</td>\n",
       "      <td>33.354790</td>\n",
       "      <td>51.691612</td>\n",
       "      <td>99.519223</td>\n",
       "      <td>35.720003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>1130.051350</td>\n",
       "      <td>6973.575851</td>\n",
       "      <td>1483.285850</td>\n",
       "      <td>3135.575039</td>\n",
       "      <td>4042.736099</td>\n",
       "      <td>7282.315235</td>\n",
       "      <td>548.495601</td>\n",
       "      <td>1230.513619</td>\n",
       "      <td>840.299912</td>\n",
       "      <td>2271.232018</td>\n",
       "      <td>...</td>\n",
       "      <td>835.086002</td>\n",
       "      <td>720.880988</td>\n",
       "      <td>174.432367</td>\n",
       "      <td>273.815427</td>\n",
       "      <td>227.272762</td>\n",
       "      <td>426.124780</td>\n",
       "      <td>39.386710</td>\n",
       "      <td>19.898870</td>\n",
       "      <td>204.590929</td>\n",
       "      <td>405.947885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>1246.369846</td>\n",
       "      <td>6332.912735</td>\n",
       "      <td>1680.737663</td>\n",
       "      <td>3311.441486</td>\n",
       "      <td>3404.751793</td>\n",
       "      <td>4852.437326</td>\n",
       "      <td>605.128927</td>\n",
       "      <td>1343.054146</td>\n",
       "      <td>934.224392</td>\n",
       "      <td>1556.497828</td>\n",
       "      <td>...</td>\n",
       "      <td>802.015064</td>\n",
       "      <td>837.287197</td>\n",
       "      <td>388.341053</td>\n",
       "      <td>223.651986</td>\n",
       "      <td>341.105644</td>\n",
       "      <td>389.747847</td>\n",
       "      <td>52.358446</td>\n",
       "      <td>55.717416</td>\n",
       "      <td>57.527968</td>\n",
       "      <td>55.746939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2066.466846</td>\n",
       "      <td>12322.519402</td>\n",
       "      <td>3362.810324</td>\n",
       "      <td>7133.699177</td>\n",
       "      <td>5116.000435</td>\n",
       "      <td>4710.551268</td>\n",
       "      <td>735.176535</td>\n",
       "      <td>2256.112761</td>\n",
       "      <td>1189.368816</td>\n",
       "      <td>2155.591437</td>\n",
       "      <td>...</td>\n",
       "      <td>180.022748</td>\n",
       "      <td>456.371035</td>\n",
       "      <td>176.353201</td>\n",
       "      <td>172.674409</td>\n",
       "      <td>204.126738</td>\n",
       "      <td>143.804414</td>\n",
       "      <td>38.362283</td>\n",
       "      <td>238.741102</td>\n",
       "      <td>58.536101</td>\n",
       "      <td>21.772992</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "53       1392.567852          7770.212189       1376.895014   \n",
       "54       1512.589558          6984.389557       1374.907367   \n",
       "55       1395.466679          7313.579170       1586.813634   \n",
       "56       1986.486881         13010.671066       2296.824695   \n",
       "57       1123.276855          6658.281647       1548.672107   \n",
       "58       1130.051350          6973.575851       1483.285850   \n",
       "59       1246.369846          6332.912735       1680.737663   \n",
       "60       2066.466846         12322.519402       3362.810324   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "53          4547.009151       3572.287186          4542.685133   \n",
       "54          3304.103054       5129.376274          7926.713151   \n",
       "55          3590.748795       4211.036819          4922.560814   \n",
       "56          7981.778671       4860.071770          5044.576173   \n",
       "57          3338.141647       3173.471916          4437.326291   \n",
       "58          3135.575039       4042.736099          7282.315235   \n",
       "59          3311.441486       3404.751793          4852.437326   \n",
       "60          7133.699177       5116.000435          4710.551268   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "53       396.230907         1731.183237       785.528561         1681.698072   \n",
       "54       408.244589         1282.196940       806.567636         3051.730637   \n",
       "55       616.180877         1268.117828       867.378370         1991.602808   \n",
       "56       700.188147         2182.125773      1105.402555         2452.616716   \n",
       "57       504.079856         1551.995647       919.079796         1956.394616   \n",
       "58       548.495601         1230.513619       840.299912         2271.232018   \n",
       "59       605.128927         1343.054146       934.224392         1556.497828   \n",
       "60       735.176535         2256.112761      1189.368816         2155.591437   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "53  ...        273.033862           543.460914       229.367692   \n",
       "54  ...        696.036744           876.476532       245.368989   \n",
       "55  ...        709.025252           853.372213       378.353312   \n",
       "56  ...        673.025149           471.388568       266.355112   \n",
       "57  ...        512.005734           646.209252       215.331136   \n",
       "58  ...        835.086002           720.880988       174.432367   \n",
       "59  ...        802.015064           837.287197       388.341053   \n",
       "60  ...        180.022748           456.371035       176.353201   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "53          121.698925       317.150903          240.859091         76.366600   \n",
       "54          150.703958       242.158240          681.873131         40.367373   \n",
       "55          323.675431       443.129490          827.802254         68.362394   \n",
       "56          127.679392       358.132520          109.815484         78.363055   \n",
       "57          105.630534       327.082476          254.693980         33.354790   \n",
       "58          273.815427       227.272762          426.124780         39.386710   \n",
       "59          223.651986       341.105644          389.747847         52.358446   \n",
       "60          172.674409       204.126738          143.804414         38.362283   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "53            46.767466        48.545328           36.802912  \n",
       "54            26.775112       134.547928          182.810475  \n",
       "55            34.743713       147.537271          140.775471  \n",
       "56            98.747576        94.538384            4.779295  \n",
       "57            51.691612        99.519223           35.720003  \n",
       "58            19.898870       204.590929          405.947885  \n",
       "59            55.717416        57.527968           55.746939  \n",
       "60           238.741102        58.536101           21.772992  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,4,:], index = list(range(53,61))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>1515.072475</td>\n",
       "      <td>6983.178795</td>\n",
       "      <td>1375.949649</td>\n",
       "      <td>3300.810694</td>\n",
       "      <td>5128.283432</td>\n",
       "      <td>7924.508626</td>\n",
       "      <td>408.537352</td>\n",
       "      <td>1281.671483</td>\n",
       "      <td>807.913327</td>\n",
       "      <td>3051.422102</td>\n",
       "      <td>...</td>\n",
       "      <td>695.356869</td>\n",
       "      <td>878.737211</td>\n",
       "      <td>245.658037</td>\n",
       "      <td>151.161243</td>\n",
       "      <td>242.135232</td>\n",
       "      <td>682.921306</td>\n",
       "      <td>40.412391</td>\n",
       "      <td>26.803288</td>\n",
       "      <td>134.529380</td>\n",
       "      <td>182.648021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>1398.094013</td>\n",
       "      <td>7313.344597</td>\n",
       "      <td>1587.960468</td>\n",
       "      <td>3587.901392</td>\n",
       "      <td>4210.368797</td>\n",
       "      <td>4920.533738</td>\n",
       "      <td>616.550377</td>\n",
       "      <td>1267.683343</td>\n",
       "      <td>868.951369</td>\n",
       "      <td>1991.452901</td>\n",
       "      <td>...</td>\n",
       "      <td>708.359579</td>\n",
       "      <td>855.753860</td>\n",
       "      <td>378.659041</td>\n",
       "      <td>324.166351</td>\n",
       "      <td>443.142210</td>\n",
       "      <td>828.935347</td>\n",
       "      <td>68.413077</td>\n",
       "      <td>34.810788</td>\n",
       "      <td>147.532239</td>\n",
       "      <td>140.655081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>1988.974140</td>\n",
       "      <td>13009.581123</td>\n",
       "      <td>2297.873355</td>\n",
       "      <td>7978.563673</td>\n",
       "      <td>4859.045952</td>\n",
       "      <td>5042.391779</td>\n",
       "      <td>700.489543</td>\n",
       "      <td>2181.612868</td>\n",
       "      <td>1106.766751</td>\n",
       "      <td>2452.333020</td>\n",
       "      <td>...</td>\n",
       "      <td>672.348602</td>\n",
       "      <td>473.647038</td>\n",
       "      <td>266.644731</td>\n",
       "      <td>128.137524</td>\n",
       "      <td>358.114895</td>\n",
       "      <td>110.865279</td>\n",
       "      <td>78.408494</td>\n",
       "      <td>98.780214</td>\n",
       "      <td>94.520207</td>\n",
       "      <td>4.622052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>1125.994175</td>\n",
       "      <td>6658.671097</td>\n",
       "      <td>1549.884335</td>\n",
       "      <td>3335.591949</td>\n",
       "      <td>3173.079468</td>\n",
       "      <td>4435.406722</td>\n",
       "      <td>504.496611</td>\n",
       "      <td>1551.620468</td>\n",
       "      <td>920.790851</td>\n",
       "      <td>1956.346376</td>\n",
       "      <td>...</td>\n",
       "      <td>511.348602</td>\n",
       "      <td>648.663540</td>\n",
       "      <td>215.646544</td>\n",
       "      <td>106.141536</td>\n",
       "      <td>327.117846</td>\n",
       "      <td>255.878375</td>\n",
       "      <td>33.409146</td>\n",
       "      <td>51.783958</td>\n",
       "      <td>99.521433</td>\n",
       "      <td>35.625834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>1131.788826</td>\n",
       "      <td>6967.365211</td>\n",
       "      <td>1483.742969</td>\n",
       "      <td>3129.985336</td>\n",
       "      <td>4039.508270</td>\n",
       "      <td>7279.175311</td>\n",
       "      <td>548.393167</td>\n",
       "      <td>1229.505082</td>\n",
       "      <td>840.476354</td>\n",
       "      <td>2270.137854</td>\n",
       "      <td>...</td>\n",
       "      <td>834.330181</td>\n",
       "      <td>722.479803</td>\n",
       "      <td>174.624842</td>\n",
       "      <td>274.092155</td>\n",
       "      <td>227.070155</td>\n",
       "      <td>426.757816</td>\n",
       "      <td>39.401533</td>\n",
       "      <td>19.729499</td>\n",
       "      <td>204.499969</td>\n",
       "      <td>405.570029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>1249.542282</td>\n",
       "      <td>6336.327812</td>\n",
       "      <td>1682.309079</td>\n",
       "      <td>3310.299217</td>\n",
       "      <td>3405.658440</td>\n",
       "      <td>4851.091200</td>\n",
       "      <td>605.789172</td>\n",
       "      <td>1342.963058</td>\n",
       "      <td>936.662128</td>\n",
       "      <td>1556.921497</td>\n",
       "      <td>...</td>\n",
       "      <td>801.406402</td>\n",
       "      <td>840.166125</td>\n",
       "      <td>388.716115</td>\n",
       "      <td>224.278542</td>\n",
       "      <td>341.250911</td>\n",
       "      <td>391.184565</td>\n",
       "      <td>52.430741</td>\n",
       "      <td>55.930962</td>\n",
       "      <td>57.580735</td>\n",
       "      <td>55.783834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2068.879814</td>\n",
       "      <td>12320.955177</td>\n",
       "      <td>3363.803116</td>\n",
       "      <td>7130.271837</td>\n",
       "      <td>5114.775246</td>\n",
       "      <td>4708.277007</td>\n",
       "      <td>735.439866</td>\n",
       "      <td>2255.556211</td>\n",
       "      <td>1190.616647</td>\n",
       "      <td>2155.234664</td>\n",
       "      <td>...</td>\n",
       "      <td>179.338928</td>\n",
       "      <td>458.560105</td>\n",
       "      <td>176.633657</td>\n",
       "      <td>173.113855</td>\n",
       "      <td>204.092246</td>\n",
       "      <td>144.811142</td>\n",
       "      <td>38.404872</td>\n",
       "      <td>238.754637</td>\n",
       "      <td>58.509829</td>\n",
       "      <td>21.595242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>1521.974476</td>\n",
       "      <td>7939.529068</td>\n",
       "      <td>1617.871175</td>\n",
       "      <td>3901.515656</td>\n",
       "      <td>3312.011292</td>\n",
       "      <td>4698.384307</td>\n",
       "      <td>624.485605</td>\n",
       "      <td>1757.609068</td>\n",
       "      <td>898.758059</td>\n",
       "      <td>1953.322643</td>\n",
       "      <td>...</td>\n",
       "      <td>481.346338</td>\n",
       "      <td>324.645564</td>\n",
       "      <td>239.644913</td>\n",
       "      <td>192.136478</td>\n",
       "      <td>194.112303</td>\n",
       "      <td>239.867169</td>\n",
       "      <td>86.408434</td>\n",
       "      <td>87.777657</td>\n",
       "      <td>37.518908</td>\n",
       "      <td>48.619909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "61       1515.072475          6983.178795       1375.949649   \n",
       "62       1398.094013          7313.344597       1587.960468   \n",
       "63       1988.974140         13009.581123       2297.873355   \n",
       "64       1125.994175          6658.671097       1549.884335   \n",
       "65       1131.788826          6967.365211       1483.742969   \n",
       "66       1249.542282          6336.327812       1682.309079   \n",
       "67       2068.879814         12320.955177       3363.803116   \n",
       "68       1521.974476          7939.529068       1617.871175   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "61          3300.810694       5128.283432          7924.508626   \n",
       "62          3587.901392       4210.368797          4920.533738   \n",
       "63          7978.563673       4859.045952          5042.391779   \n",
       "64          3335.591949       3173.079468          4435.406722   \n",
       "65          3129.985336       4039.508270          7279.175311   \n",
       "66          3310.299217       3405.658440          4851.091200   \n",
       "67          7130.271837       5114.775246          4708.277007   \n",
       "68          3901.515656       3312.011292          4698.384307   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "61       408.537352         1281.671483       807.913327         3051.422102   \n",
       "62       616.550377         1267.683343       868.951369         1991.452901   \n",
       "63       700.489543         2181.612868      1106.766751         2452.333020   \n",
       "64       504.496611         1551.620468       920.790851         1956.346376   \n",
       "65       548.393167         1229.505082       840.476354         2270.137854   \n",
       "66       605.789172         1342.963058       936.662128         1556.921497   \n",
       "67       735.439866         2255.556211      1190.616647         2155.234664   \n",
       "68       624.485605         1757.609068       898.758059         1953.322643   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "61  ...        695.356869           878.737211       245.658037   \n",
       "62  ...        708.359579           855.753860       378.659041   \n",
       "63  ...        672.348602           473.647038       266.644731   \n",
       "64  ...        511.348602           648.663540       215.646544   \n",
       "65  ...        834.330181           722.479803       174.624842   \n",
       "66  ...        801.406402           840.166125       388.716115   \n",
       "67  ...        179.338928           458.560105       176.633657   \n",
       "68  ...        481.346338           324.645564       239.644913   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "61          151.161243       242.135232          682.921306         40.412391   \n",
       "62          324.166351       443.142210          828.935347         68.413077   \n",
       "63          128.137524       358.114895          110.865279         78.408494   \n",
       "64          106.141536       327.117846          255.878375         33.409146   \n",
       "65          274.092155       227.070155          426.757816         39.401533   \n",
       "66          224.278542       341.250911          391.184565         52.430741   \n",
       "67          173.113855       204.092246          144.811142         38.404872   \n",
       "68          192.136478       194.112303          239.867169         86.408434   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "61            26.803288       134.529380          182.648021  \n",
       "62            34.810788       147.532239          140.655081  \n",
       "63            98.780214        94.520207            4.622052  \n",
       "64            51.783958        99.521433           35.625834  \n",
       "65            19.729499       204.499969          405.570029  \n",
       "66            55.930962        57.580735           55.783834  \n",
       "67           238.754637        58.509829           21.595242  \n",
       "68            87.777657        37.518908           48.619909  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,5,:], index = list(range(61,69))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>1399.423626</td>\n",
       "      <td>7313.178795</td>\n",
       "      <td>1588.517455</td>\n",
       "      <td>3585.789715</td>\n",
       "      <td>4209.764076</td>\n",
       "      <td>4919.400759</td>\n",
       "      <td>616.728085</td>\n",
       "      <td>1267.468923</td>\n",
       "      <td>869.755772</td>\n",
       "      <td>1991.332247</td>\n",
       "      <td>...</td>\n",
       "      <td>707.953060</td>\n",
       "      <td>856.919637</td>\n",
       "      <td>378.822171</td>\n",
       "      <td>324.411636</td>\n",
       "      <td>443.122352</td>\n",
       "      <td>829.493186</td>\n",
       "      <td>68.440681</td>\n",
       "      <td>34.831050</td>\n",
       "      <td>147.469687</td>\n",
       "      <td>140.570492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>1990.445496</td>\n",
       "      <td>13010.339455</td>\n",
       "      <td>2298.527789</td>\n",
       "      <td>7976.877747</td>\n",
       "      <td>4858.847435</td>\n",
       "      <td>5041.424419</td>\n",
       "      <td>700.740908</td>\n",
       "      <td>2181.479747</td>\n",
       "      <td>1107.793384</td>\n",
       "      <td>2452.362162</td>\n",
       "      <td>...</td>\n",
       "      <td>671.955564</td>\n",
       "      <td>474.936875</td>\n",
       "      <td>266.823050</td>\n",
       "      <td>128.416868</td>\n",
       "      <td>358.129210</td>\n",
       "      <td>111.507361</td>\n",
       "      <td>78.441350</td>\n",
       "      <td>98.838510</td>\n",
       "      <td>94.472676</td>\n",
       "      <td>4.577341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>1127.325623</td>\n",
       "      <td>6658.596550</td>\n",
       "      <td>1550.442775</td>\n",
       "      <td>3333.549631</td>\n",
       "      <td>3172.531761</td>\n",
       "      <td>4434.286403</td>\n",
       "      <td>504.680831</td>\n",
       "      <td>1551.413072</td>\n",
       "      <td>921.609626</td>\n",
       "      <td>1956.245703</td>\n",
       "      <td>...</td>\n",
       "      <td>510.945170</td>\n",
       "      <td>649.827695</td>\n",
       "      <td>215.809088</td>\n",
       "      <td>106.387544</td>\n",
       "      <td>327.102414</td>\n",
       "      <td>256.437024</td>\n",
       "      <td>33.436913</td>\n",
       "      <td>51.808230</td>\n",
       "      <td>99.460070</td>\n",
       "      <td>35.545153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>1133.345657</td>\n",
       "      <td>6968.683945</td>\n",
       "      <td>1484.453675</td>\n",
       "      <td>3128.576841</td>\n",
       "      <td>4039.564697</td>\n",
       "      <td>7278.301346</td>\n",
       "      <td>548.687899</td>\n",
       "      <td>1229.420327</td>\n",
       "      <td>841.633639</td>\n",
       "      <td>2270.258729</td>\n",
       "      <td>...</td>\n",
       "      <td>833.945102</td>\n",
       "      <td>723.844492</td>\n",
       "      <td>174.810902</td>\n",
       "      <td>274.391630</td>\n",
       "      <td>227.105285</td>\n",
       "      <td>427.449984</td>\n",
       "      <td>39.437539</td>\n",
       "      <td>19.811920</td>\n",
       "      <td>204.461313</td>\n",
       "      <td>405.548851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>1250.140472</td>\n",
       "      <td>6331.410843</td>\n",
       "      <td>1682.315538</td>\n",
       "      <td>3305.987299</td>\n",
       "      <td>3403.006104</td>\n",
       "      <td>4849.076368</td>\n",
       "      <td>605.585717</td>\n",
       "      <td>1342.311159</td>\n",
       "      <td>936.320004</td>\n",
       "      <td>1556.056277</td>\n",
       "      <td>...</td>\n",
       "      <td>800.927882</td>\n",
       "      <td>840.656187</td>\n",
       "      <td>388.789646</td>\n",
       "      <td>224.341327</td>\n",
       "      <td>341.058591</td>\n",
       "      <td>391.329290</td>\n",
       "      <td>52.430166</td>\n",
       "      <td>55.757941</td>\n",
       "      <td>57.438941</td>\n",
       "      <td>55.494517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>2070.891926</td>\n",
       "      <td>12325.241699</td>\n",
       "      <td>3364.867277</td>\n",
       "      <td>7130.233957</td>\n",
       "      <td>5116.107002</td>\n",
       "      <td>4707.965277</td>\n",
       "      <td>735.976220</td>\n",
       "      <td>2255.744376</td>\n",
       "      <td>1192.501043</td>\n",
       "      <td>2155.816298</td>\n",
       "      <td>...</td>\n",
       "      <td>178.999780</td>\n",
       "      <td>460.359013</td>\n",
       "      <td>176.878686</td>\n",
       "      <td>173.530978</td>\n",
       "      <td>204.235558</td>\n",
       "      <td>145.756984</td>\n",
       "      <td>38.458370</td>\n",
       "      <td>238.957512</td>\n",
       "      <td>58.523419</td>\n",
       "      <td>21.702481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>1523.231461</td>\n",
       "      <td>7938.986023</td>\n",
       "      <td>1618.374151</td>\n",
       "      <td>3899.266331</td>\n",
       "      <td>3311.267357</td>\n",
       "      <td>4697.174537</td>\n",
       "      <td>624.631759</td>\n",
       "      <td>1757.359294</td>\n",
       "      <td>899.459951</td>\n",
       "      <td>1953.150218</td>\n",
       "      <td>...</td>\n",
       "      <td>480.936012</td>\n",
       "      <td>325.738552</td>\n",
       "      <td>239.798209</td>\n",
       "      <td>192.363426</td>\n",
       "      <td>194.080203</td>\n",
       "      <td>240.383022</td>\n",
       "      <td>86.433402</td>\n",
       "      <td>87.782879</td>\n",
       "      <td>37.449208</td>\n",
       "      <td>48.519016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>1324.325958</td>\n",
       "      <td>7647.546417</td>\n",
       "      <td>1139.441080</td>\n",
       "      <td>2944.502682</td>\n",
       "      <td>3331.498245</td>\n",
       "      <td>6829.279761</td>\n",
       "      <td>392.677045</td>\n",
       "      <td>1059.409732</td>\n",
       "      <td>931.600933</td>\n",
       "      <td>3135.235768</td>\n",
       "      <td>...</td>\n",
       "      <td>215.943009</td>\n",
       "      <td>888.825927</td>\n",
       "      <td>183.809367</td>\n",
       "      <td>139.386472</td>\n",
       "      <td>388.099902</td>\n",
       "      <td>219.438778</td>\n",
       "      <td>35.436861</td>\n",
       "      <td>70.805672</td>\n",
       "      <td>85.458658</td>\n",
       "      <td>68.543136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "69       1399.423626          7313.178795       1588.517455   \n",
       "70       1990.445496         13010.339455       2298.527789   \n",
       "71       1127.325623          6658.596550       1550.442775   \n",
       "72       1133.345657          6968.683945       1484.453675   \n",
       "73       1250.140472          6331.410843       1682.315538   \n",
       "74       2070.891926         12325.241699       3364.867277   \n",
       "75       1523.231461          7938.986023       1618.374151   \n",
       "76       1324.325958          7647.546417       1139.441080   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "69          3585.789715       4209.764076          4919.400759   \n",
       "70          7976.877747       4858.847435          5041.424419   \n",
       "71          3333.549631       3172.531761          4434.286403   \n",
       "72          3128.576841       4039.564697          7278.301346   \n",
       "73          3305.987299       3403.006104          4849.076368   \n",
       "74          7130.233957       5116.107002          4707.965277   \n",
       "75          3899.266331       3311.267357          4697.174537   \n",
       "76          2944.502682       3331.498245          6829.279761   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "69       616.728085         1267.468923       869.755772         1991.332247   \n",
       "70       700.740908         2181.479747      1107.793384         2452.362162   \n",
       "71       504.680831         1551.413072       921.609626         1956.245703   \n",
       "72       548.687899         1229.420327       841.633639         2270.258729   \n",
       "73       605.585717         1342.311159       936.320004         1556.056277   \n",
       "74       735.976220         2255.744376      1192.501043         2155.816298   \n",
       "75       624.631759         1757.359294       899.459951         1953.150218   \n",
       "76       392.677045         1059.409732       931.600933         3135.235768   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "69  ...        707.953060           856.919637       378.822171   \n",
       "70  ...        671.955564           474.936875       266.823050   \n",
       "71  ...        510.945170           649.827695       215.809088   \n",
       "72  ...        833.945102           723.844492       174.810902   \n",
       "73  ...        800.927882           840.656187       388.789646   \n",
       "74  ...        178.999780           460.359013       176.878686   \n",
       "75  ...        480.936012           325.738552       239.798209   \n",
       "76  ...        215.943009           888.825927       183.809367   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "69          324.411636       443.122352          829.493186         68.440681   \n",
       "70          128.416868       358.129210          111.507361         78.441350   \n",
       "71          106.387544       327.102414          256.437024         33.436913   \n",
       "72          274.391630       227.105285          427.449984         39.437539   \n",
       "73          224.341327       341.058591          391.329290         52.430166   \n",
       "74          173.530978       204.235558          145.756984         38.458370   \n",
       "75          192.363426       194.080203          240.383022         86.433402   \n",
       "76          139.386472       388.099902          219.438778         35.436861   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "69            34.831050       147.469687          140.570492  \n",
       "70            98.838510        94.472676            4.577341  \n",
       "71            51.808230        99.460070           35.545153  \n",
       "72            19.811920       204.461313          405.548851  \n",
       "73            55.757941        57.438941           55.494517  \n",
       "74           238.957512        58.523419           21.702481  \n",
       "75            87.782879        37.449208           48.519016  \n",
       "76            70.805672        85.458658           68.543136  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,6,:], index = list(range(69,77))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol - city</th>\n",
       "      <th>NSW - hol - noncity</th>\n",
       "      <th>VIC - hol - city</th>\n",
       "      <th>VIC - hol - noncity</th>\n",
       "      <th>QLD - hol - city</th>\n",
       "      <th>QLD - hol - noncity</th>\n",
       "      <th>SA - hol - city</th>\n",
       "      <th>SA - hol - noncity</th>\n",
       "      <th>WA - hol - city</th>\n",
       "      <th>WA - hol - noncity</th>\n",
       "      <th>...</th>\n",
       "      <th>QLD - oth - city</th>\n",
       "      <th>QLD - oth - noncity</th>\n",
       "      <th>SA - oth - city</th>\n",
       "      <th>SA - oth - noncity</th>\n",
       "      <th>WA - oth - city</th>\n",
       "      <th>WA - oth - noncity</th>\n",
       "      <th>TAS - oth - city</th>\n",
       "      <th>TAS - oth - noncity</th>\n",
       "      <th>NT - oth - city</th>\n",
       "      <th>NT - oth - noncity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>1991.178417</td>\n",
       "      <td>13010.448708</td>\n",
       "      <td>2298.833611</td>\n",
       "      <td>7975.659718</td>\n",
       "      <td>4858.513428</td>\n",
       "      <td>5040.821298</td>\n",
       "      <td>700.842434</td>\n",
       "      <td>2181.387277</td>\n",
       "      <td>1108.252820</td>\n",
       "      <td>2452.313702</td>\n",
       "      <td>...</td>\n",
       "      <td>671.719769</td>\n",
       "      <td>475.550116</td>\n",
       "      <td>266.913304</td>\n",
       "      <td>128.549465</td>\n",
       "      <td>358.114018</td>\n",
       "      <td>111.814226</td>\n",
       "      <td>78.458516</td>\n",
       "      <td>98.852058</td>\n",
       "      <td>94.417440</td>\n",
       "      <td>4.531538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>1128.200623</td>\n",
       "      <td>6659.608086</td>\n",
       "      <td>1550.843945</td>\n",
       "      <td>3332.746147</td>\n",
       "      <td>3172.596214</td>\n",
       "      <td>4433.844336</td>\n",
       "      <td>504.855207</td>\n",
       "      <td>1551.397986</td>\n",
       "      <td>922.290519</td>\n",
       "      <td>1956.343286</td>\n",
       "      <td>...</td>\n",
       "      <td>510.722101</td>\n",
       "      <td>650.567945</td>\n",
       "      <td>215.914225</td>\n",
       "      <td>106.554796</td>\n",
       "      <td>327.120797</td>\n",
       "      <td>256.828537</td>\n",
       "      <td>33.459186</td>\n",
       "      <td>51.859492</td>\n",
       "      <td>99.420466</td>\n",
       "      <td>35.538261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>1134.080750</td>\n",
       "      <td>6968.873535</td>\n",
       "      <td>1484.759497</td>\n",
       "      <td>3127.424969</td>\n",
       "      <td>4039.284256</td>\n",
       "      <td>7277.707979</td>\n",
       "      <td>548.795331</td>\n",
       "      <td>1229.332693</td>\n",
       "      <td>842.106503</td>\n",
       "      <td>2270.228482</td>\n",
       "      <td>...</td>\n",
       "      <td>833.712222</td>\n",
       "      <td>724.457143</td>\n",
       "      <td>174.900249</td>\n",
       "      <td>274.525098</td>\n",
       "      <td>227.094280</td>\n",
       "      <td>427.758199</td>\n",
       "      <td>39.454808</td>\n",
       "      <td>19.829331</td>\n",
       "      <td>204.407656</td>\n",
       "      <td>405.506493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>1251.100449</td>\n",
       "      <td>6332.960289</td>\n",
       "      <td>1682.770557</td>\n",
       "      <td>3305.451111</td>\n",
       "      <td>3403.316628</td>\n",
       "      <td>4848.722507</td>\n",
       "      <td>605.802450</td>\n",
       "      <td>1342.340063</td>\n",
       "      <td>937.130774</td>\n",
       "      <td>1556.241508</td>\n",
       "      <td>...</td>\n",
       "      <td>800.712086</td>\n",
       "      <td>841.474087</td>\n",
       "      <td>388.902118</td>\n",
       "      <td>224.529209</td>\n",
       "      <td>341.097151</td>\n",
       "      <td>391.771160</td>\n",
       "      <td>52.455435</td>\n",
       "      <td>55.833021</td>\n",
       "      <td>57.408918</td>\n",
       "      <td>55.510191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>2070.894932</td>\n",
       "      <td>12320.703255</td>\n",
       "      <td>3364.633551</td>\n",
       "      <td>7126.872774</td>\n",
       "      <td>5113.764618</td>\n",
       "      <td>4706.500644</td>\n",
       "      <td>735.700621</td>\n",
       "      <td>2255.233543</td>\n",
       "      <td>1191.816966</td>\n",
       "      <td>2155.041706</td>\n",
       "      <td>...</td>\n",
       "      <td>178.695757</td>\n",
       "      <td>460.282984</td>\n",
       "      <td>176.880890</td>\n",
       "      <td>173.478333</td>\n",
       "      <td>204.050855</td>\n",
       "      <td>145.650196</td>\n",
       "      <td>38.448165</td>\n",
       "      <td>238.779242</td>\n",
       "      <td>58.386210</td>\n",
       "      <td>21.456572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>1524.647388</td>\n",
       "      <td>7943.473694</td>\n",
       "      <td>1619.179801</td>\n",
       "      <td>3900.077284</td>\n",
       "      <td>3312.840881</td>\n",
       "      <td>4697.377930</td>\n",
       "      <td>625.089407</td>\n",
       "      <td>1757.655591</td>\n",
       "      <td>900.998351</td>\n",
       "      <td>1953.790577</td>\n",
       "      <td>...</td>\n",
       "      <td>480.764362</td>\n",
       "      <td>326.996269</td>\n",
       "      <td>239.969596</td>\n",
       "      <td>192.670226</td>\n",
       "      <td>194.226108</td>\n",
       "      <td>241.078700</td>\n",
       "      <td>86.475931</td>\n",
       "      <td>87.977988</td>\n",
       "      <td>37.472082</td>\n",
       "      <td>48.661762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>1324.986088</td>\n",
       "      <td>7647.271362</td>\n",
       "      <td>1139.691518</td>\n",
       "      <td>2943.146471</td>\n",
       "      <td>3331.022720</td>\n",
       "      <td>6828.597567</td>\n",
       "      <td>392.746462</td>\n",
       "      <td>1059.280412</td>\n",
       "      <td>931.956829</td>\n",
       "      <td>3135.134322</td>\n",
       "      <td>...</td>\n",
       "      <td>215.703475</td>\n",
       "      <td>889.366674</td>\n",
       "      <td>183.889398</td>\n",
       "      <td>139.500731</td>\n",
       "      <td>388.072268</td>\n",
       "      <td>219.703928</td>\n",
       "      <td>35.451349</td>\n",
       "      <td>70.804100</td>\n",
       "      <td>85.396646</td>\n",
       "      <td>68.480692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>1580.080917</td>\n",
       "      <td>7646.825333</td>\n",
       "      <td>1818.758044</td>\n",
       "      <td>3497.378551</td>\n",
       "      <td>4241.251030</td>\n",
       "      <td>5722.701753</td>\n",
       "      <td>553.791646</td>\n",
       "      <td>1617.329814</td>\n",
       "      <td>1214.098154</td>\n",
       "      <td>2313.218768</td>\n",
       "      <td>...</td>\n",
       "      <td>847.710164</td>\n",
       "      <td>441.455080</td>\n",
       "      <td>165.900542</td>\n",
       "      <td>164.524002</td>\n",
       "      <td>332.091767</td>\n",
       "      <td>425.760089</td>\n",
       "      <td>69.454774</td>\n",
       "      <td>39.826787</td>\n",
       "      <td>35.406263</td>\n",
       "      <td>134.504560</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol - city  NSW - hol - noncity  VIC - hol - city  \\\n",
       "77       1991.178417         13010.448708       2298.833611   \n",
       "78       1128.200623          6659.608086       1550.843945   \n",
       "79       1134.080750          6968.873535       1484.759497   \n",
       "80       1251.100449          6332.960289       1682.770557   \n",
       "81       2070.894932         12320.703255       3364.633551   \n",
       "82       1524.647388          7943.473694       1619.179801   \n",
       "83       1324.986088          7647.271362       1139.691518   \n",
       "84       1580.080917          7646.825333       1818.758044   \n",
       "\n",
       "    VIC - hol - noncity  QLD - hol - city  QLD - hol - noncity  \\\n",
       "77          7975.659718       4858.513428          5040.821298   \n",
       "78          3332.746147       3172.596214          4433.844336   \n",
       "79          3127.424969       4039.284256          7277.707979   \n",
       "80          3305.451111       3403.316628          4848.722507   \n",
       "81          7126.872774       5113.764618          4706.500644   \n",
       "82          3900.077284       3312.840881          4697.377930   \n",
       "83          2943.146471       3331.022720          6828.597567   \n",
       "84          3497.378551       4241.251030          5722.701753   \n",
       "\n",
       "    SA - hol - city  SA - hol - noncity  WA - hol - city  WA - hol - noncity  \\\n",
       "77       700.842434         2181.387277      1108.252820         2452.313702   \n",
       "78       504.855207         1551.397986       922.290519         1956.343286   \n",
       "79       548.795331         1229.332693       842.106503         2270.228482   \n",
       "80       605.802450         1342.340063       937.130774         1556.241508   \n",
       "81       735.700621         2255.233543      1191.816966         2155.041706   \n",
       "82       625.089407         1757.655591       900.998351         1953.790577   \n",
       "83       392.746462         1059.280412       931.956829         3135.134322   \n",
       "84       553.791646         1617.329814      1214.098154         2313.218768   \n",
       "\n",
       "    ...  QLD - oth - city  QLD - oth - noncity  SA - oth - city  \\\n",
       "77  ...        671.719769           475.550116       266.913304   \n",
       "78  ...        510.722101           650.567945       215.914225   \n",
       "79  ...        833.712222           724.457143       174.900249   \n",
       "80  ...        800.712086           841.474087       388.902118   \n",
       "81  ...        178.695757           460.282984       176.880890   \n",
       "82  ...        480.764362           326.996269       239.969596   \n",
       "83  ...        215.703475           889.366674       183.889398   \n",
       "84  ...        847.710164           441.455080       165.900542   \n",
       "\n",
       "    SA - oth - noncity  WA - oth - city  WA - oth - noncity  TAS - oth - city  \\\n",
       "77          128.549465       358.114018          111.814226         78.458516   \n",
       "78          106.554796       327.120797          256.828537         33.459186   \n",
       "79          274.525098       227.094280          427.758199         39.454808   \n",
       "80          224.529209       341.097151          391.771160         52.455435   \n",
       "81          173.478333       204.050855          145.650196         38.448165   \n",
       "82          192.670226       194.226108          241.078700         86.475931   \n",
       "83          139.500731       388.072268          219.703928         35.451349   \n",
       "84          164.524002       332.091767          425.760089         69.454774   \n",
       "\n",
       "    TAS - oth - noncity  NT - oth - city  NT - oth - noncity  \n",
       "77            98.852058        94.417440            4.531538  \n",
       "78            51.859492        99.420466           35.538261  \n",
       "79            19.829331       204.407656          405.506493  \n",
       "80            55.833021        57.408918           55.510191  \n",
       "81           238.779242        58.386210           21.456572  \n",
       "82            87.977988        37.472082           48.661762  \n",
       "83            70.804100        85.396646           68.480692  \n",
       "84            39.826787        35.406263          134.504560  \n",
       "\n",
       "[8 rows x 56 columns]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 2 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,7,:], index = list(range(77,85))) # forecast for next 2year\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "id": "CLuPMP-g4eee"
   },
   "outputs": [],
   "source": [
    "# Setting x-axis for visualization of plots\n",
    "x = list(range(0, 56))\n",
    "x1 = list(range(max(x)+1, max(x)+57))\n",
    "x2 = list(range(max(x1)+1, max(x1)+57))\n",
    "x3 = list(range(max(x2)+1, max(x2)+57))\n",
    "x4 = list(range(max(x3)+1, max(x3)+57))\n",
    "x5 = list(range(max(x4)+1, max(x4)+57))\n",
    "x6 = list(range(max(x5)+1, max(x5)+57))\n",
    "x7 = list(range(max(x6)+1, max(x6)+57))\n",
    "x8 = list(range(max(x7)+1, max(x7)+57))\n",
    "x9 = list(range(max(x8)+1, max(x8)+57))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 541
    },
    "id": "tLvVEGco4ljw",
    "outputId": "616e6fe1-3207-42d4-ae0d-81f4fa23de9d"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q19",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55
         ],
         "xaxis": "x",
         "y": [
          1373,
          7668,
          1657,
          3008,
          4094,
          7459,
          607,
          1203,
          758,
          2333,
          205,
          339,
          452,
          657,
          2295,
          6134,
          1986,
          2105,
          2920,
          4004,
          1231,
          673,
          740,
          998,
          155,
          254,
          322,
          149,
          1859,
          2881,
          1303,
          921,
          1206,
          1805,
          295,
          543,
          723,
          876,
          566,
          120,
          132,
          368,
          633,
          984,
          394,
          513,
          559,
          1255,
          293,
          190,
          320,
          477,
          62,
          247,
          112,
          124
         ],
         "yaxis": "y"
        },
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q20",
         "type": "scatter",
         "x": [
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111
         ],
         "xaxis": "x",
         "y": [
          1613,
          8972,
          1613,
          4093,
          4084,
          5512,
          533,
          1645,
          818,
          1833,
          309,
          714,
          197,
          854,
          2751,
          6484,
          2577,
          2573,
          2506,
          2541,
          718,
          845,
          1028,
          763,
          190,
          257,
          205,
          28,
          1354,
          2390,
          1086,
          937,
          1289,
          1389,
          370,
          479,
          487,
          1024,
          90,
          255,
          699,
          315,
          494,
          926,
          424,
          904,
          1311,
          899,
          229,
          199,
          582,
          688,
          102,
          29,
          208,
          248
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q21",
         "type": "scatter",
         "x": [
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167
         ],
         "xaxis": "x",
         "y": [
          907.0848236083984,
          7690.773468017578,
          1290.2595925331116,
          3764.0457763671875,
          2526.369171142578,
          4442.9508056640625,
          442.13074493408203,
          1677.6872310638428,
          975.1062936782837,
          2036.2011260986328,
          375.97662925720215,
          761.8352127075195,
          229.3461685180664,
          296.08631896972656,
          2135.4542846679688,
          5082.714950561523,
          1804.2593231201172,
          2902.1671829223633,
          2882.8058166503906,
          2925.104782104492,
          617.54736328125,
          1006.7321147918701,
          1057.7719612121582,
          634.5922622680664,
          260.1829662322998,
          281.31689071655273,
          144.85800170898438,
          64.45501518249512,
          1367.4692764282227,
          1939.2577056884766,
          1544.3409967422485,
          657.3080368041992,
          884.2452964782715,
          1254.522216796875,
          458.7921199798584,
          331.4907341003418,
          373.1978225708008,
          521.5506134033203,
          88.41184997558594,
          74.66444778442383,
          100.93960523605347,
          232.51622009277344,
          567.5990676879883,
          767.2556838989258,
          252.64439582824707,
          272.096981048584,
          498.3705863952637,
          365.53882598876953,
          326.8853120803833,
          116.06680154800415,
          231.8042507171631,
          -126.34384155273438,
          244.49771404266357,
          157.0489206314087,
          23.974971771240234,
          64.70155334472656
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q22",
         "type": "scatter",
         "x": [
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          188,
          189,
          190,
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223
         ],
         "xaxis": "x",
         "y": [
          801.6575927734375,
          7128.461158752441,
          1129.0066514015198,
          3118.9749755859375,
          3807.837921142578,
          7668.200332641602,
          482.02220153808594,
          1212.458532333374,
          862.8424921035767,
          2323.005630493164,
          147.87027549743652,
          152.61849212646484,
          501.17415618896484,
          555.9347457885742,
          2209.2400436401367,
          5300.047500610352,
          1556.8255310058594,
          1914.8301086425781,
          2539.554130554199,
          3766.7861328125,
          623.3475341796875,
          741.6445693969727,
          865.6645164489746,
          1290.5182914733887,
          103.08819198608398,
          137.1852149963379,
          156.80538177490234,
          58.39127731323242,
          1452.2253684997559,
          1783.0778198242188,
          1268.2288818359375,
          632.235013961792,
          1356.1208229064941,
          1264.2845916748047,
          676.676736831665,
          368.4063186645508,
          343.0673179626465,
          861.3184814453125,
          70.28459167480469,
          151.6175880432129,
          91.92024850845337,
          135.3342514038086,
          370.49573516845703,
          807.1042785644531,
          243.5517578125,
          382.9901809692383,
          430.25121307373047,
          970.2208557128906,
          174.84441804885864,
          305.0116901397705,
          500.76044845581055,
          490.33404541015625,
          48.47871494293213,
          109.99320888519287,
          239.89456176757812,
          305.5970039367676
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q22",
         "type": "scatter",
         "x": [
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          261,
          262,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          270,
          271,
          272,
          273,
          274,
          275,
          276,
          277,
          278,
          279
         ],
         "xaxis": "x",
         "y": [
          1193.367691040039,
          7648.713600158691,
          1869.035774230957,
          2788.3488159179688,
          3953.0559844970703,
          5486.092666625977,
          301.4516258239746,
          1572.3655014038086,
          866.8842725753784,
          1843.8089294433594,
          360.2950859069824,
          682.4740371704102,
          181.8561019897461,
          145.5377655029297,
          2447.0844802856445,
          6114.702560424805,
          2098.5716247558594,
          3082.166748046875,
          2548.5777893066406,
          2528.0708618164062,
          676.1383209228516,
          812.988260269165,
          1083.0801887512207,
          1138.8074340820312,
          203.46216773986816,
          613.7123794555664,
          70.01448440551758,
          64.65113258361816,
          1368.2045059204102,
          2151.7904510498047,
          850.6741905212402,
          622.5155391693115,
          773.6219863891602,
          1540.2558212280273,
          409.1278705596924,
          430.7474708557129,
          352.60602951049805,
          1125.2656555175781,
          78.80902862548828,
          85.8002700805664,
          158.00364303588867,
          323.0185241699219,
          392.91909408569336,
          628.7103271484375,
          225.92708778381348,
          321.41765213012695,
          383.71827697753906,
          1245.4826965332031,
          201.00506496429443,
          191.22603130340576,
          313.94786262512207,
          493.6187438964844,
          159.55264949798584,
          -3.780336380004883,
          16.21704864501953,
          93.01263427734375
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q23",
         "type": "scatter",
         "x": [
          280,
          281,
          282,
          283,
          284,
          285,
          286,
          287,
          288,
          289,
          290,
          291,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          306,
          307,
          308,
          309,
          310,
          311,
          312,
          313,
          314,
          315,
          316,
          317,
          318,
          319,
          320,
          321,
          322,
          323,
          324,
          325,
          326,
          327,
          328,
          329,
          330,
          331,
          332,
          333,
          334,
          335
         ],
         "xaxis": "x",
         "y": [
          1491.194808959961,
          11549.158981323242,
          1987.9292044639587,
          7055.884094238281,
          4015.823944091797,
          4554.784042358398,
          622.4048767089844,
          2521.266121864319,
          1346.779956817627,
          2826.7208251953125,
          805.2535133361816,
          1455.3791732788086,
          62.79088592529297,
          17.477325439453125,
          2706.9980697631836,
          7831.438583374023,
          2181.4034881591797,
          3811.0334396362305,
          3189.4720916748047,
          3043.9300994873047,
          1399.0536651611328,
          1085.950029373169,
          1417.0374908447266,
          917.7769622802734,
          714.4232311248779,
          962.6567420959473,
          31.9921875,
          72.62370681762695,
          1330.095802307129,
          1787.713851928711,
          978.6274452209473,
          557.4855251312256,
          1067.5710334777832,
          975.1661605834961,
          463.0815773010254,
          333.71093368530273,
          165.55424118041992,
          449.18182373046875,
          -6.2374267578125,
          195.78122520446777,
          323.99626541137695,
          149.94347763061523,
          256.8787612915039,
          656.6464385986328,
          291.889986038208,
          392.3738136291504,
          422.6674385070801,
          193.36394500732422,
          175.9870171546936,
          179.20550155639648,
          330.9286422729492,
          1.4927825927734375,
          92.54454326629639,
          86.19780254364014,
          -5.814720153808594,
          -27.031402587890625
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Visualization of previous 2 quarters vs next 4 quarters - forecasting"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "examples"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>actual features</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>predictions features</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"84a15637-8b58-44a6-8674-c2999262ad51\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"84a15637-8b58-44a6-8674-c2999262ad51\")) {                    Plotly.newPlot(                        \"84a15637-8b58-44a6-8674-c2999262ad51\",                        [{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q19\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],\"y\":[1373,7668,1657,3008,4094,7459,607,1203,758,2333,205,339,452,657,2295,6134,1986,2105,2920,4004,1231,673,740,998,155,254,322,149,1859,2881,1303,921,1206,1805,295,543,723,876,566,120,132,368,633,984,394,513,559,1255,293,190,320,477,62,247,112,124],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q20\",\"x\":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],\"y\":[1613,8972,1613,4093,4084,5512,533,1645,818,1833,309,714,197,854,2751,6484,2577,2573,2506,2541,718,845,1028,763,190,257,205,28,1354,2390,1086,937,1289,1389,370,479,487,1024,90,255,699,315,494,926,424,904,1311,899,229,199,582,688,102,29,208,248],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q21\",\"x\":[112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],\"y\":[907.0848236083984,7690.773468017578,1290.2595925331116,3764.0457763671875,2526.369171142578,4442.9508056640625,442.13074493408203,1677.6872310638428,975.1062936782837,2036.2011260986328,375.97662925720215,761.8352127075195,229.3461685180664,296.08631896972656,2135.4542846679688,5082.714950561523,1804.2593231201172,2902.1671829223633,2882.8058166503906,2925.104782104492,617.54736328125,1006.7321147918701,1057.7719612121582,634.5922622680664,260.1829662322998,281.31689071655273,144.85800170898438,64.45501518249512,1367.4692764282227,1939.2577056884766,1544.3409967422485,657.3080368041992,884.2452964782715,1254.522216796875,458.7921199798584,331.4907341003418,373.1978225708008,521.5506134033203,88.41184997558594,74.66444778442383,100.93960523605347,232.51622009277344,567.5990676879883,767.2556838989258,252.64439582824707,272.096981048584,498.3705863952637,365.53882598876953,326.8853120803833,116.06680154800415,231.8042507171631,-126.34384155273438,244.49771404266357,157.0489206314087,23.974971771240234,64.70155334472656],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q22\",\"x\":[168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223],\"y\":[801.6575927734375,7128.461158752441,1129.0066514015198,3118.9749755859375,3807.837921142578,7668.200332641602,482.02220153808594,1212.458532333374,862.8424921035767,2323.005630493164,147.87027549743652,152.61849212646484,501.17415618896484,555.9347457885742,2209.2400436401367,5300.047500610352,1556.8255310058594,1914.8301086425781,2539.554130554199,3766.7861328125,623.3475341796875,741.6445693969727,865.6645164489746,1290.5182914733887,103.08819198608398,137.1852149963379,156.80538177490234,58.39127731323242,1452.2253684997559,1783.0778198242188,1268.2288818359375,632.235013961792,1356.1208229064941,1264.2845916748047,676.676736831665,368.4063186645508,343.0673179626465,861.3184814453125,70.28459167480469,151.6175880432129,91.92024850845337,135.3342514038086,370.49573516845703,807.1042785644531,243.5517578125,382.9901809692383,430.25121307373047,970.2208557128906,174.84441804885864,305.0116901397705,500.76044845581055,490.33404541015625,48.47871494293213,109.99320888519287,239.89456176757812,305.5970039367676],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q22\",\"x\":[224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],\"y\":[1193.367691040039,7648.713600158691,1869.035774230957,2788.3488159179688,3953.0559844970703,5486.092666625977,301.4516258239746,1572.3655014038086,866.8842725753784,1843.8089294433594,360.2950859069824,682.4740371704102,181.8561019897461,145.5377655029297,2447.0844802856445,6114.702560424805,2098.5716247558594,3082.166748046875,2548.5777893066406,2528.0708618164062,676.1383209228516,812.988260269165,1083.0801887512207,1138.8074340820312,203.46216773986816,613.7123794555664,70.01448440551758,64.65113258361816,1368.2045059204102,2151.7904510498047,850.6741905212402,622.5155391693115,773.6219863891602,1540.2558212280273,409.1278705596924,430.7474708557129,352.60602951049805,1125.2656555175781,78.80902862548828,85.8002700805664,158.00364303588867,323.0185241699219,392.91909408569336,628.7103271484375,225.92708778381348,321.41765213012695,383.71827697753906,1245.4826965332031,201.00506496429443,191.22603130340576,313.94786262512207,493.6187438964844,159.55264949798584,-3.780336380004883,16.21704864501953,93.01263427734375],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q23\",\"x\":[280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335],\"y\":[1491.194808959961,11549.158981323242,1987.9292044639587,7055.884094238281,4015.823944091797,4554.784042358398,622.4048767089844,2521.266121864319,1346.779956817627,2826.7208251953125,805.2535133361816,1455.3791732788086,62.79088592529297,17.477325439453125,2706.9980697631836,7831.438583374023,2181.4034881591797,3811.0334396362305,3189.4720916748047,3043.9300994873047,1399.0536651611328,1085.950029373169,1417.0374908447266,917.7769622802734,714.4232311248779,962.6567420959473,31.9921875,72.62370681762695,1330.095802307129,1787.713851928711,978.6274452209473,557.4855251312256,1067.5710334777832,975.1661605834961,463.0815773010254,333.71093368530273,165.55424118041992,449.18182373046875,-6.2374267578125,195.78122520446777,323.99626541137695,149.94347763061523,256.8787612915039,656.6464385986328,291.889986038208,392.3738136291504,422.6674385070801,193.36394500732422,175.9870171546936,179.20550155639648,330.9286422729492,1.4927825927734375,92.54454326629639,86.19780254364014,-5.814720153808594,-27.031402587890625],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"examples\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>actual features</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>predictions features</b>\"}},\"title\":{\"text\":\"Visualization of previous 2 quarters vs next 4 quarters - forecasting\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('84a15637-8b58-44a6-8674-c2999262ad51');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "prev_val1 = first_daily_df[:20].values[-2] # Quarter No 19 values\n",
    "prev_val2 = first_daily_df[:20].values[-1] # Quarter No 20 values\n",
    "\n",
    "forc_val1 = pred_aus[:,0,:][0] # Predicted # Quarter No 21 values\n",
    "forc_val2 = pred_aus[:,0,:][1] # Predicted # Quarter No 22 values\n",
    "forc_val3 = pred_aus[:,0,:][2] # Predicted # Quarter No 23 values\n",
    "forc_val4 = pred_aus[:,0,:][3] # Predicted # Quarter No 24 values\n",
    "# WE can have a forecast upto 36 quarters which we can compare\n",
    "# after that we can use the last forecast one to make even more!\n",
    "\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(x = x, y=prev_val1, name=\"Train - Q19\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x1, y=prev_val2, name=\"Train - Q20\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x2, y=forc_val1, name=\"Forecast - Q21\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x3, y=forc_val2, name=\"Forecast - Q22\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x4, y=forc_val3, name=\"Forecast - Q22\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x5, y=forc_val4, name=\"Forecast - Q23\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "#can be forecasted upto 36 quarters!\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Visualization of previous 2 quarters vs next 4 quarters - forecasting\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"examples\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>actual features</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>predictions features</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BkPV9O-iP_JB"
   },
   "source": [
    "**Level 2 (middle):** \n",
    "\n",
    "Total visitors according to a state visit, with a total of 28 state visits;\n",
    "\n",
    "# Taking the next columns from 56-84"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "DDNCimDVE1H5",
    "outputId": "a35d52f1-b9b3-4d8a-c463-4667d6ec5c98"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol</th>\n",
       "      <th>VIC - hol</th>\n",
       "      <th>QLD - hol</th>\n",
       "      <th>SA - hol</th>\n",
       "      <th>WA - hol</th>\n",
       "      <th>TAS - hol</th>\n",
       "      <th>NT - hol</th>\n",
       "      <th>NSW - vfr</th>\n",
       "      <th>VIC - vfr</th>\n",
       "      <th>QLD - vfr</th>\n",
       "      <th>...</th>\n",
       "      <th>WA - bus</th>\n",
       "      <th>TAS - bus</th>\n",
       "      <th>NT - bus</th>\n",
       "      <th>NSW - oth</th>\n",
       "      <th>VIC - oth</th>\n",
       "      <th>QLD - oth</th>\n",
       "      <th>SA - oth</th>\n",
       "      <th>WA - oth</th>\n",
       "      <th>TAS - oth</th>\n",
       "      <th>NT - oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-6562.0</td>\n",
       "      <td>-4387.0</td>\n",
       "      <td>-2768.0</td>\n",
       "      <td>-1154.0</td>\n",
       "      <td>-995.0</td>\n",
       "      <td>-1004.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>-1569.0</td>\n",
       "      <td>-1886.0</td>\n",
       "      <td>-388.0</td>\n",
       "      <td>...</td>\n",
       "      <td>637.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>332.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-2117.0</td>\n",
       "      <td>-965.0</td>\n",
       "      <td>5423.0</td>\n",
       "      <td>-366.0</td>\n",
       "      <td>944.0</td>\n",
       "      <td>-640.0</td>\n",
       "      <td>866.0</td>\n",
       "      <td>-552.0</td>\n",
       "      <td>-296.0</td>\n",
       "      <td>587.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-483.0</td>\n",
       "      <td>-70.0</td>\n",
       "      <td>1228.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>-106.0</td>\n",
       "      <td>595.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>1277.0</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1748.0</td>\n",
       "      <td>421.0</td>\n",
       "      <td>-3624.0</td>\n",
       "      <td>701.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>862.0</td>\n",
       "      <td>-950.0</td>\n",
       "      <td>1026.0</td>\n",
       "      <td>1279.0</td>\n",
       "      <td>-1048.0</td>\n",
       "      <td>...</td>\n",
       "      <td>231.0</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>-1133.0</td>\n",
       "      <td>469.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>-685.0</td>\n",
       "      <td>-258.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>137.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5494.0</td>\n",
       "      <td>5477.0</td>\n",
       "      <td>1938.0</td>\n",
       "      <td>753.0</td>\n",
       "      <td>726.0</td>\n",
       "      <td>793.0</td>\n",
       "      <td>-201.0</td>\n",
       "      <td>2083.0</td>\n",
       "      <td>1062.0</td>\n",
       "      <td>1195.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-768.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>-20.0</td>\n",
       "      <td>-918.0</td>\n",
       "      <td>-48.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>-274.0</td>\n",
       "      <td>-1359.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>-563.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-6312.0</td>\n",
       "      <td>-5117.0</td>\n",
       "      <td>-1959.0</td>\n",
       "      <td>-804.0</td>\n",
       "      <td>-382.0</td>\n",
       "      <td>-1354.0</td>\n",
       "      <td>577.0</td>\n",
       "      <td>-3273.0</td>\n",
       "      <td>-2604.0</td>\n",
       "      <td>-1060.0</td>\n",
       "      <td>...</td>\n",
       "      <td>137.0</td>\n",
       "      <td>-43.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>390.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>-96.0</td>\n",
       "      <td>291.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-575.0</td>\n",
       "      <td>-737.0</td>\n",
       "      <td>4465.0</td>\n",
       "      <td>-507.0</td>\n",
       "      <td>-176.0</td>\n",
       "      <td>-17.0</td>\n",
       "      <td>728.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>-159.0</td>\n",
       "      <td>820.0</td>\n",
       "      <td>...</td>\n",
       "      <td>388.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>-243.0</td>\n",
       "      <td>-201.0</td>\n",
       "      <td>1881.0</td>\n",
       "      <td>-225.0</td>\n",
       "      <td>503.0</td>\n",
       "      <td>-85.0</td>\n",
       "      <td>122.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1162.0</td>\n",
       "      <td>-330.0</td>\n",
       "      <td>-2901.0</td>\n",
       "      <td>228.0</td>\n",
       "      <td>-997.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>-865.0</td>\n",
       "      <td>1516.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>-583.0</td>\n",
       "      <td>...</td>\n",
       "      <td>71.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>-1457.0</td>\n",
       "      <td>405.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5913.0</td>\n",
       "      <td>5198.0</td>\n",
       "      <td>425.0</td>\n",
       "      <td>1342.0</td>\n",
       "      <td>2399.0</td>\n",
       "      <td>678.0</td>\n",
       "      <td>-43.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2131.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-998.0</td>\n",
       "      <td>-110.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>-906.0</td>\n",
       "      <td>424.0</td>\n",
       "      <td>-456.0</td>\n",
       "      <td>-222.0</td>\n",
       "      <td>-236.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>-269.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-6543.0</td>\n",
       "      <td>-4214.0</td>\n",
       "      <td>-1513.0</td>\n",
       "      <td>-1437.0</td>\n",
       "      <td>-1807.0</td>\n",
       "      <td>-764.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>-1801.0</td>\n",
       "      <td>-1870.0</td>\n",
       "      <td>-268.0</td>\n",
       "      <td>...</td>\n",
       "      <td>593.0</td>\n",
       "      <td>-47.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>-228.0</td>\n",
       "      <td>-225.0</td>\n",
       "      <td>-340.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-120.0</td>\n",
       "      <td>-91.0</td>\n",
       "      <td>-7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>597.0</td>\n",
       "      <td>-1015.0</td>\n",
       "      <td>2238.0</td>\n",
       "      <td>754.0</td>\n",
       "      <td>-206.0</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>979.0</td>\n",
       "      <td>-183.0</td>\n",
       "      <td>-440.0</td>\n",
       "      <td>1240.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-88.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>-183.0</td>\n",
       "      <td>252.0</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>1154.0</td>\n",
       "      <td>-104.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>842.0</td>\n",
       "      <td>695.0</td>\n",
       "      <td>-2115.0</td>\n",
       "      <td>-626.0</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>354.0</td>\n",
       "      <td>-870.0</td>\n",
       "      <td>1584.0</td>\n",
       "      <td>868.0</td>\n",
       "      <td>-759.0</td>\n",
       "      <td>...</td>\n",
       "      <td>746.0</td>\n",
       "      <td>-33.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>-113.0</td>\n",
       "      <td>-25.0</td>\n",
       "      <td>-364.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3789.0</td>\n",
       "      <td>5749.0</td>\n",
       "      <td>872.0</td>\n",
       "      <td>1065.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>720.0</td>\n",
       "      <td>-578.0</td>\n",
       "      <td>442.0</td>\n",
       "      <td>810.0</td>\n",
       "      <td>-139.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-925.0</td>\n",
       "      <td>-69.0</td>\n",
       "      <td>-176.0</td>\n",
       "      <td>-513.0</td>\n",
       "      <td>-67.0</td>\n",
       "      <td>-840.0</td>\n",
       "      <td>-81.0</td>\n",
       "      <td>-212.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>-256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-5086.0</td>\n",
       "      <td>-5079.0</td>\n",
       "      <td>-1094.0</td>\n",
       "      <td>-1000.0</td>\n",
       "      <td>468.0</td>\n",
       "      <td>-782.0</td>\n",
       "      <td>751.0</td>\n",
       "      <td>-494.0</td>\n",
       "      <td>-1411.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>...</td>\n",
       "      <td>415.0</td>\n",
       "      <td>-14.0</td>\n",
       "      <td>448.0</td>\n",
       "      <td>567.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>-61.0</td>\n",
       "      <td>114.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>-1074.0</td>\n",
       "      <td>-1304.0</td>\n",
       "      <td>2959.0</td>\n",
       "      <td>-323.0</td>\n",
       "      <td>-191.0</td>\n",
       "      <td>-482.0</td>\n",
       "      <td>424.0</td>\n",
       "      <td>-427.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>637.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>-278.0</td>\n",
       "      <td>-821.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>343.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-129.0</td>\n",
       "      <td>305.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1593.0</td>\n",
       "      <td>351.0</td>\n",
       "      <td>-1027.0</td>\n",
       "      <td>457.0</td>\n",
       "      <td>-685.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>-1035.0</td>\n",
       "      <td>-597.0</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>-990.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-53.0</td>\n",
       "      <td>-26.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>623.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>267.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1287.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>-25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4528.0</td>\n",
       "      <td>4500.0</td>\n",
       "      <td>666.0</td>\n",
       "      <td>499.0</td>\n",
       "      <td>1440.0</td>\n",
       "      <td>1425.0</td>\n",
       "      <td>-207.0</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>423.0</td>\n",
       "      <td>...</td>\n",
       "      <td>287.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>-208.0</td>\n",
       "      <td>-465.0</td>\n",
       "      <td>270.0</td>\n",
       "      <td>-635.0</td>\n",
       "      <td>-205.0</td>\n",
       "      <td>-1329.0</td>\n",
       "      <td>-81.0</td>\n",
       "      <td>-396.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>-5514.0</td>\n",
       "      <td>-4255.0</td>\n",
       "      <td>-3740.0</td>\n",
       "      <td>-562.0</td>\n",
       "      <td>-1320.0</td>\n",
       "      <td>-1328.0</td>\n",
       "      <td>730.0</td>\n",
       "      <td>-945.0</td>\n",
       "      <td>-1436.0</td>\n",
       "      <td>-1151.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-267.0</td>\n",
       "      <td>-112.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>-628.0</td>\n",
       "      <td>-392.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>-94.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>-431.0</td>\n",
       "      <td>-735.0</td>\n",
       "      <td>4230.0</td>\n",
       "      <td>-299.0</td>\n",
       "      <td>243.0</td>\n",
       "      <td>-299.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>483.0</td>\n",
       "      <td>-508.0</td>\n",
       "      <td>3059.0</td>\n",
       "      <td>...</td>\n",
       "      <td>188.0</td>\n",
       "      <td>422.0</td>\n",
       "      <td>-81.0</td>\n",
       "      <td>348.0</td>\n",
       "      <td>327.0</td>\n",
       "      <td>1083.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>417.0</td>\n",
       "      <td>218.0</td>\n",
       "      <td>141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1544.0</td>\n",
       "      <td>1041.0</td>\n",
       "      <td>-1957.0</td>\n",
       "      <td>368.0</td>\n",
       "      <td>-440.0</td>\n",
       "      <td>479.0</td>\n",
       "      <td>-58.0</td>\n",
       "      <td>806.0</td>\n",
       "      <td>1059.0</td>\n",
       "      <td>-1877.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-88.0</td>\n",
       "      <td>-341.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>-197.0</td>\n",
       "      <td>421.0</td>\n",
       "      <td>396.0</td>\n",
       "      <td>-55.0</td>\n",
       "      <td>473.0</td>\n",
       "      <td>-178.0</td>\n",
       "      <td>220.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol  VIC - hol  QLD - hol  SA - hol  WA - hol  TAS - hol  NT - hol  \\\n",
       "0         NaN        NaN        NaN       NaN       NaN        NaN       NaN   \n",
       "1     -6562.0    -4387.0    -2768.0   -1154.0    -995.0    -1004.0     311.0   \n",
       "2     -2117.0     -965.0     5423.0    -366.0     944.0     -640.0     866.0   \n",
       "3      1748.0      421.0    -3624.0     701.0     163.0      862.0    -950.0   \n",
       "4      5494.0     5477.0     1938.0     753.0     726.0      793.0    -201.0   \n",
       "5     -6312.0    -5117.0    -1959.0    -804.0    -382.0    -1354.0     577.0   \n",
       "6      -575.0     -737.0     4465.0    -507.0    -176.0      -17.0     728.0   \n",
       "7      1162.0     -330.0    -2901.0     228.0    -997.0      198.0    -865.0   \n",
       "8      5913.0     5198.0      425.0    1342.0    2399.0      678.0     -43.0   \n",
       "9     -6543.0    -4214.0    -1513.0   -1437.0   -1807.0     -764.0     100.0   \n",
       "10      597.0    -1015.0     2238.0     754.0    -206.0      -42.0     979.0   \n",
       "11      842.0      695.0    -2115.0    -626.0    -105.0      354.0    -870.0   \n",
       "12     3789.0     5749.0      872.0    1065.0     123.0      720.0    -578.0   \n",
       "13    -5086.0    -5079.0    -1094.0   -1000.0     468.0     -782.0     751.0   \n",
       "14    -1074.0    -1304.0     2959.0    -323.0    -191.0     -482.0     424.0   \n",
       "15     1593.0      351.0    -1027.0     457.0    -685.0      124.0   -1035.0   \n",
       "16     4528.0     4500.0      666.0     499.0    1440.0     1425.0    -207.0   \n",
       "17    -5514.0    -4255.0    -3740.0    -562.0   -1320.0    -1328.0     730.0   \n",
       "18     -431.0     -735.0     4230.0    -299.0     243.0     -299.0     205.0   \n",
       "19     1544.0     1041.0    -1957.0     368.0    -440.0      479.0     -58.0   \n",
       "\n",
       "    NSW - vfr  VIC - vfr  QLD - vfr  ...  WA - bus  TAS - bus  NT - bus  \\\n",
       "0         NaN        NaN        NaN  ...       NaN        NaN       NaN   \n",
       "1     -1569.0    -1886.0     -388.0  ...     637.0      150.0      92.0   \n",
       "2      -552.0     -296.0      587.0  ...    -483.0      -70.0    1228.0   \n",
       "3      1026.0     1279.0    -1048.0  ...     231.0       -5.0   -1133.0   \n",
       "4      2083.0     1062.0     1195.0  ...    -768.0       37.0     -20.0   \n",
       "5     -3273.0    -2604.0    -1060.0  ...     137.0      -43.0      40.0   \n",
       "6        75.0     -159.0      820.0  ...     388.0       82.0      -7.0   \n",
       "7      1516.0      277.0     -583.0  ...      71.0       -7.0    -105.0   \n",
       "8        65.0     2131.0        0.0  ...    -998.0     -110.0      87.0   \n",
       "9     -1801.0    -1870.0     -268.0  ...     593.0      -47.0     178.0   \n",
       "10     -183.0     -440.0     1240.0  ...     -88.0      112.0    -183.0   \n",
       "11     1584.0      868.0     -759.0  ...     746.0      -33.0     145.0   \n",
       "12      442.0      810.0     -139.0  ...    -925.0      -69.0    -176.0   \n",
       "13     -494.0    -1411.0       59.0  ...     415.0      -14.0     448.0   \n",
       "14     -427.0       29.0      637.0  ...      82.0       93.0    -278.0   \n",
       "15     -597.0     1248.0     -990.0  ...     -53.0      -26.0      21.0   \n",
       "16     1598.0     1004.0      423.0  ...     287.0      103.0    -208.0   \n",
       "17     -945.0    -1436.0    -1151.0  ...    -267.0     -112.0     236.0   \n",
       "18      483.0     -508.0     3059.0  ...     188.0      422.0     -81.0   \n",
       "19      806.0     1059.0    -1877.0  ...     -88.0     -341.0     514.0   \n",
       "\n",
       "    NSW - oth  VIC - oth  QLD - oth  SA - oth  WA - oth  TAS - oth  NT - oth  \n",
       "0         NaN        NaN        NaN       NaN       NaN        NaN       NaN  \n",
       "1       332.0       85.0      137.0      46.0      64.0       -3.0      65.0  \n",
       "2       195.0     -106.0      595.0     349.0    1277.0      -42.0     380.0  \n",
       "3       469.0      160.0     -685.0    -258.0       3.0       36.0     137.0  \n",
       "4      -918.0      -48.0      266.0    -274.0   -1359.0       46.0    -563.0  \n",
       "5       390.0      165.0      -96.0     291.0      96.0       23.0      73.0  \n",
       "6      -243.0     -201.0     1881.0    -225.0     503.0      -85.0     122.0  \n",
       "7      1216.0        5.0    -1457.0     405.0      78.0       15.0     105.0  \n",
       "8      -906.0      424.0     -456.0    -222.0    -236.0       81.0    -269.0  \n",
       "9      -228.0     -225.0     -340.0       3.0    -120.0      -91.0      -7.0  \n",
       "10      252.0      -42.0     1154.0    -104.0     155.0       18.0     562.0  \n",
       "11      257.0       64.0      171.0      34.0    -113.0      -25.0    -364.0  \n",
       "12     -513.0      -67.0     -840.0     -81.0    -212.0      176.0    -256.0  \n",
       "13      567.0       80.0      116.0     185.0     178.0      -61.0     114.0  \n",
       "14     -821.0      118.0      343.0      13.0      -3.0     -129.0     305.0  \n",
       "15      623.0       59.0      267.0     113.0    1287.0      112.0     -25.0  \n",
       "16     -465.0      270.0     -635.0    -205.0   -1329.0      -81.0    -396.0  \n",
       "17      156.0     -628.0     -392.0     103.0     -94.0        1.0      69.0  \n",
       "18      348.0      327.0     1083.0      -7.0     417.0      218.0     141.0  \n",
       "19     -197.0      421.0      396.0     -55.0     473.0     -178.0     220.0  \n",
       "\n",
       "[20 rows x 28 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_daily_df=df.iloc[:,56:84]\n",
    "difference=first_daily_df.diff()\n",
    "difference[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5KT1djiJP0Ly",
    "outputId": "8dcc23aa-1fec-4c92-a124-2371e897699b"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:19: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-26-4f396ef33d03>:27: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Features\n",
    "n_past = 1\n",
    "n_future = 1\n",
    "no_of_features = 28 # now we have taken 28 features\n",
    "\n",
    "#Spltting first 20 quarters for training and remaining for testing\n",
    "train_dataF,test_dataF = difference[0:20], difference[20:]  \n",
    "\n",
    "#Scaling the values for faster training of the models.\n",
    "train = train_dataF\n",
    "scalers={}\n",
    "\n",
    "for i in train_dataF.columns:\n",
    "    #MixMaxScler converts into [0 1]\n",
    "    scaler = MinMaxScaler(feature_range=(0,1))\n",
    "    s_s = scaler.fit_transform(train[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+ i] = scaler\n",
    "    train[i]=s_s\n",
    "\n",
    "test = test_dataF\n",
    "for i in train_dataF.columns:\n",
    "    scaler = scalers['scaler_'+i]\n",
    "    s_s = scaler.transform(test[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+i] = scaler\n",
    "    test[i]=s_s\n",
    "\n",
    "\n",
    "\n",
    "X_train, y_train = split_series(train.values,n_past, n_future)\n",
    "X_train = X_train.reshape((X_train.shape[0], X_train.shape[1],no_of_features))\n",
    "y_train = y_train.reshape((y_train.shape[0], y_train.shape[1], no_of_features))\n",
    "where_are_NaNs = np.isnan(X_train)\n",
    "X_train[where_are_NaNs] = 0\n",
    "\n",
    "X_test, y_test = split_series(test.values,n_past, n_future)\n",
    "X_test = X_test.reshape((X_test.shape[0], X_test.shape[1],no_of_features))\n",
    "y_test = y_test.reshape((y_test.shape[0], y_test.shape[1], no_of_features))\n",
    "#print(y_train,X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "pe9eBSK1AF4P",
    "outputId": "c0dad6ea-4bdb-41c1-8c26-6827b4079b75"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(19, 1, 28)\n",
      "(15, 1, 28)\n"
     ]
    }
   ],
   "source": [
    "#Shape of our training and testing data without zero padding\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "#Here we see that we now have 28 columns in our training/testing input data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "D47hQsUkABgC",
    "outputId": "25f054ef-1d2b-4dd1-8ac0-123263631de1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(19, 1, 56)\n",
      "(19, 1, 28)\n",
      "(15, 1, 56)\n",
      "(15, 1, 28)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(35, 1, 28)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Padding zeros to overcome the dimension errors\n",
    "\n",
    "#Beacuse we need to need have 56 columns to re-use the aus(1step).h5 [model no 1] \n",
    "\n",
    "# So we pad 28 columns of zeros (z_train) to our data using concatenate function\n",
    "z_train=np.zeros((20-n_future,n_past,28))\n",
    "X_train = np.concatenate([X_train, z_train], -1)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "z_test=np.zeros((16-n_future,n_past,28))\n",
    "X_test = np.concatenate([X_test, z_test], -1)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "\n",
    "#Splitting the data for testing wrt past and future so we get (35 examples here)\n",
    "newdataX,newdatay=split_series(first_daily_df.values,n_past, n_future)\n",
    "newdatay = newdatay[20:, :]\n",
    "newdataX.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bhF3_PG-NY6a",
    "outputId": "3fe3514e-91d9-42dc-ddc9-e9efbab6a045"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_input (InputLayer)     [(None, 1, 56)]           0         \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 1, 10)             2680      \n",
      "                                                                 \n",
      " lstm_1 (LSTM)               (None, 7)                 504       \n",
      "                                                                 \n",
      " repeat_vector (RepeatVector  (None, 1, 7)             0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " lstm_2 (LSTM)               (None, 1, 7)              420       \n",
      "                                                                 \n",
      " lstm_3 (LSTM)               (None, 1, 10)             720       \n",
      "                                                                 \n",
      " time_distributed (TimeDistr  (None, 1, 56)            616       \n",
      " ibuted)                                                         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1, 28)             1596      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 6,536\n",
      "Trainable params: 2,212\n",
      "Non-trainable params: 4,324\n",
      "_________________________________________________________________\n",
      "Epoch 1/250\n",
      "1/1 - 23s - loss: 0.7536 - val_loss: 0.7160 - 23s/epoch - 23s/step\n",
      "Epoch 2/250\n",
      "1/1 - 0s - loss: 0.7102 - val_loss: 0.6734 - 97ms/epoch - 97ms/step\n",
      "Epoch 3/250\n",
      "1/1 - 0s - loss: 0.6689 - val_loss: 0.6330 - 87ms/epoch - 87ms/step\n",
      "Epoch 4/250\n",
      "1/1 - 0s - loss: 0.6297 - val_loss: 0.5947 - 83ms/epoch - 83ms/step\n",
      "Epoch 5/250\n",
      "1/1 - 0s - loss: 0.5926 - val_loss: 0.5585 - 99ms/epoch - 99ms/step\n",
      "Epoch 6/250\n",
      "1/1 - 0s - loss: 0.5575 - val_loss: 0.5243 - 80ms/epoch - 80ms/step\n",
      "Epoch 7/250\n",
      "1/1 - 0s - loss: 0.5244 - val_loss: 0.4921 - 75ms/epoch - 75ms/step\n",
      "Epoch 8/250\n",
      "1/1 - 0s - loss: 0.4931 - val_loss: 0.4617 - 83ms/epoch - 83ms/step\n",
      "Epoch 9/250\n",
      "1/1 - 0s - loss: 0.4636 - val_loss: 0.4331 - 96ms/epoch - 96ms/step\n",
      "Epoch 10/250\n",
      "1/1 - 0s - loss: 0.4359 - val_loss: 0.4062 - 92ms/epoch - 92ms/step\n",
      "Epoch 11/250\n",
      "1/1 - 0s - loss: 0.4098 - val_loss: 0.3809 - 84ms/epoch - 84ms/step\n",
      "Epoch 12/250\n",
      "1/1 - 0s - loss: 0.3853 - val_loss: 0.3571 - 87ms/epoch - 87ms/step\n",
      "Epoch 13/250\n",
      "1/1 - 0s - loss: 0.3624 - val_loss: 0.3349 - 72ms/epoch - 72ms/step\n",
      "Epoch 14/250\n",
      "1/1 - 0s - loss: 0.3408 - val_loss: 0.3141 - 88ms/epoch - 88ms/step\n",
      "Epoch 15/250\n",
      "1/1 - 0s - loss: 0.3207 - val_loss: 0.2946 - 90ms/epoch - 90ms/step\n",
      "Epoch 16/250\n",
      "1/1 - 0s - loss: 0.3019 - val_loss: 0.2765 - 81ms/epoch - 81ms/step\n",
      "Epoch 17/250\n",
      "1/1 - 0s - loss: 0.2844 - val_loss: 0.2596 - 96ms/epoch - 96ms/step\n",
      "Epoch 18/250\n",
      "1/1 - 0s - loss: 0.2681 - val_loss: 0.2439 - 78ms/epoch - 78ms/step\n",
      "Epoch 19/250\n",
      "1/1 - 0s - loss: 0.2529 - val_loss: 0.2293 - 91ms/epoch - 91ms/step\n",
      "Epoch 20/250\n",
      "1/1 - 0s - loss: 0.2387 - val_loss: 0.2158 - 92ms/epoch - 92ms/step\n",
      "Epoch 21/250\n",
      "1/1 - 0s - loss: 0.2256 - val_loss: 0.2032 - 74ms/epoch - 74ms/step\n",
      "Epoch 22/250\n",
      "1/1 - 0s - loss: 0.2135 - val_loss: 0.1917 - 76ms/epoch - 76ms/step\n",
      "Epoch 23/250\n",
      "1/1 - 0s - loss: 0.2022 - val_loss: 0.1810 - 71ms/epoch - 71ms/step\n",
      "Epoch 24/250\n",
      "1/1 - 0s - loss: 0.1918 - val_loss: 0.1711 - 70ms/epoch - 70ms/step\n",
      "Epoch 25/250\n",
      "1/1 - 0s - loss: 0.1822 - val_loss: 0.1620 - 78ms/epoch - 78ms/step\n",
      "Epoch 26/250\n",
      "1/1 - 0s - loss: 0.1733 - val_loss: 0.1537 - 75ms/epoch - 75ms/step\n",
      "Epoch 27/250\n",
      "1/1 - 0s - loss: 0.1651 - val_loss: 0.1460 - 88ms/epoch - 88ms/step\n",
      "Epoch 28/250\n",
      "1/1 - 0s - loss: 0.1576 - val_loss: 0.1389 - 75ms/epoch - 75ms/step\n",
      "Epoch 29/250\n",
      "1/1 - 0s - loss: 0.1507 - val_loss: 0.1324 - 84ms/epoch - 84ms/step\n",
      "Epoch 30/250\n",
      "1/1 - 0s - loss: 0.1444 - val_loss: 0.1265 - 90ms/epoch - 90ms/step\n",
      "Epoch 31/250\n",
      "1/1 - 0s - loss: 0.1385 - val_loss: 0.1210 - 75ms/epoch - 75ms/step\n",
      "Epoch 32/250\n",
      "1/1 - 0s - loss: 0.1331 - val_loss: 0.1160 - 61ms/epoch - 61ms/step\n",
      "Epoch 33/250\n",
      "1/1 - 0s - loss: 0.1282 - val_loss: 0.1114 - 75ms/epoch - 75ms/step\n",
      "Epoch 34/250\n",
      "1/1 - 0s - loss: 0.1236 - val_loss: 0.1072 - 87ms/epoch - 87ms/step\n",
      "Epoch 35/250\n",
      "1/1 - 0s - loss: 0.1194 - val_loss: 0.1033 - 88ms/epoch - 88ms/step\n",
      "Epoch 36/250\n",
      "1/1 - 0s - loss: 0.1156 - val_loss: 0.0997 - 81ms/epoch - 81ms/step\n",
      "Epoch 37/250\n",
      "1/1 - 0s - loss: 0.1120 - val_loss: 0.0965 - 75ms/epoch - 75ms/step\n",
      "Epoch 38/250\n",
      "1/1 - 0s - loss: 0.1087 - val_loss: 0.0934 - 84ms/epoch - 84ms/step\n",
      "Epoch 39/250\n",
      "1/1 - 0s - loss: 0.1057 - val_loss: 0.0907 - 89ms/epoch - 89ms/step\n",
      "Epoch 40/250\n",
      "1/1 - 0s - loss: 0.1030 - val_loss: 0.0881 - 71ms/epoch - 71ms/step\n",
      "Epoch 41/250\n",
      "1/1 - 0s - loss: 0.1004 - val_loss: 0.0858 - 82ms/epoch - 82ms/step\n",
      "Epoch 42/250\n",
      "1/1 - 0s - loss: 0.0981 - val_loss: 0.0836 - 74ms/epoch - 74ms/step\n",
      "Epoch 43/250\n",
      "1/1 - 0s - loss: 0.0959 - val_loss: 0.0816 - 74ms/epoch - 74ms/step\n",
      "Epoch 44/250\n",
      "1/1 - 0s - loss: 0.0939 - val_loss: 0.0798 - 77ms/epoch - 77ms/step\n",
      "Epoch 45/250\n",
      "1/1 - 0s - loss: 0.0921 - val_loss: 0.0781 - 93ms/epoch - 93ms/step\n",
      "Epoch 46/250\n",
      "1/1 - 0s - loss: 0.0904 - val_loss: 0.0765 - 78ms/epoch - 78ms/step\n",
      "Epoch 47/250\n",
      "1/1 - 0s - loss: 0.0889 - val_loss: 0.0751 - 77ms/epoch - 77ms/step\n",
      "Epoch 48/250\n",
      "1/1 - 0s - loss: 0.0875 - val_loss: 0.0738 - 79ms/epoch - 79ms/step\n",
      "Epoch 49/250\n",
      "1/1 - 0s - loss: 0.0862 - val_loss: 0.0726 - 97ms/epoch - 97ms/step\n",
      "Epoch 50/250\n",
      "1/1 - 0s - loss: 0.0850 - val_loss: 0.0715 - 83ms/epoch - 83ms/step\n",
      "Epoch 51/250\n",
      "1/1 - 0s - loss: 0.0839 - val_loss: 0.0705 - 89ms/epoch - 89ms/step\n",
      "Epoch 52/250\n",
      "1/1 - 0s - loss: 0.0829 - val_loss: 0.0695 - 84ms/epoch - 84ms/step\n",
      "Epoch 53/250\n",
      "1/1 - 0s - loss: 0.0820 - val_loss: 0.0687 - 85ms/epoch - 85ms/step\n",
      "Epoch 54/250\n",
      "1/1 - 0s - loss: 0.0811 - val_loss: 0.0679 - 90ms/epoch - 90ms/step\n",
      "Epoch 55/250\n",
      "1/1 - 0s - loss: 0.0804 - val_loss: 0.0672 - 75ms/epoch - 75ms/step\n",
      "Epoch 56/250\n",
      "1/1 - 0s - loss: 0.0797 - val_loss: 0.0665 - 86ms/epoch - 86ms/step\n",
      "Epoch 57/250\n",
      "1/1 - 0s - loss: 0.0790 - val_loss: 0.0660 - 84ms/epoch - 84ms/step\n",
      "Epoch 58/250\n",
      "1/1 - 0s - loss: 0.0785 - val_loss: 0.0654 - 97ms/epoch - 97ms/step\n",
      "Epoch 59/250\n",
      "1/1 - 0s - loss: 0.0780 - val_loss: 0.0650 - 93ms/epoch - 93ms/step\n",
      "Epoch 60/250\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0645 - 84ms/epoch - 84ms/step\n",
      "Epoch 61/250\n",
      "1/1 - 0s - loss: 0.0771 - val_loss: 0.0642 - 84ms/epoch - 84ms/step\n",
      "Epoch 62/250\n",
      "1/1 - 0s - loss: 0.0767 - val_loss: 0.0638 - 86ms/epoch - 86ms/step\n",
      "Epoch 63/250\n",
      "1/1 - 0s - loss: 0.0763 - val_loss: 0.0635 - 88ms/epoch - 88ms/step\n",
      "Epoch 64/250\n",
      "1/1 - 0s - loss: 0.0760 - val_loss: 0.0632 - 64ms/epoch - 64ms/step\n",
      "Epoch 65/250\n",
      "1/1 - 0s - loss: 0.0758 - val_loss: 0.0630 - 87ms/epoch - 87ms/step\n",
      "Epoch 66/250\n",
      "1/1 - 0s - loss: 0.0755 - val_loss: 0.0627 - 87ms/epoch - 87ms/step\n",
      "Epoch 67/250\n",
      "1/1 - 0s - loss: 0.0753 - val_loss: 0.0625 - 90ms/epoch - 90ms/step\n",
      "Epoch 68/250\n",
      "1/1 - 0s - loss: 0.0751 - val_loss: 0.0624 - 59ms/epoch - 59ms/step\n",
      "Epoch 69/250\n",
      "1/1 - 0s - loss: 0.0749 - val_loss: 0.0622 - 79ms/epoch - 79ms/step\n",
      "Epoch 70/250\n",
      "1/1 - 0s - loss: 0.0748 - val_loss: 0.0620 - 81ms/epoch - 81ms/step\n",
      "Epoch 71/250\n",
      "1/1 - 0s - loss: 0.0746 - val_loss: 0.0619 - 83ms/epoch - 83ms/step\n",
      "Epoch 72/250\n",
      "1/1 - 0s - loss: 0.0745 - val_loss: 0.0618 - 88ms/epoch - 88ms/step\n",
      "Epoch 73/250\n",
      "1/1 - 0s - loss: 0.0744 - val_loss: 0.0617 - 81ms/epoch - 81ms/step\n",
      "Epoch 74/250\n",
      "1/1 - 0s - loss: 0.0743 - val_loss: 0.0616 - 95ms/epoch - 95ms/step\n",
      "Epoch 75/250\n",
      "1/1 - 0s - loss: 0.0742 - val_loss: 0.0615 - 83ms/epoch - 83ms/step\n",
      "Epoch 76/250\n",
      "1/1 - 0s - loss: 0.0741 - val_loss: 0.0614 - 75ms/epoch - 75ms/step\n",
      "Epoch 77/250\n",
      "1/1 - 0s - loss: 0.0741 - val_loss: 0.0613 - 85ms/epoch - 85ms/step\n",
      "Epoch 78/250\n",
      "1/1 - 0s - loss: 0.0740 - val_loss: 0.0613 - 88ms/epoch - 88ms/step\n",
      "Epoch 79/250\n",
      "1/1 - 0s - loss: 0.0740 - val_loss: 0.0612 - 98ms/epoch - 98ms/step\n",
      "Epoch 80/250\n",
      "1/1 - 0s - loss: 0.0739 - val_loss: 0.0612 - 77ms/epoch - 77ms/step\n",
      "Epoch 81/250\n",
      "1/1 - 0s - loss: 0.0739 - val_loss: 0.0611 - 74ms/epoch - 74ms/step\n",
      "Epoch 82/250\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0611 - 94ms/epoch - 94ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 83/250\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0610 - 80ms/epoch - 80ms/step\n",
      "Epoch 84/250\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0610 - 83ms/epoch - 83ms/step\n",
      "Epoch 85/250\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0610 - 78ms/epoch - 78ms/step\n",
      "Epoch 86/250\n",
      "1/1 - 0s - loss: 0.0738 - val_loss: 0.0609 - 81ms/epoch - 81ms/step\n",
      "Epoch 87/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0609 - 86ms/epoch - 86ms/step\n",
      "Epoch 88/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0609 - 84ms/epoch - 84ms/step\n",
      "Epoch 89/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0609 - 78ms/epoch - 78ms/step\n",
      "Epoch 90/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 91ms/epoch - 91ms/step\n",
      "Epoch 91/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 80ms/epoch - 80ms/step\n",
      "Epoch 92/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 98ms/epoch - 98ms/step\n",
      "Epoch 93/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 76ms/epoch - 76ms/step\n",
      "Epoch 94/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 90ms/epoch - 90ms/step\n",
      "Epoch 95/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 90ms/epoch - 90ms/step\n",
      "Epoch 96/250\n",
      "1/1 - 0s - loss: 0.0737 - val_loss: 0.0608 - 79ms/epoch - 79ms/step\n",
      "Epoch 97/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0608 - 96ms/epoch - 96ms/step\n",
      "Epoch 98/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 80ms/epoch - 80ms/step\n",
      "Epoch 99/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 79ms/epoch - 79ms/step\n",
      "Epoch 100/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 86ms/epoch - 86ms/step\n",
      "Epoch 101/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 82ms/epoch - 82ms/step\n",
      "Epoch 102/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 83ms/epoch - 83ms/step\n",
      "Epoch 103/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 91ms/epoch - 91ms/step\n",
      "Epoch 104/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 100ms/epoch - 100ms/step\n",
      "Epoch 105/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 72ms/epoch - 72ms/step\n",
      "Epoch 106/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 94ms/epoch - 94ms/step\n",
      "Epoch 107/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 92ms/epoch - 92ms/step\n",
      "Epoch 108/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 88ms/epoch - 88ms/step\n",
      "Epoch 109/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 74ms/epoch - 74ms/step\n",
      "Epoch 110/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0607 - 74ms/epoch - 74ms/step\n",
      "Epoch 111/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 112/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 113/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 77ms/epoch - 77ms/step\n",
      "Epoch 114/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 80ms/epoch - 80ms/step\n",
      "Epoch 115/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 116/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 89ms/epoch - 89ms/step\n",
      "Epoch 117/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 84ms/epoch - 84ms/step\n",
      "Epoch 118/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 71ms/epoch - 71ms/step\n",
      "Epoch 119/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 120/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 77ms/epoch - 77ms/step\n",
      "Epoch 121/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 122/250\n",
      "1/1 - 0s - loss: 0.0736 - val_loss: 0.0606 - 89ms/epoch - 89ms/step\n",
      "Epoch 123/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0606 - 90ms/epoch - 90ms/step\n",
      "Epoch 124/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0606 - 89ms/epoch - 89ms/step\n",
      "Epoch 125/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0606 - 82ms/epoch - 82ms/step\n",
      "Epoch 126/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0606 - 97ms/epoch - 97ms/step\n",
      "Epoch 127/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 94ms/epoch - 94ms/step\n",
      "Epoch 128/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 92ms/epoch - 92ms/step\n",
      "Epoch 129/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 79ms/epoch - 79ms/step\n",
      "Epoch 130/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 75ms/epoch - 75ms/step\n",
      "Epoch 131/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 67ms/epoch - 67ms/step\n",
      "Epoch 132/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 90ms/epoch - 90ms/step\n",
      "Epoch 133/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 80ms/epoch - 80ms/step\n",
      "Epoch 134/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 91ms/epoch - 91ms/step\n",
      "Epoch 135/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 67ms/epoch - 67ms/step\n",
      "Epoch 136/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 82ms/epoch - 82ms/step\n",
      "Epoch 137/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 81ms/epoch - 81ms/step\n",
      "Epoch 138/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 79ms/epoch - 79ms/step\n",
      "Epoch 139/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 103ms/epoch - 103ms/step\n",
      "Epoch 140/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 90ms/epoch - 90ms/step\n",
      "Epoch 141/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 85ms/epoch - 85ms/step\n",
      "Epoch 142/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 69ms/epoch - 69ms/step\n",
      "Epoch 143/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 85ms/epoch - 85ms/step\n",
      "Epoch 144/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 93ms/epoch - 93ms/step\n",
      "Epoch 145/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 96ms/epoch - 96ms/step\n",
      "Epoch 146/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 80ms/epoch - 80ms/step\n",
      "Epoch 147/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 101ms/epoch - 101ms/step\n",
      "Epoch 148/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 93ms/epoch - 93ms/step\n",
      "Epoch 149/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 87ms/epoch - 87ms/step\n",
      "Epoch 150/250\n",
      "1/1 - 0s - loss: 0.0735 - val_loss: 0.0607 - 78ms/epoch - 78ms/step\n",
      "Epoch 151/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 75ms/epoch - 75ms/step\n",
      "Epoch 152/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 91ms/epoch - 91ms/step\n",
      "Epoch 153/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 89ms/epoch - 89ms/step\n",
      "Epoch 154/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 70ms/epoch - 70ms/step\n",
      "Epoch 155/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 70ms/epoch - 70ms/step\n",
      "Epoch 156/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 83ms/epoch - 83ms/step\n",
      "Epoch 157/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 82ms/epoch - 82ms/step\n",
      "Epoch 158/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 87ms/epoch - 87ms/step\n",
      "Epoch 159/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 91ms/epoch - 91ms/step\n",
      "Epoch 160/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 81ms/epoch - 81ms/step\n",
      "Epoch 161/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 78ms/epoch - 78ms/step\n",
      "Epoch 162/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 71ms/epoch - 71ms/step\n",
      "Epoch 163/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 83ms/epoch - 83ms/step\n",
      "Epoch 164/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 89ms/epoch - 89ms/step\n",
      "Epoch 165/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 84ms/epoch - 84ms/step\n",
      "Epoch 166/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 79ms/epoch - 79ms/step\n",
      "Epoch 167/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 67ms/epoch - 67ms/step\n",
      "Epoch 168/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 85ms/epoch - 85ms/step\n",
      "Epoch 169/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 81ms/epoch - 81ms/step\n",
      "Epoch 170/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 94ms/epoch - 94ms/step\n",
      "Epoch 171/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 82ms/epoch - 82ms/step\n",
      "Epoch 172/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 81ms/epoch - 81ms/step\n",
      "Epoch 173/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 86ms/epoch - 86ms/step\n",
      "Epoch 174/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 93ms/epoch - 93ms/step\n",
      "Epoch 175/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 90ms/epoch - 90ms/step\n",
      "Epoch 176/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 72ms/epoch - 72ms/step\n",
      "Epoch 177/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 86ms/epoch - 86ms/step\n",
      "Epoch 178/250\n",
      "1/1 - 0s - loss: 0.0734 - val_loss: 0.0607 - 103ms/epoch - 103ms/step\n",
      "Epoch 179/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 76ms/epoch - 76ms/step\n",
      "Epoch 180/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 81ms/epoch - 81ms/step\n",
      "Epoch 181/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 76ms/epoch - 76ms/step\n",
      "Epoch 182/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 80ms/epoch - 80ms/step\n",
      "Epoch 183/250\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 71ms/epoch - 71ms/step\n",
      "Epoch 184/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 68ms/epoch - 68ms/step\n",
      "Epoch 185/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 75ms/epoch - 75ms/step\n",
      "Epoch 186/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 75ms/epoch - 75ms/step\n",
      "Epoch 187/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 75ms/epoch - 75ms/step\n",
      "Epoch 188/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0607 - 77ms/epoch - 77ms/step\n",
      "Epoch 189/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 82ms/epoch - 82ms/step\n",
      "Epoch 190/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 78ms/epoch - 78ms/step\n",
      "Epoch 191/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 98ms/epoch - 98ms/step\n",
      "Epoch 192/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 87ms/epoch - 87ms/step\n",
      "Epoch 193/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 71ms/epoch - 71ms/step\n",
      "Epoch 194/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 88ms/epoch - 88ms/step\n",
      "Epoch 195/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 78ms/epoch - 78ms/step\n",
      "Epoch 196/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 74ms/epoch - 74ms/step\n",
      "Epoch 197/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 82ms/epoch - 82ms/step\n",
      "Epoch 198/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 92ms/epoch - 92ms/step\n",
      "Epoch 199/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 75ms/epoch - 75ms/step\n",
      "Epoch 200/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 72ms/epoch - 72ms/step\n",
      "Epoch 201/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 202/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 77ms/epoch - 77ms/step\n",
      "Epoch 203/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 69ms/epoch - 69ms/step\n",
      "Epoch 204/250\n",
      "1/1 - 0s - loss: 0.0733 - val_loss: 0.0606 - 85ms/epoch - 85ms/step\n",
      "Epoch 205/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 80ms/epoch - 80ms/step\n",
      "Epoch 206/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 95ms/epoch - 95ms/step\n",
      "Epoch 207/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 91ms/epoch - 91ms/step\n",
      "Epoch 208/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 84ms/epoch - 84ms/step\n",
      "Epoch 209/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 210/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 211/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 85ms/epoch - 85ms/step\n",
      "Epoch 212/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 80ms/epoch - 80ms/step\n",
      "Epoch 213/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 89ms/epoch - 89ms/step\n",
      "Epoch 214/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 215/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 77ms/epoch - 77ms/step\n",
      "Epoch 216/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 74ms/epoch - 74ms/step\n",
      "Epoch 217/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 76ms/epoch - 76ms/step\n",
      "Epoch 218/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 82ms/epoch - 82ms/step\n",
      "Epoch 219/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 83ms/epoch - 83ms/step\n",
      "Epoch 220/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 84ms/epoch - 84ms/step\n",
      "Epoch 221/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 82ms/epoch - 82ms/step\n",
      "Epoch 222/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 76ms/epoch - 76ms/step\n",
      "Epoch 223/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 97ms/epoch - 97ms/step\n",
      "Epoch 224/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 81ms/epoch - 81ms/step\n",
      "Epoch 225/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 226/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 81ms/epoch - 81ms/step\n",
      "Epoch 227/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 228/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 84ms/epoch - 84ms/step\n",
      "Epoch 229/250\n",
      "1/1 - 0s - loss: 0.0732 - val_loss: 0.0606 - 114ms/epoch - 114ms/step\n",
      "Epoch 230/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 70ms/epoch - 70ms/step\n",
      "Epoch 231/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 73ms/epoch - 73ms/step\n",
      "Epoch 232/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 233/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 88ms/epoch - 88ms/step\n",
      "Epoch 234/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 92ms/epoch - 92ms/step\n",
      "Epoch 235/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 81ms/epoch - 81ms/step\n",
      "Epoch 236/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 65ms/epoch - 65ms/step\n",
      "Epoch 237/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 75ms/epoch - 75ms/step\n",
      "Epoch 238/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 77ms/epoch - 77ms/step\n",
      "Epoch 239/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 73ms/epoch - 73ms/step\n",
      "Epoch 240/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 89ms/epoch - 89ms/step\n",
      "Epoch 241/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 80ms/epoch - 80ms/step\n",
      "Epoch 242/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 79ms/epoch - 79ms/step\n",
      "Epoch 243/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 93ms/epoch - 93ms/step\n",
      "Epoch 244/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 81ms/epoch - 81ms/step\n",
      "Epoch 245/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 85ms/epoch - 85ms/step\n",
      "Epoch 246/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 97ms/epoch - 97ms/step\n",
      "Epoch 247/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 78ms/epoch - 78ms/step\n",
      "Epoch 248/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 80ms/epoch - 80ms/step\n",
      "Epoch 249/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 84ms/epoch - 84ms/step\n",
      "Epoch 250/250\n",
      "1/1 - 0s - loss: 0.0731 - val_loss: 0.0606 - 81ms/epoch - 81ms/step\n"
     ]
    }
   ],
   "source": [
    "#Loading the previous saved model as we are performing the Hierarchical Time Series Forecasting\n",
    "from keras.models import Model\n",
    "from keras.models import load_model\n",
    "\n",
    "#This was trained with first 56 columns, we load it and re-train it\n",
    "model2=load_model('aus(1step).h5')\n",
    "\n",
    "# we set the 5 layers of model trainable false to re-train them with next columns for Hierarchical forecasting\n",
    "\n",
    "#trainable to False moves all the layer's weights from trainable to non-trainable. \n",
    "#This is called \"freezing\" the layer: the state of a frozen layer won't be updated \n",
    "#during training\n",
    "#So it means we will use those pre-trained weights (transfer learning)\n",
    "for layer in model2.layers[:5]:\n",
    "    layer.trainable = False \n",
    "\n",
    "# Get the input\n",
    "new_input = model2.input\n",
    "# Find the layer to connect\n",
    "hidden_layer = model2.layers[-1].output # we will connect the new layer after this\n",
    "# Connect a new layer on it\n",
    "new_output = Dense(no_of_features) (hidden_layer)\n",
    "# Build a new model\n",
    "new_model2 = Model(new_input, new_output)\n",
    "\n",
    "#Compiling the model again\n",
    "new_model2.compile(optimizer='adam', loss='mse')\n",
    "new_model2.summary()\n",
    "\n",
    "#Training the model again\n",
    "fit_history2 = new_model2.fit(X_train, y_train, epochs=250, batch_size=50, \n",
    "                     validation_split=0.33, verbose=2, shuffle=False) \n",
    "\n",
    "#Saving the model now trainined with 56+28 columns\n",
    "new_model2.save('aus(11step).h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 541
    },
    "id": "PQ5AQffRTOzn",
    "outputId": "91b99a0f-9e28-4507-86e8-0af740232c80"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "name": "Training Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.7535836696624756,
          0.7101702690124512,
          0.6688971519470215,
          0.6297376155853271,
          0.5926384329795837,
          0.5575408935546875,
          0.5243837833404541,
          0.49310174584388733,
          0.4636264145374298,
          0.4358856678009033,
          0.40980616211891174,
          0.38531720638275146,
          0.36235153675079346,
          0.340844064950943,
          0.32072973251342773,
          0.3019428551197052,
          0.2844165861606598,
          0.26808440685272217,
          0.25288185477256775,
          0.23874779045581818,
          0.22562450170516968,
          0.2134574055671692,
          0.20219357311725616,
          0.19178099930286407,
          0.18216823041439056,
          0.17330443859100342,
          0.16513966023921967,
          0.15762491524219513,
          0.15071232616901398,
          0.14435531198978424,
          0.13850902020931244,
          0.1331309676170349,
          0.12818188965320587,
          0.12362608313560486,
          0.11943159252405167,
          0.11556974798440933,
          0.11201456934213638,
          0.10874225944280624,
          0.10573071241378784,
          0.10295949131250381,
          0.10040965676307678,
          0.09806378930807114,
          0.09590578824281693,
          0.09392081946134567,
          0.09209521859884262,
          0.0904165729880333,
          0.08887363225221634,
          0.08745632320642471,
          0.0861554965376854,
          0.08496272563934326,
          0.08387013524770737,
          0.08287034183740616,
          0.08195644617080688,
          0.08112208545207977,
          0.08036138862371445,
          0.07966893911361694,
          0.07903964072465897,
          0.07846871018409729,
          0.0779515877366066,
          0.07748395949602127,
          0.07706177979707718,
          0.07668120414018631,
          0.07633862644433975,
          0.07603064924478531,
          0.07575415819883347,
          0.07550633698701859,
          0.07528463006019592,
          0.07508671283721924,
          0.07491043955087662,
          0.0747537836432457,
          0.07461486011743546,
          0.07449193298816681,
          0.07438332587480545,
          0.07428756356239319,
          0.074203260242939,
          0.07412918657064438,
          0.07406420260667801,
          0.0740073025226593,
          0.07395759969949722,
          0.07391425222158432,
          0.0738765224814415,
          0.07384371757507324,
          0.07381521910429001,
          0.07379045337438583,
          0.07376894354820251,
          0.07375023514032364,
          0.07373395562171936,
          0.07371973246335983,
          0.07370726019144058,
          0.07369628548622131,
          0.07368655502796173,
          0.07367787510156631,
          0.07367008179426193,
          0.07366301864385605,
          0.0736565813422203,
          0.07365067303180695,
          0.0736452117562294,
          0.0736401304602623,
          0.07363534718751907,
          0.07363083213567734,
          0.07362653315067291,
          0.07362238317728043,
          0.07361838221549988,
          0.07361447811126709,
          0.07361066341400146,
          0.07360691577196121,
          0.07360323518514633,
          0.07359959930181503,
          0.07359600812196732,
          0.07359243929386139,
          0.07358890771865845,
          0.0735853835940361,
          0.07358187437057495,
          0.0735783725976944,
          0.07357487827539444,
          0.07357136160135269,
          0.07356784492731094,
          0.073564313352108,
          0.07356076687574387,
          0.07355722039937973,
          0.07355363667011261,
          0.07355004549026489,
          0.07354643940925598,
          0.07354284077882767,
          0.07353921979665756,
          0.07353560626506805,
          0.07353197783231735,
          0.07352835685014725,
          0.07352475076913834,
          0.07352112978696823,
          0.07351753115653992,
          0.0735139325261116,
          0.07351034134626389,
          0.07350675761699677,
          0.07350318878889084,
          0.07349962741136551,
          0.07349608093500137,
          0.07349253445863724,
          0.0734890028834343,
          0.07348548620939255,
          0.0734819769859314,
          0.07347846776247025,
          0.07347496598958969,
          0.07347146421670914,
          0.07346797734498978,
          0.07346448302268982,
          0.07346098870038986,
          0.0734575018286705,
          0.07345401495695114,
          0.07345052808523178,
          0.07344704121351242,
          0.07344353944063187,
          0.0734400525689125,
          0.07343655079603195,
          0.0734330490231514,
          0.07342953234910965,
          0.0734260305762291,
          0.07342251390218735,
          0.0734189823269844,
          0.07341544330120087,
          0.07341191172599792,
          0.07340836524963379,
          0.07340481132268906,
          0.07340124994516373,
          0.0733976885676384,
          0.07339411228895187,
          0.07339053601026535,
          0.07338694483041763,
          0.07338333874940872,
          0.073379747569561,
          0.0733761191368103,
          0.0733725056052208,
          0.07336887717247009,
          0.0733652412891388,
          0.0733615979552269,
          0.0733579471707344,
          0.07335429638624191,
          0.07335063815116882,
          0.07334696501493454,
          0.07334328442811966,
          0.07333958894014359,
          0.07333589345216751,
          0.07333219796419144,
          0.07332849502563477,
          0.0733247771859169,
          0.07332105189561844,
          0.07331732660531998,
          0.07331359386444092,
          0.07330984622240067,
          0.07330610603094101,
          0.07330233603715897,
          0.07329858094453812,
          0.07329479604959488,
          0.07329101860523224,
          0.073287233710289,
          0.07328344136476517,
          0.07327964156866074,
          0.07327582687139511,
          0.07327201217412949,
          0.07326818257570267,
          0.07326435297727585,
          0.07326051592826843,
          0.07325666397809982,
          0.07325281947851181,
          0.073248952627182,
          0.0732450857758522,
          0.0732412114739418,
          0.07323732227087021,
          0.07323343306779861,
          0.07322952896356583,
          0.07322561740875244,
          0.07322171330451965,
          0.07321778684854507,
          0.0732138529419899,
          0.07320991903543472,
          0.07320597022771835,
          0.07320202142000198,
          0.07319805771112442,
          0.07319409400224686,
          0.0731901153922081,
          0.07318612188100815,
          0.07318214327096939,
          0.07317813485860825,
          0.0731741264462471,
          0.07317011803388596,
          0.07316609472036362,
          0.07316205650568008,
          0.07315801829099655,
          0.07315397262573242,
          0.0731499195098877,
          0.07314585894346237,
          0.07314178347587585,
          0.07313770800828934,
          0.07313362509012222,
          0.07312952727079391,
          0.07312542200088501,
          0.0731213167309761,
          0.073117196559906,
          0.07311307638883591,
          0.07310893386602402,
          0.07310479134321213,
          0.07310064882040024,
          0.07309648394584656,
          0.07309231907129288,
          0.0730881467461586,
          0.07308396697044373,
          0.07307977229356766,
          0.07307557016611099,
          0.07307136058807373,
          0.07306714355945587
         ],
         "yaxis": "y"
        },
        {
         "name": "Validation Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.7159810066223145,
          0.6733726859092712,
          0.6329631805419922,
          0.5947021245956421,
          0.5585214495658875,
          0.5243470072746277,
          0.4921022057533264,
          0.461709588766098,
          0.4330897927284241,
          0.40616485476493835,
          0.380863219499588,
          0.357119619846344,
          0.33487197756767273,
          0.3140590190887451,
          0.2946186065673828,
          0.2764871418476105,
          0.2596001625061035,
          0.24389386177062988,
          0.22930613160133362,
          0.21577705442905426,
          0.20324881374835968,
          0.19166460633277893,
          0.18096855282783508,
          0.17110542953014374,
          0.16202124953269958,
          0.1536635011434555,
          0.14598123729228973,
          0.13892510533332825,
          0.13244715332984924,
          0.12650124728679657,
          0.12104345858097076,
          0.11603261530399323,
          0.1114308163523674,
          0.1072034165263176,
          0.10331884771585464,
          0.09974823892116547,
          0.09646504372358322,
          0.09344489872455597,
          0.09066568315029144,
          0.08810741454362869,
          0.08575225621461868,
          0.08358419686555862,
          0.0815887600183487,
          0.07975275069475174,
          0.07806406170129776,
          0.07651156932115555,
          0.07508499175310135,
          0.07377476245164871,
          0.07257191091775894,
          0.0714680477976799,
          0.07045550644397736,
          0.06952737271785736,
          0.068677619099617,
          0.06790104508399963,
          0.06719305366277695,
          0.06654943525791168,
          0.06596611440181732,
          0.06543897837400436,
          0.06496385484933853,
          0.0645364299416542,
          0.06415234506130219,
          0.06380733102560043,
          0.06349730491638184,
          0.06321857124567032,
          0.06296787410974503,
          0.0627424493432045,
          0.06253989040851593,
          0.062358081340789795,
          0.06219499930739403,
          0.06204869970679283,
          0.0619172677397728,
          0.06179884076118469,
          0.06169167533516884,
          0.06159422919154167,
          0.061505191028118134,
          0.06142357736825943,
          0.06134873628616333,
          0.06128023937344551,
          0.06121785193681717,
          0.061161380261182785,
          0.06111060455441475,
          0.061065223067998886,
          0.06102481856942177,
          0.0609888918697834,
          0.060956921428442,
          0.060928378254175186,
          0.06090280041098595,
          0.06087983399629593,
          0.06085917726159096,
          0.060840632766485214,
          0.06082399562001228,
          0.06080907583236694,
          0.0607956238090992,
          0.060783375054597855,
          0.060772042721509933,
          0.06076135113835335,
          0.06075108423829079,
          0.060741107910871506,
          0.060731373727321625,
          0.06072191148996353,
          0.060712795704603195,
          0.06070411577820778,
          0.06069592759013176,
          0.060688260942697525,
          0.06068111211061478,
          0.06067443639039993,
          0.0606682226061821,
          0.06066242977976799,
          0.060657113790512085,
          0.06065233424305916,
          0.060648150742053986,
          0.06064466014504433,
          0.060641881078481674,
          0.06063982471823692,
          0.06063845381140709,
          0.0606376938521862,
          0.060637444257736206,
          0.06063762679696083,
          0.06063816696405411,
          0.060639023780822754,
          0.060640156269073486,
          0.06064155325293541,
          0.06064315512776375,
          0.06064492091536522,
          0.06064679101109505,
          0.060648683458566666,
          0.060650534927845,
          0.060652296990156174,
          0.06065395101904869,
          0.060655467212200165,
          0.06065687909722328,
          0.06065820902585983,
          0.06065944954752922,
          0.06066061928868294,
          0.060661692172288895,
          0.0606626532971859,
          0.06066348776221275,
          0.06066417694091797,
          0.060664717108011246,
          0.06066512316465378,
          0.060665421187877655,
          0.06066560745239258,
          0.060665715485811234,
          0.06066574901342392,
          0.06066570803523064,
          0.06066560000181198,
          0.06066540256142616,
          0.060665156692266464,
          0.06066485866904259,
          0.06066451594233513,
          0.06066416949033737,
          0.06066381558775902,
          0.060663461685180664,
          0.06066311523318291,
          0.06066277250647545,
          0.060662414878606796,
          0.06066203489899635,
          0.060661640018224716,
          0.06066123768687248,
          0.06066083163022995,
          0.06066044047474861,
          0.06066005676984787,
          0.060659680515527725,
          0.06065932288765907,
          0.06065896525979042,
          0.060658615082502365,
          0.060658279806375504,
          0.06065794453024864,
          0.060657624155282974,
          0.0606573112308979,
          0.060657013207674026,
          0.06065671890974045,
          0.060656432062387466,
          0.06065613776445389,
          0.060655832290649414,
          0.060655511915683746,
          0.060655176639556885,
          0.06065482273697853,
          0.06065445393323898,
          0.06065407022833824,
          0.06065366417169571,
          0.06065325066447258,
          0.060652803629636765,
          0.060652341693639755,
          0.060651857405900955,
          0.06065134331583977,
          0.060650818049907684,
          0.060650281608104706,
          0.06064973399043083,
          0.06064918264746666,
          0.06064862385392189,
          0.060648057609796524,
          0.060647495090961456,
          0.06064692512154579,
          0.060646358877420425,
          0.06064579263329506,
          0.06064524129033089,
          0.06064469367265701,
          0.060644153505563736,
          0.06064361333847046,
          0.06064308434724808,
          0.0606425479054451,
          0.060642026364803314,
          0.06064149737358093,
          0.060640983283519745,
          0.06064046546816826,
          0.06063995510339737,
          0.06063944846391678,
          0.060638945549726486,
          0.06063845008611679,
          0.0606379508972168,
          0.0606374554336071,
          0.0606369711458683,
          0.0606364868581295,
          0.0606360025703907,
          0.0606355257332325,
          0.0606350377202034,
          0.06063457205891609,
          0.06063408404588699,
          0.06063361093401909,
          0.06063313037157059,
          0.06063264608383179,
          0.060632169246673584,
          0.06063168868422508,
          0.060631196945905685,
          0.060630716383457184,
          0.06063022464513779,
          0.06062973290681839,
          0.06062924116849899,
          0.0606287457048893,
          0.060628242790699005,
          0.06062775105237961,
          0.06062724068760872,
          0.060626737773418427,
          0.060626234859228134,
          0.06062571331858635,
          0.06062520295381546,
          0.06062469258904457,
          0.060624171048402786,
          0.0606236457824707,
          0.06062312796711922,
          0.060622602701187134,
          0.060622069984674454,
          0.06062155216932297,
          0.06062101572751999,
          0.06062047928571701,
          0.06061994656920433,
          0.06061941385269165,
          0.06061887741088867,
          0.060618337243795395
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Training and Validation Loss"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "Epochs"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>Training Loss</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>Validation Loss</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"10fa52ca-d8a5-4b28-a103-ac2a019fe60f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"10fa52ca-d8a5-4b28-a103-ac2a019fe60f\")) {                    Plotly.newPlot(                        \"10fa52ca-d8a5-4b28-a103-ac2a019fe60f\",                        [{\"name\":\"Training Loss\",\"y\":[0.7535836696624756,0.7101702690124512,0.6688971519470215,0.6297376155853271,0.5926384329795837,0.5575408935546875,0.5243837833404541,0.49310174584388733,0.4636264145374298,0.4358856678009033,0.40980616211891174,0.38531720638275146,0.36235153675079346,0.340844064950943,0.32072973251342773,0.3019428551197052,0.2844165861606598,0.26808440685272217,0.25288185477256775,0.23874779045581818,0.22562450170516968,0.2134574055671692,0.20219357311725616,0.19178099930286407,0.18216823041439056,0.17330443859100342,0.16513966023921967,0.15762491524219513,0.15071232616901398,0.14435531198978424,0.13850902020931244,0.1331309676170349,0.12818188965320587,0.12362608313560486,0.11943159252405167,0.11556974798440933,0.11201456934213638,0.10874225944280624,0.10573071241378784,0.10295949131250381,0.10040965676307678,0.09806378930807114,0.09590578824281693,0.09392081946134567,0.09209521859884262,0.0904165729880333,0.08887363225221634,0.08745632320642471,0.0861554965376854,0.08496272563934326,0.08387013524770737,0.08287034183740616,0.08195644617080688,0.08112208545207977,0.08036138862371445,0.07966893911361694,0.07903964072465897,0.07846871018409729,0.0779515877366066,0.07748395949602127,0.07706177979707718,0.07668120414018631,0.07633862644433975,0.07603064924478531,0.07575415819883347,0.07550633698701859,0.07528463006019592,0.07508671283721924,0.07491043955087662,0.0747537836432457,0.07461486011743546,0.07449193298816681,0.07438332587480545,0.07428756356239319,0.074203260242939,0.07412918657064438,0.07406420260667801,0.0740073025226593,0.07395759969949722,0.07391425222158432,0.0738765224814415,0.07384371757507324,0.07381521910429001,0.07379045337438583,0.07376894354820251,0.07375023514032364,0.07373395562171936,0.07371973246335983,0.07370726019144058,0.07369628548622131,0.07368655502796173,0.07367787510156631,0.07367008179426193,0.07366301864385605,0.0736565813422203,0.07365067303180695,0.0736452117562294,0.0736401304602623,0.07363534718751907,0.07363083213567734,0.07362653315067291,0.07362238317728043,0.07361838221549988,0.07361447811126709,0.07361066341400146,0.07360691577196121,0.07360323518514633,0.07359959930181503,0.07359600812196732,0.07359243929386139,0.07358890771865845,0.0735853835940361,0.07358187437057495,0.0735783725976944,0.07357487827539444,0.07357136160135269,0.07356784492731094,0.073564313352108,0.07356076687574387,0.07355722039937973,0.07355363667011261,0.07355004549026489,0.07354643940925598,0.07354284077882767,0.07353921979665756,0.07353560626506805,0.07353197783231735,0.07352835685014725,0.07352475076913834,0.07352112978696823,0.07351753115653992,0.0735139325261116,0.07351034134626389,0.07350675761699677,0.07350318878889084,0.07349962741136551,0.07349608093500137,0.07349253445863724,0.0734890028834343,0.07348548620939255,0.0734819769859314,0.07347846776247025,0.07347496598958969,0.07347146421670914,0.07346797734498978,0.07346448302268982,0.07346098870038986,0.0734575018286705,0.07345401495695114,0.07345052808523178,0.07344704121351242,0.07344353944063187,0.0734400525689125,0.07343655079603195,0.0734330490231514,0.07342953234910965,0.0734260305762291,0.07342251390218735,0.0734189823269844,0.07341544330120087,0.07341191172599792,0.07340836524963379,0.07340481132268906,0.07340124994516373,0.0733976885676384,0.07339411228895187,0.07339053601026535,0.07338694483041763,0.07338333874940872,0.073379747569561,0.0733761191368103,0.0733725056052208,0.07336887717247009,0.0733652412891388,0.0733615979552269,0.0733579471707344,0.07335429638624191,0.07335063815116882,0.07334696501493454,0.07334328442811966,0.07333958894014359,0.07333589345216751,0.07333219796419144,0.07332849502563477,0.0733247771859169,0.07332105189561844,0.07331732660531998,0.07331359386444092,0.07330984622240067,0.07330610603094101,0.07330233603715897,0.07329858094453812,0.07329479604959488,0.07329101860523224,0.073287233710289,0.07328344136476517,0.07327964156866074,0.07327582687139511,0.07327201217412949,0.07326818257570267,0.07326435297727585,0.07326051592826843,0.07325666397809982,0.07325281947851181,0.073248952627182,0.0732450857758522,0.0732412114739418,0.07323732227087021,0.07323343306779861,0.07322952896356583,0.07322561740875244,0.07322171330451965,0.07321778684854507,0.0732138529419899,0.07320991903543472,0.07320597022771835,0.07320202142000198,0.07319805771112442,0.07319409400224686,0.0731901153922081,0.07318612188100815,0.07318214327096939,0.07317813485860825,0.0731741264462471,0.07317011803388596,0.07316609472036362,0.07316205650568008,0.07315801829099655,0.07315397262573242,0.0731499195098877,0.07314585894346237,0.07314178347587585,0.07313770800828934,0.07313362509012222,0.07312952727079391,0.07312542200088501,0.0731213167309761,0.073117196559906,0.07311307638883591,0.07310893386602402,0.07310479134321213,0.07310064882040024,0.07309648394584656,0.07309231907129288,0.0730881467461586,0.07308396697044373,0.07307977229356766,0.07307557016611099,0.07307136058807373,0.07306714355945587],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"name\":\"Validation Loss\",\"y\":[0.7159810066223145,0.6733726859092712,0.6329631805419922,0.5947021245956421,0.5585214495658875,0.5243470072746277,0.4921022057533264,0.461709588766098,0.4330897927284241,0.40616485476493835,0.380863219499588,0.357119619846344,0.33487197756767273,0.3140590190887451,0.2946186065673828,0.2764871418476105,0.2596001625061035,0.24389386177062988,0.22930613160133362,0.21577705442905426,0.20324881374835968,0.19166460633277893,0.18096855282783508,0.17110542953014374,0.16202124953269958,0.1536635011434555,0.14598123729228973,0.13892510533332825,0.13244715332984924,0.12650124728679657,0.12104345858097076,0.11603261530399323,0.1114308163523674,0.1072034165263176,0.10331884771585464,0.09974823892116547,0.09646504372358322,0.09344489872455597,0.09066568315029144,0.08810741454362869,0.08575225621461868,0.08358419686555862,0.0815887600183487,0.07975275069475174,0.07806406170129776,0.07651156932115555,0.07508499175310135,0.07377476245164871,0.07257191091775894,0.0714680477976799,0.07045550644397736,0.06952737271785736,0.068677619099617,0.06790104508399963,0.06719305366277695,0.06654943525791168,0.06596611440181732,0.06543897837400436,0.06496385484933853,0.0645364299416542,0.06415234506130219,0.06380733102560043,0.06349730491638184,0.06321857124567032,0.06296787410974503,0.0627424493432045,0.06253989040851593,0.062358081340789795,0.06219499930739403,0.06204869970679283,0.0619172677397728,0.06179884076118469,0.06169167533516884,0.06159422919154167,0.061505191028118134,0.06142357736825943,0.06134873628616333,0.06128023937344551,0.06121785193681717,0.061161380261182785,0.06111060455441475,0.061065223067998886,0.06102481856942177,0.0609888918697834,0.060956921428442,0.060928378254175186,0.06090280041098595,0.06087983399629593,0.06085917726159096,0.060840632766485214,0.06082399562001228,0.06080907583236694,0.0607956238090992,0.060783375054597855,0.060772042721509933,0.06076135113835335,0.06075108423829079,0.060741107910871506,0.060731373727321625,0.06072191148996353,0.060712795704603195,0.06070411577820778,0.06069592759013176,0.060688260942697525,0.06068111211061478,0.06067443639039993,0.0606682226061821,0.06066242977976799,0.060657113790512085,0.06065233424305916,0.060648150742053986,0.06064466014504433,0.060641881078481674,0.06063982471823692,0.06063845381140709,0.0606376938521862,0.060637444257736206,0.06063762679696083,0.06063816696405411,0.060639023780822754,0.060640156269073486,0.06064155325293541,0.06064315512776375,0.06064492091536522,0.06064679101109505,0.060648683458566666,0.060650534927845,0.060652296990156174,0.06065395101904869,0.060655467212200165,0.06065687909722328,0.06065820902585983,0.06065944954752922,0.06066061928868294,0.060661692172288895,0.0606626532971859,0.06066348776221275,0.06066417694091797,0.060664717108011246,0.06066512316465378,0.060665421187877655,0.06066560745239258,0.060665715485811234,0.06066574901342392,0.06066570803523064,0.06066560000181198,0.06066540256142616,0.060665156692266464,0.06066485866904259,0.06066451594233513,0.06066416949033737,0.06066381558775902,0.060663461685180664,0.06066311523318291,0.06066277250647545,0.060662414878606796,0.06066203489899635,0.060661640018224716,0.06066123768687248,0.06066083163022995,0.06066044047474861,0.06066005676984787,0.060659680515527725,0.06065932288765907,0.06065896525979042,0.060658615082502365,0.060658279806375504,0.06065794453024864,0.060657624155282974,0.0606573112308979,0.060657013207674026,0.06065671890974045,0.060656432062387466,0.06065613776445389,0.060655832290649414,0.060655511915683746,0.060655176639556885,0.06065482273697853,0.06065445393323898,0.06065407022833824,0.06065366417169571,0.06065325066447258,0.060652803629636765,0.060652341693639755,0.060651857405900955,0.06065134331583977,0.060650818049907684,0.060650281608104706,0.06064973399043083,0.06064918264746666,0.06064862385392189,0.060648057609796524,0.060647495090961456,0.06064692512154579,0.060646358877420425,0.06064579263329506,0.06064524129033089,0.06064469367265701,0.060644153505563736,0.06064361333847046,0.06064308434724808,0.0606425479054451,0.060642026364803314,0.06064149737358093,0.060640983283519745,0.06064046546816826,0.06063995510339737,0.06063944846391678,0.060638945549726486,0.06063845008611679,0.0606379508972168,0.0606374554336071,0.0606369711458683,0.0606364868581295,0.0606360025703907,0.0606355257332325,0.0606350377202034,0.06063457205891609,0.06063408404588699,0.06063361093401909,0.06063313037157059,0.06063264608383179,0.060632169246673584,0.06063168868422508,0.060631196945905685,0.060630716383457184,0.06063022464513779,0.06062973290681839,0.06062924116849899,0.0606287457048893,0.060628242790699005,0.06062775105237961,0.06062724068760872,0.060626737773418427,0.060626234859228134,0.06062571331858635,0.06062520295381546,0.06062469258904457,0.060624171048402786,0.0606236457824707,0.06062312796711922,0.060622602701187134,0.060622069984674454,0.06062155216932297,0.06062101572751999,0.06062047928571701,0.06061994656920433,0.06061941385269165,0.06061887741088867,0.060618337243795395],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"Epochs\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>Training Loss</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>Validation Loss</b>\"}},\"title\":{\"text\":\"Training and Validation Loss\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('10fa52ca-d8a5-4b28-a103-ac2a019fe60f');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "history = fit_history2\n",
    "#plot the training and validation accuracy and loss at each epoch\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=loss, name=\"Training Loss\"),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=val_loss, name=\"Validation Loss\"),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Training and Validation Loss\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"Epochs\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Training Loss</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>Validation Loss</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HH7a2pEITIa9",
    "outputId": "0de5d724-60a1-4347-bb02-fb11d01c32f1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(15, 1, 28)\n",
      "(15, 1, 28)\n"
     ]
    }
   ],
   "source": [
    "#Predictions\n",
    "pred_aus=new_model2.predict(X_test)\n",
    "print(pred_aus.shape)\n",
    "\n",
    "\n",
    "#Inverse Scaling of the predicted values\n",
    "\n",
    "for index,i in enumerate(train_dataF.columns):\n",
    "    scaler = scalers['scaler_'+i]  \n",
    "    pred_aus[:,:,index]=scaler.inverse_transform(pred_aus[:,:,index])\n",
    "\n",
    "pred_aus = [diff_inverse( pred_aus[i],  newdatay[i] ) for i in range(len(pred_aus))]\n",
    "pred_aus=np.array(pred_aus)\n",
    "print(pred_aus.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aiUmxeNhs9Ao",
    "outputId": "fb4077e9-b3df-4830-e9c9-5109f1ae668d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE_0 2.43259455470472\n",
      "RMSE_0 0.0012493374490993945\n",
      "MAE_1 1.8539323722396086\n",
      "RMSE_1 0.0009086735355334894\n",
      "MAE_2 2.312941736591906\n",
      "MAE_3 1.668824445284264\n",
      "MAE_4 3.120217383103831\n",
      "MAE_5 2.1702966615167227\n",
      "\n",
      "Full MAE 2.510519944752627\n",
      "Full RMSE 0.001691162458212251\n"
     ]
    }
   ],
   "source": [
    "#Error Estimation\n",
    "\n",
    "#Checking the metrics - RMSE and MAE\n",
    "\n",
    "print('MAE_0',(MAE(newdatay[0,:], pred_aus[0,:])).mean())\n",
    "print('RMSE_0', (RMSE(newdatay[0,:], pred_aus[0,:])).mean())\n",
    "\n",
    "#print('RMSE', (dRMSE(newdatay, pred_aus))[0,:].mean())\n",
    "\n",
    "print('MAE_1', (MAE(newdatay[1,:], pred_aus[1,:])).mean())\n",
    "print('RMSE_1', (RMSE(newdatay[1,:], pred_aus[1,:])).mean())\n",
    "\n",
    "print('MAE_2', (MAE(newdatay[2,:], pred_aus[2,:])).mean())\n",
    "\n",
    "print('MAE_3', (MAE(newdatay[3,:], pred_aus[3,:])).mean())\n",
    "\n",
    "print('MAE_4', (MAE(newdatay[4,:], pred_aus[4,:])).mean())\n",
    "\n",
    "print('MAE_5', (MAE(newdatay[5,:], pred_aus[5,:])).mean())\n",
    "\n",
    "print()\n",
    "print('Full MAE', (MAE(newdatay, pred_aus)).mean())\n",
    "print('Full RMSE', (RMSE(newdatay, pred_aus)).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol</th>\n",
       "      <th>VIC - hol</th>\n",
       "      <th>QLD - hol</th>\n",
       "      <th>SA - hol</th>\n",
       "      <th>WA - hol</th>\n",
       "      <th>TAS - hol</th>\n",
       "      <th>NT - hol</th>\n",
       "      <th>NSW - vfr</th>\n",
       "      <th>VIC - vfr</th>\n",
       "      <th>QLD - vfr</th>\n",
       "      <th>...</th>\n",
       "      <th>WA - bus</th>\n",
       "      <th>TAS - bus</th>\n",
       "      <th>NT - bus</th>\n",
       "      <th>NSW - oth</th>\n",
       "      <th>VIC - oth</th>\n",
       "      <th>QLD - oth</th>\n",
       "      <th>SA - oth</th>\n",
       "      <th>WA - oth</th>\n",
       "      <th>TAS - oth</th>\n",
       "      <th>NT - oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>8915</td>\n",
       "      <td>5615</td>\n",
       "      <td>7392</td>\n",
       "      <td>2187</td>\n",
       "      <td>3155</td>\n",
       "      <td>1269</td>\n",
       "      <td>676</td>\n",
       "      <td>7546</td>\n",
       "      <td>5012</td>\n",
       "      <td>6075</td>\n",
       "      <td>...</td>\n",
       "      <td>1116</td>\n",
       "      <td>254</td>\n",
       "      <td>379</td>\n",
       "      <td>1461</td>\n",
       "      <td>594</td>\n",
       "      <td>977</td>\n",
       "      <td>456</td>\n",
       "      <td>317</td>\n",
       "      <td>422</td>\n",
       "      <td>163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>8249</td>\n",
       "      <td>4810</td>\n",
       "      <td>11900</td>\n",
       "      <td>1762</td>\n",
       "      <td>3330</td>\n",
       "      <td>432</td>\n",
       "      <td>1208</td>\n",
       "      <td>7838</td>\n",
       "      <td>3778</td>\n",
       "      <td>6574</td>\n",
       "      <td>...</td>\n",
       "      <td>1426</td>\n",
       "      <td>313</td>\n",
       "      <td>273</td>\n",
       "      <td>1304</td>\n",
       "      <td>696</td>\n",
       "      <td>1514</td>\n",
       "      <td>493</td>\n",
       "      <td>1203</td>\n",
       "      <td>179</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>9154</td>\n",
       "      <td>5214</td>\n",
       "      <td>9858</td>\n",
       "      <td>1940</td>\n",
       "      <td>2853</td>\n",
       "      <td>1173</td>\n",
       "      <td>477</td>\n",
       "      <td>8887</td>\n",
       "      <td>5484</td>\n",
       "      <td>5342</td>\n",
       "      <td>...</td>\n",
       "      <td>1698</td>\n",
       "      <td>255</td>\n",
       "      <td>526</td>\n",
       "      <td>1147</td>\n",
       "      <td>616</td>\n",
       "      <td>1741</td>\n",
       "      <td>405</td>\n",
       "      <td>1018</td>\n",
       "      <td>176</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>13353</td>\n",
       "      <td>9601</td>\n",
       "      <td>8990</td>\n",
       "      <td>3210</td>\n",
       "      <td>4316</td>\n",
       "      <td>2391</td>\n",
       "      <td>230</td>\n",
       "      <td>10864</td>\n",
       "      <td>6296</td>\n",
       "      <td>6499</td>\n",
       "      <td>...</td>\n",
       "      <td>835</td>\n",
       "      <td>280</td>\n",
       "      <td>519</td>\n",
       "      <td>1039</td>\n",
       "      <td>753</td>\n",
       "      <td>728</td>\n",
       "      <td>368</td>\n",
       "      <td>543</td>\n",
       "      <td>199</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>9191</td>\n",
       "      <td>5891</td>\n",
       "      <td>8054</td>\n",
       "      <td>2118</td>\n",
       "      <td>2478</td>\n",
       "      <td>1178</td>\n",
       "      <td>547</td>\n",
       "      <td>8799</td>\n",
       "      <td>4968</td>\n",
       "      <td>5328</td>\n",
       "      <td>...</td>\n",
       "      <td>1337</td>\n",
       "      <td>346</td>\n",
       "      <td>319</td>\n",
       "      <td>963</td>\n",
       "      <td>787</td>\n",
       "      <td>797</td>\n",
       "      <td>354</td>\n",
       "      <td>552</td>\n",
       "      <td>118</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>8525</td>\n",
       "      <td>4646</td>\n",
       "      <td>12995</td>\n",
       "      <td>1681</td>\n",
       "      <td>3869</td>\n",
       "      <td>351</td>\n",
       "      <td>1576</td>\n",
       "      <td>7892</td>\n",
       "      <td>3995</td>\n",
       "      <td>7068</td>\n",
       "      <td>...</td>\n",
       "      <td>1752</td>\n",
       "      <td>353</td>\n",
       "      <td>391</td>\n",
       "      <td>1179</td>\n",
       "      <td>522</td>\n",
       "      <td>1553</td>\n",
       "      <td>399</td>\n",
       "      <td>918</td>\n",
       "      <td>62</td>\n",
       "      <td>312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>8738</td>\n",
       "      <td>5145</td>\n",
       "      <td>9073</td>\n",
       "      <td>1875</td>\n",
       "      <td>2870</td>\n",
       "      <td>1108</td>\n",
       "      <td>261</td>\n",
       "      <td>8998</td>\n",
       "      <td>4543</td>\n",
       "      <td>5861</td>\n",
       "      <td>...</td>\n",
       "      <td>2076</td>\n",
       "      <td>310</td>\n",
       "      <td>179</td>\n",
       "      <td>2175</td>\n",
       "      <td>600</td>\n",
       "      <td>1543</td>\n",
       "      <td>705</td>\n",
       "      <td>1265</td>\n",
       "      <td>98</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>15026</td>\n",
       "      <td>10246</td>\n",
       "      <td>9844</td>\n",
       "      <td>2873</td>\n",
       "      <td>3569</td>\n",
       "      <td>2199</td>\n",
       "      <td>286</td>\n",
       "      <td>9836</td>\n",
       "      <td>6364</td>\n",
       "      <td>6838</td>\n",
       "      <td>...</td>\n",
       "      <td>918</td>\n",
       "      <td>302</td>\n",
       "      <td>248</td>\n",
       "      <td>1130</td>\n",
       "      <td>674</td>\n",
       "      <td>1125</td>\n",
       "      <td>397</td>\n",
       "      <td>462</td>\n",
       "      <td>172</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>7812</td>\n",
       "      <td>4855</td>\n",
       "      <td>7551</td>\n",
       "      <td>2047</td>\n",
       "      <td>2887</td>\n",
       "      <td>741</td>\n",
       "      <td>826</td>\n",
       "      <td>6806</td>\n",
       "      <td>3863</td>\n",
       "      <td>4947</td>\n",
       "      <td>...</td>\n",
       "      <td>1499</td>\n",
       "      <td>291</td>\n",
       "      <td>316</td>\n",
       "      <td>1388</td>\n",
       "      <td>485</td>\n",
       "      <td>1139</td>\n",
       "      <td>324</td>\n",
       "      <td>576</td>\n",
       "      <td>80</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>8128</td>\n",
       "      <td>4584</td>\n",
       "      <td>11262</td>\n",
       "      <td>1769</td>\n",
       "      <td>3121</td>\n",
       "      <td>624</td>\n",
       "      <td>1459</td>\n",
       "      <td>6841</td>\n",
       "      <td>3418</td>\n",
       "      <td>5132</td>\n",
       "      <td>...</td>\n",
       "      <td>1379</td>\n",
       "      <td>260</td>\n",
       "      <td>483</td>\n",
       "      <td>1306</td>\n",
       "      <td>557</td>\n",
       "      <td>1536</td>\n",
       "      <td>451</td>\n",
       "      <td>647</td>\n",
       "      <td>54</td>\n",
       "      <td>605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>7609</td>\n",
       "      <td>4960</td>\n",
       "      <td>8197</td>\n",
       "      <td>1939</td>\n",
       "      <td>2502</td>\n",
       "      <td>881</td>\n",
       "      <td>330</td>\n",
       "      <td>7468</td>\n",
       "      <td>3746</td>\n",
       "      <td>4883</td>\n",
       "      <td>...</td>\n",
       "      <td>1654</td>\n",
       "      <td>291</td>\n",
       "      <td>276</td>\n",
       "      <td>1532</td>\n",
       "      <td>770</td>\n",
       "      <td>1620</td>\n",
       "      <td>615</td>\n",
       "      <td>725</td>\n",
       "      <td>103</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>14418</td>\n",
       "      <td>10464</td>\n",
       "      <td>9766</td>\n",
       "      <td>2982</td>\n",
       "      <td>3356</td>\n",
       "      <td>2269</td>\n",
       "      <td>346</td>\n",
       "      <td>9687</td>\n",
       "      <td>5543</td>\n",
       "      <td>5763</td>\n",
       "      <td>...</td>\n",
       "      <td>1204</td>\n",
       "      <td>274</td>\n",
       "      <td>206</td>\n",
       "      <td>1559</td>\n",
       "      <td>862</td>\n",
       "      <td>617</td>\n",
       "      <td>352</td>\n",
       "      <td>342</td>\n",
       "      <td>272</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>9489</td>\n",
       "      <td>5489</td>\n",
       "      <td>7953</td>\n",
       "      <td>2373</td>\n",
       "      <td>2862</td>\n",
       "      <td>1792</td>\n",
       "      <td>819</td>\n",
       "      <td>8051</td>\n",
       "      <td>5192</td>\n",
       "      <td>5459</td>\n",
       "      <td>...</td>\n",
       "      <td>1708</td>\n",
       "      <td>178</td>\n",
       "      <td>241</td>\n",
       "      <td>1131</td>\n",
       "      <td>672</td>\n",
       "      <td>785</td>\n",
       "      <td>434</td>\n",
       "      <td>427</td>\n",
       "      <td>169</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>8998</td>\n",
       "      <td>4055</td>\n",
       "      <td>10105</td>\n",
       "      <td>1443</td>\n",
       "      <td>4076</td>\n",
       "      <td>544</td>\n",
       "      <td>1717</td>\n",
       "      <td>6797</td>\n",
       "      <td>3587</td>\n",
       "      <td>5759</td>\n",
       "      <td>...</td>\n",
       "      <td>1429</td>\n",
       "      <td>266</td>\n",
       "      <td>345</td>\n",
       "      <td>1116</td>\n",
       "      <td>523</td>\n",
       "      <td>1083</td>\n",
       "      <td>325</td>\n",
       "      <td>600</td>\n",
       "      <td>101</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>9252</td>\n",
       "      <td>5288</td>\n",
       "      <td>9909</td>\n",
       "      <td>2162</td>\n",
       "      <td>3536</td>\n",
       "      <td>887</td>\n",
       "      <td>811</td>\n",
       "      <td>8079</td>\n",
       "      <td>4458</td>\n",
       "      <td>5695</td>\n",
       "      <td>...</td>\n",
       "      <td>1477</td>\n",
       "      <td>281</td>\n",
       "      <td>391</td>\n",
       "      <td>1014</td>\n",
       "      <td>525</td>\n",
       "      <td>1267</td>\n",
       "      <td>332</td>\n",
       "      <td>750</td>\n",
       "      <td>104</td>\n",
       "      <td>165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    NSW - hol  VIC - hol  QLD - hol  SA - hol  WA - hol  TAS - hol  NT - hol  \\\n",
       "20       8915       5615       7392      2187      3155       1269       676   \n",
       "21       8249       4810      11900      1762      3330        432      1208   \n",
       "22       9154       5214       9858      1940      2853       1173       477   \n",
       "23      13353       9601       8990      3210      4316       2391       230   \n",
       "24       9191       5891       8054      2118      2478       1178       547   \n",
       "25       8525       4646      12995      1681      3869        351      1576   \n",
       "26       8738       5145       9073      1875      2870       1108       261   \n",
       "27      15026      10246       9844      2873      3569       2199       286   \n",
       "28       7812       4855       7551      2047      2887        741       826   \n",
       "29       8128       4584      11262      1769      3121        624      1459   \n",
       "30       7609       4960       8197      1939      2502        881       330   \n",
       "31      14418      10464       9766      2982      3356       2269       346   \n",
       "32       9489       5489       7953      2373      2862       1792       819   \n",
       "33       8998       4055      10105      1443      4076        544      1717   \n",
       "34       9252       5288       9909      2162      3536        887       811   \n",
       "\n",
       "    NSW - vfr  VIC - vfr  QLD - vfr  ...  WA - bus  TAS - bus  NT - bus  \\\n",
       "20       7546       5012       6075  ...      1116        254       379   \n",
       "21       7838       3778       6574  ...      1426        313       273   \n",
       "22       8887       5484       5342  ...      1698        255       526   \n",
       "23      10864       6296       6499  ...       835        280       519   \n",
       "24       8799       4968       5328  ...      1337        346       319   \n",
       "25       7892       3995       7068  ...      1752        353       391   \n",
       "26       8998       4543       5861  ...      2076        310       179   \n",
       "27       9836       6364       6838  ...       918        302       248   \n",
       "28       6806       3863       4947  ...      1499        291       316   \n",
       "29       6841       3418       5132  ...      1379        260       483   \n",
       "30       7468       3746       4883  ...      1654        291       276   \n",
       "31       9687       5543       5763  ...      1204        274       206   \n",
       "32       8051       5192       5459  ...      1708        178       241   \n",
       "33       6797       3587       5759  ...      1429        266       345   \n",
       "34       8079       4458       5695  ...      1477        281       391   \n",
       "\n",
       "    NSW - oth  VIC - oth  QLD - oth  SA - oth  WA - oth  TAS - oth  NT - oth  \n",
       "20       1461        594        977       456       317        422       163  \n",
       "21       1304        696       1514       493      1203        179       620  \n",
       "22       1147        616       1741       405      1018        176       183  \n",
       "23       1039        753        728       368       543        199        41  \n",
       "24        963        787        797       354       552        118        80  \n",
       "25       1179        522       1553       399       918         62       312  \n",
       "26       2175        600       1543       705      1265         98       283  \n",
       "27       1130        674       1125       397       462        172        94  \n",
       "28       1388        485       1139       324       576         80       130  \n",
       "29       1306        557       1536       451       647         54       605  \n",
       "30       1532        770       1620       615       725        103       108  \n",
       "31       1559        862        617       352       342        272        75  \n",
       "32       1131        672        785       434       427        169        81  \n",
       "33       1116        523       1083       325       600        101       149  \n",
       "34       1014        525       1267       332       750        104       165  \n",
       "\n",
       "[15 rows x 28 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Actual Values for next 4 years (Actual - From Dataset)\n",
    "actual_df = pd.DataFrame(newdatay[:,-1,:], index = list(range(20,35))) # data for next 4 years\n",
    "\n",
    "for i in range(len(test.columns)):\n",
    "    actual_df = actual_df.rename(columns={i: df.iloc[:,56:84].columns[i]}) # df is orignal dataframe \n",
    "actual_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NSW - hol</th>\n",
       "      <th>VIC - hol</th>\n",
       "      <th>QLD - hol</th>\n",
       "      <th>SA - hol</th>\n",
       "      <th>WA - hol</th>\n",
       "      <th>TAS - hol</th>\n",
       "      <th>NT - hol</th>\n",
       "      <th>NSW - vfr</th>\n",
       "      <th>VIC - vfr</th>\n",
       "      <th>QLD - vfr</th>\n",
       "      <th>...</th>\n",
       "      <th>WA - bus</th>\n",
       "      <th>TAS - bus</th>\n",
       "      <th>NT - bus</th>\n",
       "      <th>NSW - oth</th>\n",
       "      <th>VIC - oth</th>\n",
       "      <th>QLD - oth</th>\n",
       "      <th>SA - oth</th>\n",
       "      <th>WA - oth</th>\n",
       "      <th>TAS - oth</th>\n",
       "      <th>NT - oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>8980.533363</td>\n",
       "      <td>5906.137146</td>\n",
       "      <td>7519.592865</td>\n",
       "      <td>2235.550922</td>\n",
       "      <td>3186.135969</td>\n",
       "      <td>1307.704826</td>\n",
       "      <td>690.129355</td>\n",
       "      <td>7581.819626</td>\n",
       "      <td>5034.741369</td>\n",
       "      <td>6076.835657</td>\n",
       "      <td>...</td>\n",
       "      <td>1080.965733</td>\n",
       "      <td>255.739308</td>\n",
       "      <td>404.539831</td>\n",
       "      <td>1494.752510</td>\n",
       "      <td>624.225487</td>\n",
       "      <td>1014.241028</td>\n",
       "      <td>458.119078</td>\n",
       "      <td>355.504990</td>\n",
       "      <td>438.562300</td>\n",
       "      <td>170.521951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>8213.889950</td>\n",
       "      <td>5014.907791</td>\n",
       "      <td>11997.012695</td>\n",
       "      <td>1790.392540</td>\n",
       "      <td>3335.369568</td>\n",
       "      <td>447.862892</td>\n",
       "      <td>1207.877161</td>\n",
       "      <td>7841.051299</td>\n",
       "      <td>3765.574350</td>\n",
       "      <td>6553.529207</td>\n",
       "      <td>...</td>\n",
       "      <td>1381.048229</td>\n",
       "      <td>311.172191</td>\n",
       "      <td>288.354041</td>\n",
       "      <td>1328.378460</td>\n",
       "      <td>717.177977</td>\n",
       "      <td>1539.979477</td>\n",
       "      <td>490.999175</td>\n",
       "      <td>1221.678617</td>\n",
       "      <td>193.088329</td>\n",
       "      <td>619.599510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>9231.152351</td>\n",
       "      <td>5514.498474</td>\n",
       "      <td>9989.224808</td>\n",
       "      <td>1990.485115</td>\n",
       "      <td>2886.606464</td>\n",
       "      <td>1214.350780</td>\n",
       "      <td>492.806368</td>\n",
       "      <td>8927.236343</td>\n",
       "      <td>5510.474117</td>\n",
       "      <td>5346.069288</td>\n",
       "      <td>...</td>\n",
       "      <td>1663.882366</td>\n",
       "      <td>257.239751</td>\n",
       "      <td>552.698292</td>\n",
       "      <td>1181.845318</td>\n",
       "      <td>647.315722</td>\n",
       "      <td>1779.323471</td>\n",
       "      <td>407.559247</td>\n",
       "      <td>1058.648006</td>\n",
       "      <td>192.835299</td>\n",
       "      <td>191.220867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>13335.351902</td>\n",
       "      <td>9820.968246</td>\n",
       "      <td>9092.484375</td>\n",
       "      <td>3241.737833</td>\n",
       "      <td>4325.852409</td>\n",
       "      <td>2410.710243</td>\n",
       "      <td>232.389557</td>\n",
       "      <td>10872.510026</td>\n",
       "      <td>6289.633503</td>\n",
       "      <td>6482.410700</td>\n",
       "      <td>...</td>\n",
       "      <td>791.796886</td>\n",
       "      <td>278.768321</td>\n",
       "      <td>536.141129</td>\n",
       "      <td>1064.932226</td>\n",
       "      <td>775.692530</td>\n",
       "      <td>756.040607</td>\n",
       "      <td>366.718031</td>\n",
       "      <td>565.160309</td>\n",
       "      <td>213.518195</td>\n",
       "      <td>41.972801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>9281.480812</td>\n",
       "      <td>6202.955017</td>\n",
       "      <td>8189.487030</td>\n",
       "      <td>2171.080879</td>\n",
       "      <td>2515.054176</td>\n",
       "      <td>1222.298702</td>\n",
       "      <td>564.720224</td>\n",
       "      <td>8843.320095</td>\n",
       "      <td>4999.124952</td>\n",
       "      <td>5335.128469</td>\n",
       "      <td>...</td>\n",
       "      <td>1304.231335</td>\n",
       "      <td>348.678617</td>\n",
       "      <td>347.035686</td>\n",
       "      <td>999.045162</td>\n",
       "      <td>819.457878</td>\n",
       "      <td>836.872677</td>\n",
       "      <td>357.107535</td>\n",
       "      <td>595.345070</td>\n",
       "      <td>135.165321</td>\n",
       "      <td>89.293616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>8411.318619</td>\n",
       "      <td>4785.089584</td>\n",
       "      <td>13068.018639</td>\n",
       "      <td>1694.293342</td>\n",
       "      <td>3855.164538</td>\n",
       "      <td>349.104156</td>\n",
       "      <td>1564.674677</td>\n",
       "      <td>7868.376675</td>\n",
       "      <td>3955.801922</td>\n",
       "      <td>7030.787712</td>\n",
       "      <td>...</td>\n",
       "      <td>1699.721279</td>\n",
       "      <td>348.243863</td>\n",
       "      <td>398.459281</td>\n",
       "      <td>1196.031092</td>\n",
       "      <td>536.022185</td>\n",
       "      <td>1570.633888</td>\n",
       "      <td>393.846623</td>\n",
       "      <td>921.519631</td>\n",
       "      <td>74.188961</td>\n",
       "      <td>305.809057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>8837.425934</td>\n",
       "      <td>5464.185211</td>\n",
       "      <td>9211.016006</td>\n",
       "      <td>1929.776882</td>\n",
       "      <td>2909.119167</td>\n",
       "      <td>1154.334599</td>\n",
       "      <td>280.003973</td>\n",
       "      <td>9045.685867</td>\n",
       "      <td>4577.088345</td>\n",
       "      <td>5869.823845</td>\n",
       "      <td>...</td>\n",
       "      <td>2043.983624</td>\n",
       "      <td>313.058111</td>\n",
       "      <td>207.947243</td>\n",
       "      <td>2211.892162</td>\n",
       "      <td>633.341377</td>\n",
       "      <td>1583.733677</td>\n",
       "      <td>708.457836</td>\n",
       "      <td>1309.935299</td>\n",
       "      <td>115.372051</td>\n",
       "      <td>292.883099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>15075.577881</td>\n",
       "      <td>10522.640472</td>\n",
       "      <td>9966.745171</td>\n",
       "      <td>2918.017460</td>\n",
       "      <td>3595.657391</td>\n",
       "      <td>2233.932014</td>\n",
       "      <td>297.957644</td>\n",
       "      <td>9867.101540</td>\n",
       "      <td>6380.812042</td>\n",
       "      <td>6835.885761</td>\n",
       "      <td>...</td>\n",
       "      <td>881.195248</td>\n",
       "      <td>303.242366</td>\n",
       "      <td>271.927809</td>\n",
       "      <td>1162.218521</td>\n",
       "      <td>702.852642</td>\n",
       "      <td>1160.292709</td>\n",
       "      <td>398.439459</td>\n",
       "      <td>497.132435</td>\n",
       "      <td>188.146868</td>\n",
       "      <td>100.067456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>7825.443451</td>\n",
       "      <td>5101.669830</td>\n",
       "      <td>7663.132240</td>\n",
       "      <td>2084.869709</td>\n",
       "      <td>2904.689577</td>\n",
       "      <td>767.844744</td>\n",
       "      <td>832.766112</td>\n",
       "      <td>6824.715250</td>\n",
       "      <td>3867.472187</td>\n",
       "      <td>4937.407127</td>\n",
       "      <td>...</td>\n",
       "      <td>1458.826939</td>\n",
       "      <td>290.874582</td>\n",
       "      <td>336.259701</td>\n",
       "      <td>1416.871414</td>\n",
       "      <td>510.455021</td>\n",
       "      <td>1170.462725</td>\n",
       "      <td>323.979731</td>\n",
       "      <td>604.373133</td>\n",
       "      <td>95.289414</td>\n",
       "      <td>133.393830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>7906.666336</td>\n",
       "      <td>4631.211964</td>\n",
       "      <td>11302.568424</td>\n",
       "      <td>1760.928429</td>\n",
       "      <td>3079.984081</td>\n",
       "      <td>597.601830</td>\n",
       "      <td>1432.459133</td>\n",
       "      <td>6781.598534</td>\n",
       "      <td>3341.447067</td>\n",
       "      <td>5071.392399</td>\n",
       "      <td>...</td>\n",
       "      <td>1316.280907</td>\n",
       "      <td>251.326449</td>\n",
       "      <td>479.527782</td>\n",
       "      <td>1312.937428</td>\n",
       "      <td>561.264051</td>\n",
       "      <td>1541.722234</td>\n",
       "      <td>441.459749</td>\n",
       "      <td>629.494003</td>\n",
       "      <td>63.552245</td>\n",
       "      <td>590.521466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>7770.462555</td>\n",
       "      <td>5331.586426</td>\n",
       "      <td>8353.883560</td>\n",
       "      <td>2005.996078</td>\n",
       "      <td>2556.622532</td>\n",
       "      <td>941.418915</td>\n",
       "      <td>357.828390</td>\n",
       "      <td>7536.435669</td>\n",
       "      <td>3801.517075</td>\n",
       "      <td>4905.296535</td>\n",
       "      <td>...</td>\n",
       "      <td>1627.895912</td>\n",
       "      <td>296.329550</td>\n",
       "      <td>311.183048</td>\n",
       "      <td>1574.689007</td>\n",
       "      <td>808.996033</td>\n",
       "      <td>1667.417053</td>\n",
       "      <td>620.967052</td>\n",
       "      <td>781.976124</td>\n",
       "      <td>121.880535</td>\n",
       "      <td>122.604525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>14412.710000</td>\n",
       "      <td>10694.311447</td>\n",
       "      <td>9872.066071</td>\n",
       "      <td>3016.195454</td>\n",
       "      <td>3368.956290</td>\n",
       "      <td>2291.464857</td>\n",
       "      <td>350.166804</td>\n",
       "      <td>9699.744458</td>\n",
       "      <td>5540.873132</td>\n",
       "      <td>5748.973845</td>\n",
       "      <td>...</td>\n",
       "      <td>1161.961651</td>\n",
       "      <td>273.235452</td>\n",
       "      <td>224.416815</td>\n",
       "      <td>1586.071714</td>\n",
       "      <td>885.858074</td>\n",
       "      <td>646.385977</td>\n",
       "      <td>351.219372</td>\n",
       "      <td>366.471764</td>\n",
       "      <td>286.811846</td>\n",
       "      <td>76.893402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>9578.386276</td>\n",
       "      <td>5799.928467</td>\n",
       "      <td>8088.219955</td>\n",
       "      <td>2425.817513</td>\n",
       "      <td>2898.691544</td>\n",
       "      <td>1836.069950</td>\n",
       "      <td>836.562487</td>\n",
       "      <td>8095.066616</td>\n",
       "      <td>5222.701893</td>\n",
       "      <td>5465.907518</td>\n",
       "      <td>...</td>\n",
       "      <td>1675.087360</td>\n",
       "      <td>180.647556</td>\n",
       "      <td>268.911636</td>\n",
       "      <td>1166.967064</td>\n",
       "      <td>704.359684</td>\n",
       "      <td>824.695007</td>\n",
       "      <td>437.054497</td>\n",
       "      <td>470.139412</td>\n",
       "      <td>186.138201</td>\n",
       "      <td>90.178885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>8923.596848</td>\n",
       "      <td>4226.836121</td>\n",
       "      <td>10190.017715</td>\n",
       "      <td>1463.657919</td>\n",
       "      <td>4071.681126</td>\n",
       "      <td>550.855980</td>\n",
       "      <td>1711.323216</td>\n",
       "      <td>6786.667058</td>\n",
       "      <td>3561.049984</td>\n",
       "      <td>5729.967592</td>\n",
       "      <td>...</td>\n",
       "      <td>1380.356533</td>\n",
       "      <td>262.714292</td>\n",
       "      <td>356.428122</td>\n",
       "      <td>1136.624641</td>\n",
       "      <td>540.586725</td>\n",
       "      <td>1104.851547</td>\n",
       "      <td>321.421573</td>\n",
       "      <td>611.030281</td>\n",
       "      <td>114.130868</td>\n",
       "      <td>145.651293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>9264.195001</td>\n",
       "      <td>5533.971649</td>\n",
       "      <td>10020.432068</td>\n",
       "      <td>2199.926689</td>\n",
       "      <td>3553.583157</td>\n",
       "      <td>913.724985</td>\n",
       "      <td>817.515821</td>\n",
       "      <td>8097.315557</td>\n",
       "      <td>4462.253743</td>\n",
       "      <td>5685.154989</td>\n",
       "      <td>...</td>\n",
       "      <td>1436.782242</td>\n",
       "      <td>280.836266</td>\n",
       "      <td>411.147120</td>\n",
       "      <td>1042.809469</td>\n",
       "      <td>550.390186</td>\n",
       "      <td>1298.358967</td>\n",
       "      <td>331.945594</td>\n",
       "      <td>778.123631</td>\n",
       "      <td>119.266507</td>\n",
       "      <td>168.388264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       NSW - hol     VIC - hol     QLD - hol     SA - hol     WA - hol  \\\n",
       "20   8980.533363   5906.137146   7519.592865  2235.550922  3186.135969   \n",
       "21   8213.889950   5014.907791  11997.012695  1790.392540  3335.369568   \n",
       "22   9231.152351   5514.498474   9989.224808  1990.485115  2886.606464   \n",
       "23  13335.351902   9820.968246   9092.484375  3241.737833  4325.852409   \n",
       "24   9281.480812   6202.955017   8189.487030  2171.080879  2515.054176   \n",
       "25   8411.318619   4785.089584  13068.018639  1694.293342  3855.164538   \n",
       "26   8837.425934   5464.185211   9211.016006  1929.776882  2909.119167   \n",
       "27  15075.577881  10522.640472   9966.745171  2918.017460  3595.657391   \n",
       "28   7825.443451   5101.669830   7663.132240  2084.869709  2904.689577   \n",
       "29   7906.666336   4631.211964  11302.568424  1760.928429  3079.984081   \n",
       "30   7770.462555   5331.586426   8353.883560  2005.996078  2556.622532   \n",
       "31  14412.710000  10694.311447   9872.066071  3016.195454  3368.956290   \n",
       "32   9578.386276   5799.928467   8088.219955  2425.817513  2898.691544   \n",
       "33   8923.596848   4226.836121  10190.017715  1463.657919  4071.681126   \n",
       "34   9264.195001   5533.971649  10020.432068  2199.926689  3553.583157   \n",
       "\n",
       "      TAS - hol     NT - hol     NSW - vfr    VIC - vfr    QLD - vfr  ...  \\\n",
       "20  1307.704826   690.129355   7581.819626  5034.741369  6076.835657  ...   \n",
       "21   447.862892  1207.877161   7841.051299  3765.574350  6553.529207  ...   \n",
       "22  1214.350780   492.806368   8927.236343  5510.474117  5346.069288  ...   \n",
       "23  2410.710243   232.389557  10872.510026  6289.633503  6482.410700  ...   \n",
       "24  1222.298702   564.720224   8843.320095  4999.124952  5335.128469  ...   \n",
       "25   349.104156  1564.674677   7868.376675  3955.801922  7030.787712  ...   \n",
       "26  1154.334599   280.003973   9045.685867  4577.088345  5869.823845  ...   \n",
       "27  2233.932014   297.957644   9867.101540  6380.812042  6835.885761  ...   \n",
       "28   767.844744   832.766112   6824.715250  3867.472187  4937.407127  ...   \n",
       "29   597.601830  1432.459133   6781.598534  3341.447067  5071.392399  ...   \n",
       "30   941.418915   357.828390   7536.435669  3801.517075  4905.296535  ...   \n",
       "31  2291.464857   350.166804   9699.744458  5540.873132  5748.973845  ...   \n",
       "32  1836.069950   836.562487   8095.066616  5222.701893  5465.907518  ...   \n",
       "33   550.855980  1711.323216   6786.667058  3561.049984  5729.967592  ...   \n",
       "34   913.724985   817.515821   8097.315557  4462.253743  5685.154989  ...   \n",
       "\n",
       "       WA - bus   TAS - bus    NT - bus    NSW - oth   VIC - oth    QLD - oth  \\\n",
       "20  1080.965733  255.739308  404.539831  1494.752510  624.225487  1014.241028   \n",
       "21  1381.048229  311.172191  288.354041  1328.378460  717.177977  1539.979477   \n",
       "22  1663.882366  257.239751  552.698292  1181.845318  647.315722  1779.323471   \n",
       "23   791.796886  278.768321  536.141129  1064.932226  775.692530   756.040607   \n",
       "24  1304.231335  348.678617  347.035686   999.045162  819.457878   836.872677   \n",
       "25  1699.721279  348.243863  398.459281  1196.031092  536.022185  1570.633888   \n",
       "26  2043.983624  313.058111  207.947243  2211.892162  633.341377  1583.733677   \n",
       "27   881.195248  303.242366  271.927809  1162.218521  702.852642  1160.292709   \n",
       "28  1458.826939  290.874582  336.259701  1416.871414  510.455021  1170.462725   \n",
       "29  1316.280907  251.326449  479.527782  1312.937428  561.264051  1541.722234   \n",
       "30  1627.895912  296.329550  311.183048  1574.689007  808.996033  1667.417053   \n",
       "31  1161.961651  273.235452  224.416815  1586.071714  885.858074   646.385977   \n",
       "32  1675.087360  180.647556  268.911636  1166.967064  704.359684   824.695007   \n",
       "33  1380.356533  262.714292  356.428122  1136.624641  540.586725  1104.851547   \n",
       "34  1436.782242  280.836266  411.147120  1042.809469  550.390186  1298.358967   \n",
       "\n",
       "      SA - oth     WA - oth   TAS - oth    NT - oth  \n",
       "20  458.119078   355.504990  438.562300  170.521951  \n",
       "21  490.999175  1221.678617  193.088329  619.599510  \n",
       "22  407.559247  1058.648006  192.835299  191.220867  \n",
       "23  366.718031   565.160309  213.518195   41.972801  \n",
       "24  357.107535   595.345070  135.165321   89.293616  \n",
       "25  393.846623   921.519631   74.188961  305.809057  \n",
       "26  708.457836  1309.935299  115.372051  292.883099  \n",
       "27  398.439459   497.132435  188.146868  100.067456  \n",
       "28  323.979731   604.373133   95.289414  133.393830  \n",
       "29  441.459749   629.494003   63.552245  590.521466  \n",
       "30  620.967052   781.976124  121.880535  122.604525  \n",
       "31  351.219372   366.471764  286.811846   76.893402  \n",
       "32  437.054497   470.139412  186.138201   90.178885  \n",
       "33  321.421573   611.030281  114.130868  145.651293  \n",
       "34  331.945594   778.123631  119.266507  168.388264  \n",
       "\n",
       "[15 rows x 28 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 4 years (predicted)\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,-1,:], index = list(range(20,35))) # forecast for next 4 years\n",
    "\n",
    "for i in range(len(test.columns)):\n",
    "    forecast1_df = forecast1_df.rename(columns={i: df.iloc[:,56:84].columns[i]}) # df is orignal dataframe \n",
    "forecast1_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "id": "wL78hSLOLQil"
   },
   "outputs": [],
   "source": [
    "# Setting x-axis for visualization of plots\n",
    "x = list(range(0, 28))\n",
    "x1 = list(range(max(x)+1, max(x)+29))\n",
    "x2 = list(range(max(x1)+1, max(x1)+29))\n",
    "x3 = list(range(max(x2)+1, max(x2)+29))\n",
    "x4 = list(range(max(x3)+1, max(x3)+29))\n",
    "x5 = list(range(max(x4)+1, max(x4)+29))\n",
    "x6 = list(range(max(x5)+1, max(x5)+29))\n",
    "x7 = list(range(max(x6)+1, max(x6)+29))\n",
    "x8 = list(range(max(x7)+1, max(x7)+29))\n",
    "x9 = list(range(max(x8)+1, max(x8)+29))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 541
    },
    "id": "uliTCKb8LIhH",
    "outputId": "5ed7112d-4599-44aa-b2bb-ab63c5788a2f"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q19",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27
         ],
         "xaxis": "x",
         "y": [
          9041,
          4665,
          11553,
          1810,
          3091,
          544,
          1109,
          8429,
          4091,
          6924,
          1904,
          1738,
          409,
          471,
          4740,
          2224,
          3011,
          838,
          1599,
          686,
          500,
          1617,
          907,
          1814,
          483,
          797,
          309,
          236
         ],
         "yaxis": "y"
        },
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q20",
         "type": "scatter",
         "x": [
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55
         ],
         "xaxis": "x",
         "y": [
          10585,
          5706,
          9596,
          2178,
          2651,
          1023,
          1051,
          9235,
          5150,
          5047,
          1563,
          1791,
          447,
          233,
          3744,
          2023,
          2678,
          849,
          1511,
          345,
          1014,
          1420,
          1328,
          2210,
          428,
          1270,
          131,
          456
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q21",
         "type": "scatter",
         "x": [
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83
         ],
         "xaxis": "x",
         "y": [
          8980.533363342285,
          5906.137145996094,
          7519.592864990234,
          2235.550922393799,
          3186.1359691619873,
          1307.7048263549805,
          690.129355430603,
          7581.819625854492,
          5034.7413692474365,
          6076.835657119751,
          1729.3112688064575,
          1778.3987197875977,
          597.6246528625488,
          290.08102464675903,
          3533.5806999206543,
          2190.2933044433594,
          2256.1151514053345,
          845.9650130271912,
          1080.965732574463,
          255.73930776119232,
          404.539831161499,
          1494.7525100708008,
          624.2254867553711,
          1014.2410278320312,
          458.1190779209137,
          355.50498962402344,
          438.56229972839355,
          170.52195072174072
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q22",
         "type": "scatter",
         "x": [
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111
         ],
         "xaxis": "x",
         "y": [
          8213.889949798584,
          5014.907791137695,
          11997.0126953125,
          1790.3925399780273,
          3335.3695678710938,
          447.8628921508789,
          1207.8771609067917,
          7841.051298618317,
          3765.5743503570557,
          6553.529207229614,
          1458.8645396232605,
          2236.9480743408203,
          282.8299388885498,
          293.3743736743927,
          3451.621693611145,
          1883.2698307037354,
          2723.7779788970947,
          1095.0539565086365,
          1381.0482292175293,
          311.1721910238266,
          288.35404109954834,
          1328.37845993042,
          717.1779766082764,
          1539.979476928711,
          490.99917483329773,
          1221.678617477417,
          193.08832931518555,
          619.5995099544525
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q22",
         "type": "scatter",
         "x": [
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139
         ],
         "xaxis": "x",
         "y": [
          9231.152351379395,
          5514.498474121094,
          9989.224807739258,
          1990.4851150512695,
          2886.6064643859863,
          1214.3507804870605,
          492.8063678741455,
          8927.236343383789,
          5510.474117279053,
          5346.069288253784,
          1594.4708013534546,
          2308.045129776001,
          874.1082906723022,
          215.47689819335938,
          3746.9145641326904,
          1461.781530380249,
          2431.542963027954,
          895.6070437431335,
          1663.88236618042,
          257.23975133895874,
          552.6982917785645,
          1181.8453178405762,
          647.3157215118408,
          1779.323471069336,
          407.5592465400696,
          1058.648006439209,
          192.835298538208,
          191.22086715698242
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Visualization of previous 2 quarters vs next 3 quarters - forecasting"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "examples"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>actual features</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>predictions features</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"d819b823-74dc-41fa-b6ff-9163bee531c3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d819b823-74dc-41fa-b6ff-9163bee531c3\")) {                    Plotly.newPlot(                        \"d819b823-74dc-41fa-b6ff-9163bee531c3\",                        [{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q19\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\"y\":[9041,4665,11553,1810,3091,544,1109,8429,4091,6924,1904,1738,409,471,4740,2224,3011,838,1599,686,500,1617,907,1814,483,797,309,236],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q20\",\"x\":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],\"y\":[10585,5706,9596,2178,2651,1023,1051,9235,5150,5047,1563,1791,447,233,3744,2023,2678,849,1511,345,1014,1420,1328,2210,428,1270,131,456],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q21\",\"x\":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],\"y\":[8980.533363342285,5906.137145996094,7519.592864990234,2235.550922393799,3186.1359691619873,1307.7048263549805,690.129355430603,7581.819625854492,5034.7413692474365,6076.835657119751,1729.3112688064575,1778.3987197875977,597.6246528625488,290.08102464675903,3533.5806999206543,2190.2933044433594,2256.1151514053345,845.9650130271912,1080.965732574463,255.73930776119232,404.539831161499,1494.7525100708008,624.2254867553711,1014.2410278320312,458.1190779209137,355.50498962402344,438.56229972839355,170.52195072174072],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q22\",\"x\":[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],\"y\":[8213.889949798584,5014.907791137695,11997.0126953125,1790.3925399780273,3335.3695678710938,447.8628921508789,1207.8771609067917,7841.051298618317,3765.5743503570557,6553.529207229614,1458.8645396232605,2236.9480743408203,282.8299388885498,293.3743736743927,3451.621693611145,1883.2698307037354,2723.7779788970947,1095.0539565086365,1381.0482292175293,311.1721910238266,288.35404109954834,1328.37845993042,717.1779766082764,1539.979476928711,490.99917483329773,1221.678617477417,193.08832931518555,619.5995099544525],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q22\",\"x\":[112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139],\"y\":[9231.152351379395,5514.498474121094,9989.224807739258,1990.4851150512695,2886.6064643859863,1214.3507804870605,492.8063678741455,8927.236343383789,5510.474117279053,5346.069288253784,1594.4708013534546,2308.045129776001,874.1082906723022,215.47689819335938,3746.9145641326904,1461.781530380249,2431.542963027954,895.6070437431335,1663.88236618042,257.23975133895874,552.6982917785645,1181.8453178405762,647.3157215118408,1779.323471069336,407.5592465400696,1058.648006439209,192.835298538208,191.22086715698242],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"examples\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>actual features</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>predictions features</b>\"}},\"title\":{\"text\":\"Visualization of previous 2 quarters vs next 3 quarters - forecasting\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('d819b823-74dc-41fa-b6ff-9163bee531c3');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "prev_val1 = first_daily_df[:20].values[-2] # Quarter No 19 values\n",
    "prev_val2 = first_daily_df[:20].values[-1] # Quarter No 20 values\n",
    "\n",
    "forc_val1 = pred_aus[:,-1,:][0] # Predicted # Quarter No 21 values\n",
    "forc_val2 = pred_aus[:,-1,:][1] # Predicted # Quarter No 22 values\n",
    "forc_val3 = pred_aus[:,-1,:][2] # Predicted # Quarter No 23 values\n",
    "# WE can have a forecast upto 36 quarters which we can compare\n",
    "# after that we can use the last forecast one to make even more!\n",
    "\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(x = x, y=prev_val1, name=\"Train - Q19\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x1, y=prev_val2, name=\"Train - Q20\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x2, y=forc_val1, name=\"Forecast - Q21\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x3, y=forc_val2, name=\"Forecast - Q22\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x4, y=forc_val3, name=\"Forecast - Q22\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "#can be forecasted upto 36 quarters!\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Visualization of previous 2 quarters vs next 3 quarters - forecasting\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"examples\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>actual features</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>predictions features</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Level 1 (middle): \n",
    "Total visitors according to the purpose of travel, with total four travel purposes;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Pbq-eN-ILrOY"
   },
   "source": [
    "#Taking the next columns from 84-88"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "rVGjsKtaMcBn",
    "outputId": "8389a070-0777-4b85-c8a8-2279537f27c1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hol</th>\n",
       "      <th>vfr</th>\n",
       "      <th>bus</th>\n",
       "      <th>oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-16559.0</td>\n",
       "      <td>-5366.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>726.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3145.0</td>\n",
       "      <td>-94.0</td>\n",
       "      <td>1742.0</td>\n",
       "      <td>2648.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-679.0</td>\n",
       "      <td>1031.0</td>\n",
       "      <td>-2087.0</td>\n",
       "      <td>-138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14980.0</td>\n",
       "      <td>5334.0</td>\n",
       "      <td>-1451.0</td>\n",
       "      <td>-2850.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-15351.0</td>\n",
       "      <td>-7466.0</td>\n",
       "      <td>1848.0</td>\n",
       "      <td>942.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3181.0</td>\n",
       "      <td>545.0</td>\n",
       "      <td>-162.0</td>\n",
       "      <td>1752.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-3505.0</td>\n",
       "      <td>405.0</td>\n",
       "      <td>-1131.0</td>\n",
       "      <td>367.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>15912.0</td>\n",
       "      <td>3853.0</td>\n",
       "      <td>-848.0</td>\n",
       "      <td>-1584.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-16178.0</td>\n",
       "      <td>-4854.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>-1008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3305.0</td>\n",
       "      <td>-72.0</td>\n",
       "      <td>721.0</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>-1825.0</td>\n",
       "      <td>2476.0</td>\n",
       "      <td>1764.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11740.0</td>\n",
       "      <td>1627.0</td>\n",
       "      <td>-4044.0</td>\n",
       "      <td>-1793.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-11822.0</td>\n",
       "      <td>-3110.0</td>\n",
       "      <td>1335.0</td>\n",
       "      <td>1179.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>9.0</td>\n",
       "      <td>525.0</td>\n",
       "      <td>1522.0</td>\n",
       "      <td>-174.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>-222.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>-835.0</td>\n",
       "      <td>2436.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>12851.0</td>\n",
       "      <td>3712.0</td>\n",
       "      <td>-1229.0</td>\n",
       "      <td>-2841.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>-15989.0</td>\n",
       "      <td>-4229.0</td>\n",
       "      <td>594.0</td>\n",
       "      <td>-785.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2914.0</td>\n",
       "      <td>3390.0</td>\n",
       "      <td>3180.0</td>\n",
       "      <td>2527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>977.0</td>\n",
       "      <td>-500.0</td>\n",
       "      <td>-1434.0</td>\n",
       "      <td>1080.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Hol     vfr     bus     oth\n",
       "0       NaN     NaN     NaN     NaN\n",
       "1  -16559.0 -5366.0  2008.0   726.0\n",
       "2    3145.0   -94.0  1742.0  2648.0\n",
       "3    -679.0  1031.0 -2087.0  -138.0\n",
       "4   14980.0  5334.0 -1451.0 -2850.0\n",
       "5  -15351.0 -7466.0  1848.0   942.0\n",
       "6    3181.0   545.0  -162.0  1752.0\n",
       "7   -3505.0   405.0 -1131.0   367.0\n",
       "8   15912.0  3853.0  -848.0 -1584.0\n",
       "9  -16178.0 -4854.0   856.0 -1008.0\n",
       "10   3305.0   -72.0   721.0  1995.0\n",
       "11  -1825.0  2476.0  1764.0    24.0\n",
       "12  11740.0  1627.0 -4044.0 -1793.0\n",
       "13 -11822.0 -3110.0  1335.0  1179.0\n",
       "14      9.0   525.0  1522.0  -174.0\n",
       "15   -222.0   217.0  -835.0  2436.0\n",
       "16  12851.0  3712.0 -1229.0 -2841.0\n",
       "17 -15989.0 -4229.0   594.0  -785.0\n",
       "18   2914.0  3390.0  3180.0  2527.0\n",
       "19    977.0  -500.0 -1434.0  1080.0"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_daily_df=df.iloc[:,84:88]\n",
    "difference=first_daily_df.diff()\n",
    "difference[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7jUR0eHtLdkG",
    "outputId": "ea7ef7b6-312e-47b6-cf34-171db1c3177c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-83-254159392337>:16: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:16: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:16: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:16: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:23: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:23: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:23: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-83-254159392337>:23: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n_past = 1\n",
    "n_future = 8 # forecasting for next 8 steps\n",
    "no_of_features = 4 # now we have 4 features\n",
    "\n",
    "#Spltting first 20 for training and remaining for testing\n",
    "train_dataF,test_dataF = difference[0:20], difference[20:] \n",
    "train = train_dataF\n",
    "\n",
    "#Scaling the values for faster training of the models.\n",
    "scalers={}\n",
    "for i in train_dataF.columns:\n",
    "    scaler = MinMaxScaler(feature_range=(0,1))\n",
    "    s_s = scaler.fit_transform(train[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+ i] = scaler\n",
    "    train[i]=s_s\n",
    "test = test_dataF\n",
    "for i in train_dataF.columns:\n",
    "    scaler = scalers['scaler_'+i]\n",
    "    s_s = scaler.transform(test[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+i] = scaler\n",
    "    test[i]=s_s\n",
    "\n",
    "X_train, y_train = split_series(train.values,n_past, n_future)\n",
    "X_train = X_train.reshape((X_train.shape[0], X_train.shape[1],no_of_features))\n",
    "y_train = y_train.reshape((y_train.shape[0], y_train.shape[1], no_of_features))\n",
    "where_are_NaNs = np.isnan(X_train)\n",
    "X_train[where_are_NaNs] = 0\n",
    "X_test, y_test = split_series(test.values,n_past, n_future)\n",
    "X_test = X_test.reshape((X_test.shape[0], X_test.shape[1],no_of_features))\n",
    "y_test = y_test.reshape((y_test.shape[0], y_test.shape[1], no_of_features))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dkZonPINON-n",
    "outputId": "74d53c8d-13b8-42cd-f3d6-75c9895aa204"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 1, 56)\n",
      "(12, 8, 4)\n",
      "(8, 1, 56)\n",
      "(8, 8, 4)\n"
     ]
    }
   ],
   "source": [
    "#Padding zeros to overcome the dimension errors\n",
    "\n",
    "#Beacuse we need to need have 56 columns to re-use the aus(1step).h5 [model no 1] \n",
    "# So we pad 52 columns of zeros (z_train) to our data using concatenate function\n",
    "\n",
    "z_train=np.zeros((20-n_future,n_past,52))\n",
    "X_train = np.concatenate([X_train, z_train], -1)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "z_test=np.zeros((16-n_future,n_past,52))\n",
    "X_test = np.concatenate([X_test, z_test], -1)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "rawdataX,rawdatay=split_series(first_daily_df.values,n_past, n_future)\n",
    "rawdatay = rawdatay[20:, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EJEav9zOOKM2",
    "outputId": "2af11b02-7f43-4ca3-e5ca-c0da64f60fff"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_input (InputLayer)     [(None, 1, 56)]           0         \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 1, 10)             2680      \n",
      "                                                                 \n",
      " lstm_1 (LSTM)               (None, 7)                 504       \n",
      "                                                                 \n",
      " repeat_vector (RepeatVector  (None, 1, 7)             0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " lstm_2 (LSTM)               (None, 1, 7)              420       \n",
      "                                                                 \n",
      " lstm_3 (LSTM)               (None, 1, 10)             720       \n",
      "                                                                 \n",
      " time_distributed (TimeDistr  (None, 1, 56)            616       \n",
      " ibuted)                                                         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 1, 4)              228       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 5,168\n",
      "Trainable params: 844\n",
      "Non-trainable params: 4,324\n",
      "_________________________________________________________________\n",
      "Epoch 1/300\n",
      "1/1 - 24s - loss: 0.6755 - val_loss: 0.6404 - 24s/epoch - 24s/step\n",
      "Epoch 2/300\n",
      "1/1 - 0s - loss: 0.6335 - val_loss: 0.5993 - 90ms/epoch - 90ms/step\n",
      "Epoch 3/300\n",
      "1/1 - 0s - loss: 0.5933 - val_loss: 0.5602 - 84ms/epoch - 84ms/step\n",
      "Epoch 4/300\n",
      "1/1 - 0s - loss: 0.5549 - val_loss: 0.5229 - 85ms/epoch - 85ms/step\n",
      "Epoch 5/300\n",
      "1/1 - 0s - loss: 0.5184 - val_loss: 0.4874 - 87ms/epoch - 87ms/step\n",
      "Epoch 6/300\n",
      "1/1 - 0s - loss: 0.4836 - val_loss: 0.4538 - 79ms/epoch - 79ms/step\n",
      "Epoch 7/300\n",
      "1/1 - 0s - loss: 0.4507 - val_loss: 0.4221 - 88ms/epoch - 88ms/step\n",
      "Epoch 8/300\n",
      "1/1 - 0s - loss: 0.4196 - val_loss: 0.3920 - 80ms/epoch - 80ms/step\n",
      "Epoch 9/300\n",
      "1/1 - 0s - loss: 0.3901 - val_loss: 0.3637 - 79ms/epoch - 79ms/step\n",
      "Epoch 10/300\n",
      "1/1 - 0s - loss: 0.3624 - val_loss: 0.3371 - 93ms/epoch - 93ms/step\n",
      "Epoch 11/300\n",
      "1/1 - 0s - loss: 0.3363 - val_loss: 0.3121 - 82ms/epoch - 82ms/step\n",
      "Epoch 12/300\n",
      "1/1 - 0s - loss: 0.3118 - val_loss: 0.2887 - 76ms/epoch - 76ms/step\n",
      "Epoch 13/300\n",
      "1/1 - 0s - loss: 0.2889 - val_loss: 0.2669 - 74ms/epoch - 74ms/step\n",
      "Epoch 14/300\n",
      "1/1 - 0s - loss: 0.2675 - val_loss: 0.2466 - 76ms/epoch - 76ms/step\n",
      "Epoch 15/300\n",
      "1/1 - 0s - loss: 0.2477 - val_loss: 0.2279 - 70ms/epoch - 70ms/step\n",
      "Epoch 16/300\n",
      "1/1 - 0s - loss: 0.2293 - val_loss: 0.2107 - 91ms/epoch - 91ms/step\n",
      "Epoch 17/300\n",
      "1/1 - 0s - loss: 0.2124 - val_loss: 0.1949 - 86ms/epoch - 86ms/step\n",
      "Epoch 18/300\n",
      "1/1 - 0s - loss: 0.1970 - val_loss: 0.1806 - 81ms/epoch - 81ms/step\n",
      "Epoch 19/300\n",
      "1/1 - 0s - loss: 0.1829 - val_loss: 0.1675 - 74ms/epoch - 74ms/step\n",
      "Epoch 20/300\n",
      "1/1 - 0s - loss: 0.1700 - val_loss: 0.1558 - 83ms/epoch - 83ms/step\n",
      "Epoch 21/300\n",
      "1/1 - 0s - loss: 0.1585 - val_loss: 0.1452 - 71ms/epoch - 71ms/step\n",
      "Epoch 22/300\n",
      "1/1 - 0s - loss: 0.1480 - val_loss: 0.1358 - 81ms/epoch - 81ms/step\n",
      "Epoch 23/300\n",
      "1/1 - 0s - loss: 0.1387 - val_loss: 0.1274 - 80ms/epoch - 80ms/step\n",
      "Epoch 24/300\n",
      "1/1 - 0s - loss: 0.1303 - val_loss: 0.1199 - 75ms/epoch - 75ms/step\n",
      "Epoch 25/300\n",
      "1/1 - 0s - loss: 0.1229 - val_loss: 0.1133 - 90ms/epoch - 90ms/step\n",
      "Epoch 26/300\n",
      "1/1 - 0s - loss: 0.1163 - val_loss: 0.1075 - 81ms/epoch - 81ms/step\n",
      "Epoch 27/300\n",
      "1/1 - 0s - loss: 0.1105 - val_loss: 0.1025 - 69ms/epoch - 69ms/step\n",
      "Epoch 28/300\n",
      "1/1 - 0s - loss: 0.1054 - val_loss: 0.0982 - 62ms/epoch - 62ms/step\n",
      "Epoch 29/300\n",
      "1/1 - 0s - loss: 0.1009 - val_loss: 0.0944 - 75ms/epoch - 75ms/step\n",
      "Epoch 30/300\n",
      "1/1 - 0s - loss: 0.0971 - val_loss: 0.0912 - 76ms/epoch - 76ms/step\n",
      "Epoch 31/300\n",
      "1/1 - 0s - loss: 0.0938 - val_loss: 0.0885 - 63ms/epoch - 63ms/step\n",
      "Epoch 32/300\n",
      "1/1 - 0s - loss: 0.0909 - val_loss: 0.0862 - 74ms/epoch - 74ms/step\n",
      "Epoch 33/300\n",
      "1/1 - 0s - loss: 0.0885 - val_loss: 0.0843 - 78ms/epoch - 78ms/step\n",
      "Epoch 34/300\n",
      "1/1 - 0s - loss: 0.0865 - val_loss: 0.0827 - 87ms/epoch - 87ms/step\n",
      "Epoch 35/300\n",
      "1/1 - 0s - loss: 0.0848 - val_loss: 0.0814 - 87ms/epoch - 87ms/step\n",
      "Epoch 36/300\n",
      "1/1 - 0s - loss: 0.0833 - val_loss: 0.0803 - 80ms/epoch - 80ms/step\n",
      "Epoch 37/300\n",
      "1/1 - 0s - loss: 0.0822 - val_loss: 0.0794 - 79ms/epoch - 79ms/step\n",
      "Epoch 38/300\n",
      "1/1 - 0s - loss: 0.0812 - val_loss: 0.0787 - 79ms/epoch - 79ms/step\n",
      "Epoch 39/300\n",
      "1/1 - 0s - loss: 0.0804 - val_loss: 0.0782 - 70ms/epoch - 70ms/step\n",
      "Epoch 40/300\n",
      "1/1 - 0s - loss: 0.0798 - val_loss: 0.0778 - 84ms/epoch - 84ms/step\n",
      "Epoch 41/300\n",
      "1/1 - 0s - loss: 0.0793 - val_loss: 0.0775 - 81ms/epoch - 81ms/step\n",
      "Epoch 42/300\n",
      "1/1 - 0s - loss: 0.0789 - val_loss: 0.0772 - 81ms/epoch - 81ms/step\n",
      "Epoch 43/300\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0771 - 80ms/epoch - 80ms/step\n",
      "Epoch 44/300\n",
      "1/1 - 0s - loss: 0.0784 - val_loss: 0.0770 - 83ms/epoch - 83ms/step\n",
      "Epoch 45/300\n",
      "1/1 - 0s - loss: 0.0783 - val_loss: 0.0770 - 79ms/epoch - 79ms/step\n",
      "Epoch 46/300\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0771 - 83ms/epoch - 83ms/step\n",
      "Epoch 47/300\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0771 - 70ms/epoch - 70ms/step\n",
      "Epoch 48/300\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0772 - 80ms/epoch - 80ms/step\n",
      "Epoch 49/300\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0773 - 76ms/epoch - 76ms/step\n",
      "Epoch 50/300\n",
      "1/1 - 0s - loss: 0.0783 - val_loss: 0.0774 - 88ms/epoch - 88ms/step\n",
      "Epoch 51/300\n",
      "1/1 - 0s - loss: 0.0784 - val_loss: 0.0775 - 89ms/epoch - 89ms/step\n",
      "Epoch 52/300\n",
      "1/1 - 0s - loss: 0.0784 - val_loss: 0.0777 - 65ms/epoch - 65ms/step\n",
      "Epoch 53/300\n",
      "1/1 - 0s - loss: 0.0785 - val_loss: 0.0778 - 93ms/epoch - 93ms/step\n",
      "Epoch 54/300\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0779 - 82ms/epoch - 82ms/step\n",
      "Epoch 55/300\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0779 - 87ms/epoch - 87ms/step\n",
      "Epoch 56/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0780 - 102ms/epoch - 102ms/step\n",
      "Epoch 57/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0780 - 80ms/epoch - 80ms/step\n",
      "Epoch 58/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0780 - 72ms/epoch - 72ms/step\n",
      "Epoch 59/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0780 - 79ms/epoch - 79ms/step\n",
      "Epoch 60/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0780 - 78ms/epoch - 78ms/step\n",
      "Epoch 61/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0779 - 76ms/epoch - 76ms/step\n",
      "Epoch 62/300\n",
      "1/1 - 0s - loss: 0.0787 - val_loss: 0.0779 - 87ms/epoch - 87ms/step\n",
      "Epoch 63/300\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0778 - 89ms/epoch - 89ms/step\n",
      "Epoch 64/300\n",
      "1/1 - 0s - loss: 0.0786 - val_loss: 0.0777 - 74ms/epoch - 74ms/step\n",
      "Epoch 65/300\n",
      "1/1 - 0s - loss: 0.0785 - val_loss: 0.0776 - 82ms/epoch - 82ms/step\n",
      "Epoch 66/300\n",
      "1/1 - 0s - loss: 0.0784 - val_loss: 0.0775 - 76ms/epoch - 76ms/step\n",
      "Epoch 67/300\n",
      "1/1 - 0s - loss: 0.0783 - val_loss: 0.0774 - 77ms/epoch - 77ms/step\n",
      "Epoch 68/300\n",
      "1/1 - 0s - loss: 0.0783 - val_loss: 0.0773 - 74ms/epoch - 74ms/step\n",
      "Epoch 69/300\n",
      "1/1 - 0s - loss: 0.0782 - val_loss: 0.0772 - 80ms/epoch - 80ms/step\n",
      "Epoch 70/300\n",
      "1/1 - 0s - loss: 0.0781 - val_loss: 0.0771 - 64ms/epoch - 64ms/step\n",
      "Epoch 71/300\n",
      "1/1 - 0s - loss: 0.0780 - val_loss: 0.0770 - 74ms/epoch - 74ms/step\n",
      "Epoch 72/300\n",
      "1/1 - 0s - loss: 0.0780 - val_loss: 0.0769 - 80ms/epoch - 80ms/step\n",
      "Epoch 73/300\n",
      "1/1 - 0s - loss: 0.0779 - val_loss: 0.0768 - 79ms/epoch - 79ms/step\n",
      "Epoch 74/300\n",
      "1/1 - 0s - loss: 0.0778 - val_loss: 0.0767 - 77ms/epoch - 77ms/step\n",
      "Epoch 75/300\n",
      "1/1 - 0s - loss: 0.0778 - val_loss: 0.0767 - 81ms/epoch - 81ms/step\n",
      "Epoch 76/300\n",
      "1/1 - 0s - loss: 0.0777 - val_loss: 0.0766 - 95ms/epoch - 95ms/step\n",
      "Epoch 77/300\n",
      "1/1 - 0s - loss: 0.0777 - val_loss: 0.0766 - 72ms/epoch - 72ms/step\n",
      "Epoch 78/300\n",
      "1/1 - 0s - loss: 0.0777 - val_loss: 0.0765 - 81ms/epoch - 81ms/step\n",
      "Epoch 79/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0765 - 79ms/epoch - 79ms/step\n",
      "Epoch 80/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0764 - 81ms/epoch - 81ms/step\n",
      "Epoch 81/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0764 - 75ms/epoch - 75ms/step\n",
      "Epoch 82/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0764 - 83ms/epoch - 83ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 83/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 84/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 88ms/epoch - 88ms/step\n",
      "Epoch 85/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 86/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 87/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 88/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 89/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 90/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 91/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 92/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 93/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 94/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 95/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 97ms/epoch - 97ms/step\n",
      "Epoch 96/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 97/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 98/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 80ms/epoch - 80ms/step\n",
      "Epoch 99/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 84ms/epoch - 84ms/step\n",
      "Epoch 100/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 82ms/epoch - 82ms/step\n",
      "Epoch 101/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 95ms/epoch - 95ms/step\n",
      "Epoch 102/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 82ms/epoch - 82ms/step\n",
      "Epoch 103/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 69ms/epoch - 69ms/step\n",
      "Epoch 104/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 72ms/epoch - 72ms/step\n",
      "Epoch 105/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 75ms/epoch - 75ms/step\n",
      "Epoch 106/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0762 - 82ms/epoch - 82ms/step\n",
      "Epoch 107/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 108/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 109/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 110/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 111/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 99ms/epoch - 99ms/step\n",
      "Epoch 112/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 68ms/epoch - 68ms/step\n",
      "Epoch 113/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 114/300\n",
      "1/1 - 0s - loss: 0.0776 - val_loss: 0.0763 - 97ms/epoch - 97ms/step\n",
      "Epoch 115/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 68ms/epoch - 68ms/step\n",
      "Epoch 116/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 117/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 118/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 119/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 120/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 121/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 122/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 99ms/epoch - 99ms/step\n",
      "Epoch 123/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 89ms/epoch - 89ms/step\n",
      "Epoch 124/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 125/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 126/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 127/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 85ms/epoch - 85ms/step\n",
      "Epoch 128/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 129/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 130/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 131/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 132/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 133/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 134/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 135/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 136/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 137/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 67ms/epoch - 67ms/step\n",
      "Epoch 138/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 139/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 93ms/epoch - 93ms/step\n",
      "Epoch 140/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 68ms/epoch - 68ms/step\n",
      "Epoch 141/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 142/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 107ms/epoch - 107ms/step\n",
      "Epoch 143/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 144/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 145/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 94ms/epoch - 94ms/step\n",
      "Epoch 146/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 147/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 148/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 149/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 73ms/epoch - 73ms/step\n",
      "Epoch 150/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 151/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 101ms/epoch - 101ms/step\n",
      "Epoch 152/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 153/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 154/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 155/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 156/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 157/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 158/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 159/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 160/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 85ms/epoch - 85ms/step\n",
      "Epoch 161/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 162/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 163/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 73ms/epoch - 73ms/step\n",
      "Epoch 164/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 95ms/epoch - 95ms/step\n",
      "Epoch 165/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 62ms/epoch - 62ms/step\n",
      "Epoch 166/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 167/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 168/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 169/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 93ms/epoch - 93ms/step\n",
      "Epoch 170/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 94ms/epoch - 94ms/step\n",
      "Epoch 171/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 97ms/epoch - 97ms/step\n",
      "Epoch 172/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 173/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 174/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 89ms/epoch - 89ms/step\n",
      "Epoch 175/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 176/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 88ms/epoch - 88ms/step\n",
      "Epoch 177/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 178/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 179/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 180/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 181/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 85ms/epoch - 85ms/step\n",
      "Epoch 182/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 183/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 184/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 185/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 186/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 187/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 188/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 189/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 101ms/epoch - 101ms/step\n",
      "Epoch 190/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 191/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 66ms/epoch - 66ms/step\n",
      "Epoch 192/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 193/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 194/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 102ms/epoch - 102ms/step\n",
      "Epoch 195/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 196/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 197/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 198/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 199/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 200/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 201/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 99ms/epoch - 99ms/step\n",
      "Epoch 202/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 203/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 96ms/epoch - 96ms/step\n",
      "Epoch 204/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 98ms/epoch - 98ms/step\n",
      "Epoch 205/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 206/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 68ms/epoch - 68ms/step\n",
      "Epoch 207/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 73ms/epoch - 73ms/step\n",
      "Epoch 208/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 209/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 210/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 94ms/epoch - 94ms/step\n",
      "Epoch 211/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 212/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 213/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 214/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 215/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 71ms/epoch - 71ms/step\n",
      "Epoch 216/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 217/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 218/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 219/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 220/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 221/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 222/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 223/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 224/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 225/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 226/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 92ms/epoch - 92ms/step\n",
      "Epoch 227/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 64ms/epoch - 64ms/step\n",
      "Epoch 228/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 229/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 230/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 231/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 112ms/epoch - 112ms/step\n",
      "Epoch 232/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 233/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 234/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 235/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 236/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 237/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 238/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 239/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 240/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 241/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 242/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 73ms/epoch - 73ms/step\n",
      "Epoch 243/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 244/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 245/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 246/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 247/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 248/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 106ms/epoch - 106ms/step\n",
      "Epoch 249/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 250/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 100ms/epoch - 100ms/step\n",
      "Epoch 251/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 73ms/epoch - 73ms/step\n",
      "Epoch 252/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 253/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 254/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 255/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 256/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 257/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 258/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 91ms/epoch - 91ms/step\n",
      "Epoch 259/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 260/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 261/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 262/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 80ms/epoch - 80ms/step\n",
      "Epoch 263/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 99ms/epoch - 99ms/step\n",
      "Epoch 264/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 265/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 266/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 79ms/epoch - 79ms/step\n",
      "Epoch 267/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 81ms/epoch - 81ms/step\n",
      "Epoch 268/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 85ms/epoch - 85ms/step\n",
      "Epoch 269/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 89ms/epoch - 89ms/step\n",
      "Epoch 270/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 271/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 272/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 273/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 274/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 74ms/epoch - 74ms/step\n",
      "Epoch 275/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 276/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 87ms/epoch - 87ms/step\n",
      "Epoch 277/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 278/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 279/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 89ms/epoch - 89ms/step\n",
      "Epoch 280/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 102ms/epoch - 102ms/step\n",
      "Epoch 281/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 282/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 283/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 284/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 285/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 70ms/epoch - 70ms/step\n",
      "Epoch 286/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 86ms/epoch - 86ms/step\n",
      "Epoch 287/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 288/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 98ms/epoch - 98ms/step\n",
      "Epoch 289/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 85ms/epoch - 85ms/step\n",
      "Epoch 290/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 291/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 90ms/epoch - 90ms/step\n",
      "Epoch 292/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 293/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 76ms/epoch - 76ms/step\n",
      "Epoch 294/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 77ms/epoch - 77ms/step\n",
      "Epoch 295/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 84ms/epoch - 84ms/step\n",
      "Epoch 296/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 297/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 83ms/epoch - 83ms/step\n",
      "Epoch 298/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 78ms/epoch - 78ms/step\n",
      "Epoch 299/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 82ms/epoch - 82ms/step\n",
      "Epoch 300/300\n",
      "1/1 - 0s - loss: 0.0775 - val_loss: 0.0763 - 70ms/epoch - 70ms/step\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Model\n",
    "from keras.models import load_model\n",
    "\n",
    "#Loading the model trained in second step\n",
    "model2=load_model('aus(11step).h5') \n",
    "#refer to above explanation for model 1\n",
    "for layer in model2.layers[:5]:\n",
    "    layer.trainable = False\n",
    "# Get input\n",
    "new_input = model2.input\n",
    "# Find the layer to connect\n",
    "hidden_layer = model2.layers[-2].output\n",
    "# Connect a new layer on it\n",
    "new_output = Dense(no_of_features) (hidden_layer)\n",
    "# Build a new model\n",
    "new_model2 = Model(new_input, new_output)\n",
    "new_model2.compile(optimizer='adam', loss='mse')\n",
    "new_model2.summary()\n",
    "fit_history4 = new_model2.fit(X_train, y_train, epochs=300, batch_size=60, \n",
    "                     validation_split=0.33, verbose=2, shuffle=False) \n",
    "\n",
    "new_model2.save('aus(8step).h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 542
    },
    "id": "GMdcbgq4aE-H",
    "outputId": "02109281-4889-474f-bf56-038ef3f91b2c"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "name": "Training Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.6754898428916931,
          0.6334682703018188,
          0.593269407749176,
          0.5549032092094421,
          0.518364667892456,
          0.4836423397064209,
          0.4507177174091339,
          0.41956084966659546,
          0.39013242721557617,
          0.36238837242126465,
          0.33628618717193604,
          0.31178969144821167,
          0.28886935114860535,
          0.26749974489212036,
          0.24765589833259583,
          0.22930903732776642,
          0.2124236673116684,
          0.1969553828239441,
          0.18285012245178223,
          0.17004446685314178,
          0.15846717357635498,
          0.14804184436798096,
          0.13868968188762665,
          0.13033239543437958,
          0.12289424985647202,
          0.11630316078662872,
          0.11049094051122665,
          0.1053929328918457,
          0.10094733536243439,
          0.09709468483924866,
          0.09377726167440414,
          0.09093911945819855,
          0.08852630853652954,
          0.08648757636547089,
          0.08477514982223511,
          0.08334560692310333,
          0.08216041326522827,
          0.08118610084056854,
          0.08039397746324539,
          0.07975949347019196,
          0.0792614072561264,
          0.07888093590736389,
          0.07860104739665985,
          0.07840602099895477,
          0.07828125357627869,
          0.07821325957775116,
          0.07818994671106339,
          0.07820060849189758,
          0.07823610305786133,
          0.07828879356384277,
          0.07835228741168976,
          0.0784212201833725,
          0.0784909725189209,
          0.07855747640132904,
          0.07861709594726562,
          0.07866676151752472,
          0.07870393991470337,
          0.07872682809829712,
          0.07873445749282837,
          0.07872667163610458,
          0.0787041038274765,
          0.07866796851158142,
          0.07861991226673126,
          0.07856181263923645,
          0.07849562168121338,
          0.07842332124710083,
          0.07834680378437042,
          0.078267902135849,
          0.07818837463855743,
          0.07810992002487183,
          0.07803408056497574,
          0.077962227165699,
          0.07789549231529236,
          0.07783468812704086,
          0.0777803510427475,
          0.07773269712924957,
          0.0776916965842247,
          0.07765710353851318,
          0.07762855291366577,
          0.07760556787252426,
          0.07758762687444687,
          0.07757416367530823,
          0.07756459712982178,
          0.07755831629037857,
          0.07755471020936966,
          0.07755319774150848,
          0.07755322754383087,
          0.07755430787801743,
          0.0775560587644577,
          0.07755813002586365,
          0.07756030559539795,
          0.07756238430738449,
          0.07756424695253372,
          0.07756581157445908,
          0.07756701111793518,
          0.07756781578063965,
          0.07756823301315308,
          0.07756827026605606,
          0.0775679498910904,
          0.07756733149290085,
          0.0775664746761322,
          0.07756543159484863,
          0.07756423950195312,
          0.07756295800209045,
          0.07756160199642181,
          0.07756021618843079,
          0.07755881547927856,
          0.07755744457244873,
          0.07755610346794128,
          0.07755482196807861,
          0.07755361497402191,
          0.07755249738693237,
          0.07755148410797119,
          0.07755054533481598,
          0.07754971832036972,
          0.07754899561405182,
          0.07754835486412048,
          0.0775478184223175,
          0.07754736393690109,
          0.07754699885845184,
          0.07754670828580856,
          0.07754649221897125,
          0.07754632830619812,
          0.07754621654748917,
          0.0775461420416832,
          0.07754608988761902,
          0.07754606753587723,
          0.07754606008529663,
          0.07754604518413544,
          0.07754604518413544,
          0.07754603773355484,
          0.07754601538181305,
          0.07754598557949066,
          0.07754594087600708,
          0.0775458812713623,
          0.07754580676555634,
          0.07754571735858917,
          0.07754562795162201,
          0.07754552364349365,
          0.0775454118847847,
          0.07754529267549515,
          0.0775451809167862,
          0.07754506170749664,
          0.0775449350476265,
          0.07754482328891754,
          0.07754471898078918,
          0.07754459977149963,
          0.07754449546337128,
          0.07754439115524292,
          0.07754430174827576,
          0.0775442123413086,
          0.07754412293434143,
          0.07754404842853546,
          0.0775439590215683,
          0.07754388451576233,
          0.07754381000995636,
          0.07754373550415039,
          0.07754366099834442,
          0.07754357904195786,
          0.07754350453615189,
          0.07754343003034592,
          0.07754334807395935,
          0.07754327356815338,
          0.07754319906234741,
          0.07754312455654144,
          0.07754304260015488,
          0.07754296064376831,
          0.07754288613796234,
          0.07754280418157578,
          0.07754272222518921,
          0.07754264026880264,
          0.07754255831241608,
          0.07754248380661011,
          0.07754239439964294,
          0.07754231989383698,
          0.07754223793745041,
          0.07754214853048325,
          0.07754206657409668,
          0.07754198461771011,
          0.07754190266132355,
          0.07754181325435638,
          0.07754173874855042,
          0.07754164934158325,
          0.07754156738519669,
          0.07754148542881012,
          0.07754139602184296,
          0.07754132151603699,
          0.07754123210906982,
          0.07754115015268326,
          0.07754106819629669,
          0.07754097878932953,
          0.07754089683294296,
          0.0775408148765564,
          0.07754072546958923,
          0.07754063606262207,
          0.0775405615568161,
          0.07754047214984894,
          0.07754038274288177,
          0.07754029333591461,
          0.07754021137952805,
          0.07754012942314148,
          0.07754004001617432,
          0.07753995060920715,
          0.07753986120223999,
          0.07753977179527283,
          0.07753968238830566,
          0.0775395929813385,
          0.07753951847553253,
          0.07753942161798477,
          0.07753933221101761,
          0.07753925025463104,
          0.07753915339708328,
          0.07753906399011612,
          0.07753898203372955,
          0.07753889262676239,
          0.07753880321979523,
          0.07753870636224747,
          0.07753860950469971,
          0.07753852009773254,
          0.07753843069076538,
          0.07753834128379822,
          0.07753825187683105,
          0.07753816246986389,
          0.07753807306289673,
          0.07753797620534897,
          0.0775378867983818,
          0.07753778994083405,
          0.07753770053386688,
          0.07753761112689972,
          0.07753751426935196,
          0.0775374248623848,
          0.07753732800483704,
          0.07753723859786987,
          0.07753714919090271,
          0.07753704488277435,
          0.07753695547580719,
          0.07753686606884003,
          0.07753676176071167,
          0.0775366723537445,
          0.07753658294677734,
          0.07753647863864899,
          0.07753638923168182,
          0.07753629237413406,
          0.0775361955165863,
          0.07753609865903854,
          0.07753600180149078,
          0.07753590494394302,
          0.07753580808639526,
          0.0775357186794281,
          0.07753561437129974,
          0.07753552496433258,
          0.07753542810678482,
          0.07753533124923706,
          0.0775352269411087,
          0.07753513753414154,
          0.07753503322601318,
          0.07753493636846542,
          0.07753483951091766,
          0.0775347352027893,
          0.07753464579582214,
          0.07753454148769379,
          0.07753444463014603,
          0.07753434777259827,
          0.07753424346446991,
          0.07753414660692215,
          0.07753404229879379,
          0.07753394544124603,
          0.07753384113311768,
          0.07753374427556992,
          0.07753363996744156,
          0.0775335431098938,
          0.07753343880176544,
          0.07753334194421768,
          0.07753324508666992,
          0.07753314077854156,
          0.0775330439209938,
          0.07753293961286545,
          0.07753283530473709,
          0.07753273844718933,
          0.07753263413906097,
          0.07753252983093262,
          0.07753242552280426,
          0.0775323212146759,
          0.07753221690654755,
          0.07753211259841919,
          0.07753200829029083,
          0.07753190398216248,
          0.07753180712461472,
          0.07753170281648636,
          0.0775315910577774,
          0.07753149420022964,
          0.07753138989210129,
          0.07753129303455353,
          0.07753117382526398,
          0.07753106951713562,
          0.07753096520900726,
          0.0775308609008789,
          0.07753075659275055,
          0.07753065228462219,
          0.07753054797649384
         ],
         "yaxis": "y"
        },
        {
         "name": "Validation Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.6403794288635254,
          0.5993231534957886,
          0.5601522922515869,
          0.5228586196899414,
          0.4874286949634552,
          0.453840434551239,
          0.42205947637557983,
          0.3920418620109558,
          0.3637394309043884,
          0.33710700273513794,
          0.31210774183273315,
          0.28871262073516846,
          0.26689809560775757,
          0.24664156138896942,
          0.22791673243045807,
          0.2106904536485672,
          0.19492045044898987,
          0.18055419623851776,
          0.16752946376800537,
          0.15577538311481476,
          0.14521510899066925,
          0.13576869666576385,
          0.12735587358474731,
          0.11989811062812805,
          0.11332006752490997,
          0.1075497642159462,
          0.10251843929290771,
          0.0981600433588028,
          0.09441062062978745,
          0.0912080705165863,
          0.08849214017391205,
          0.08620484918355942,
          0.08429132401943207,
          0.08270075917243958,
          0.08138735592365265,
          0.08031095564365387,
          0.07943718880414963,
          0.07873718440532684,
          0.07818672060966492,
          0.07776536047458649,
          0.07745538651943207,
          0.0772409439086914,
          0.0771075040102005,
          0.07704150676727295,
          0.07703034579753876,
          0.07706242054700851,
          0.07712729275226593,
          0.07721573114395142,
          0.07731970399618149,
          0.07743217051029205,
          0.07754695415496826,
          0.0776585042476654,
          0.07776179909706116,
          0.07785236090421677,
          0.07792636752128601,
          0.07798081636428833,
          0.07801371812820435,
          0.07802417129278183,
          0.07801245898008347,
          0.07797984778881073,
          0.07792843133211136,
          0.07786087691783905,
          0.07778013497591019,
          0.07768925279378891,
          0.07759115844964981,
          0.07748860120773315,
          0.0773840844631195,
          0.07727983593940735,
          0.07717777788639069,
          0.07707951962947845,
          0.07698635756969452,
          0.07689916342496872,
          0.07681849598884583,
          0.07674455642700195,
          0.07667727768421173,
          0.07661642134189606,
          0.07656162232160568,
          0.07651251554489136,
          0.07646875828504562,
          0.07643003016710281,
          0.07639607787132263,
          0.07636667042970657,
          0.07634156942367554,
          0.07632049918174744,
          0.07630316913127899,
          0.07628922164440155,
          0.07627828419208527,
          0.07626998424530029,
          0.07626388967037201,
          0.07625959068536758,
          0.07625669986009598,
          0.07625481486320496,
          0.07625359296798706,
          0.07625271379947662,
          0.07625195384025574,
          0.07625113427639008,
          0.07625019550323486,
          0.0762491300702095,
          0.07624801248311996,
          0.0762469619512558,
          0.07624611258506775,
          0.07624559849500656,
          0.07624555379152298,
          0.07624604552984238,
          0.07624711096286774,
          0.07624876499176025,
          0.07625095546245575,
          0.07625359296798706,
          0.07625655829906464,
          0.07625973969697952,
          0.07626299560070038,
          0.07626621425151825,
          0.07626928389072418,
          0.07627213001251221,
          0.07627473771572113,
          0.07627707719802856,
          0.0762791708111763,
          0.07628107070922852,
          0.07628282904624939,
          0.0762844905257225,
          0.07628610730171204,
          0.07628770172595978,
          0.07628929615020752,
          0.07629087567329407,
          0.07629242539405823,
          0.07629390060901642,
          0.07629525661468506,
          0.07629646360874176,
          0.07629745453596115,
          0.07629822194576263,
          0.07629873603582382,
          0.07629901170730591,
          0.07629905641078949,
          0.07629889249801636,
          0.07629857957363129,
          0.07629813253879547,
          0.07629762589931488,
          0.0762970894575119,
          0.07629655301570892,
          0.07629603147506714,
          0.07629553228616714,
          0.07629507035017014,
          0.07629462331533432,
          0.0762941837310791,
          0.07629373669624329,
          0.07629327476024628,
          0.07629277557134628,
          0.0762922465801239,
          0.07629169523715973,
          0.07629112154245377,
          0.07629053294658661,
          0.07628996670246124,
          0.07628943026065826,
          0.07628893852233887,
          0.07628849148750305,
          0.07628810405731201,
          0.07628779113292694,
          0.07628753036260605,
          0.07628731429576874,
          0.0762871503829956,
          0.07628700137138367,
          0.07628688216209412,
          0.07628677785396576,
          0.0762866735458374,
          0.07628656923770905,
          0.07628648728132248,
          0.07628640532493591,
          0.07628634572029114,
          0.07628630846738815,
          0.07628629356622696,
          0.07628630846738815,
          0.07628636062145233,
          0.0762864351272583,
          0.07628653943538666,
          0.07628665864467621,
          0.07628678530454636,
          0.0762869119644165,
          0.07628704607486725,
          0.0762871652841568,
          0.07628727704286575,
          0.07628738135099411,
          0.07628747820854187,
          0.07628756016492844,
          0.0762876346707344,
          0.07628771662712097,
          0.07628778368234634,
          0.07628785818815231,
          0.07628792524337769,
          0.07628798484802246,
          0.07628805190324783,
          0.07628810405731201,
          0.07628815621137619,
          0.07628819346427917,
          0.07628821581602097,
          0.07628822326660156,
          0.07628821581602097,
          0.07628820836544037,
          0.07628817856311798,
          0.0762881487607956,
          0.0762881189584732,
          0.07628808915615082,
          0.07628804445266724,
          0.07628800719976425,
          0.07628796994686127,
          0.07628794014453888,
          0.07628791034221649,
          0.07628786563873291,
          0.07628783583641052,
          0.07628779858350754,
          0.07628776133060455,
          0.07628771662712097,
          0.07628767937421799,
          0.076287642121315,
          0.07628760486841202,
          0.07628756761550903,
          0.07628753781318665,
          0.07628750801086426,
          0.07628747820854187,
          0.07628746330738068,
          0.07628744095563889,
          0.07628743350505829,
          0.0762874186038971,
          0.0762874037027359,
          0.07628738880157471,
          0.07628737390041351,
          0.07628735899925232,
          0.07628735899925232,
          0.07628733664751053,
          0.07628732919692993,
          0.07628732174634933,
          0.07628731429576874,
          0.07628730684518814,
          0.07628729939460754,
          0.07628729939460754,
          0.07628728449344635,
          0.07628728449344635,
          0.07628728449344635,
          0.07628726959228516,
          0.07628726959228516,
          0.07628725469112396,
          0.07628725469112396,
          0.07628723978996277,
          0.07628723978996277,
          0.07628722488880157,
          0.07628722488880157,
          0.07628720998764038,
          0.07628720253705978,
          0.07628719508647919,
          0.076287180185318,
          0.076287180185318,
          0.0762871652841568,
          0.0762871503829956,
          0.07628714293241501,
          0.07628712803125381,
          0.07628712058067322,
          0.07628710567951202,
          0.07628709077835083,
          0.07628707587718964,
          0.07628706097602844,
          0.07628705352544785,
          0.07628703862428665,
          0.07628701627254486,
          0.07628701627254486,
          0.07628699392080307,
          0.07628697901964188,
          0.07628697156906128,
          0.07628695666790009,
          0.07628694176673889,
          0.0762869343161583,
          0.0762869194149971,
          0.07628689706325531,
          0.07628688961267471,
          0.07628687471151352,
          0.07628685981035233,
          0.07628684490919113,
          0.07628683745861053,
          0.07628682255744934,
          0.07628680765628815,
          0.07628680020570755,
          0.07628677785396576,
          0.07628677040338516,
          0.07628676295280457,
          0.07628674805164337,
          0.07628673315048218,
          0.07628671824932098,
          0.07628670334815979,
          0.0762866958975792,
          0.076286680996418,
          0.0762866735458374,
          0.07628665864467621,
          0.07628665119409561,
          0.07628663629293442,
          0.07628662884235382,
          0.07628661394119263,
          0.07628659904003143,
          0.07628659158945084,
          0.07628657668828964,
          0.07628656923770905,
          0.07628655433654785,
          0.07628653943538666
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Training and Validation Loss"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "Epochs"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>Training Loss</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>Validation Loss</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"28962e8a-a912-4990-ae8a-a6d7aa8d052c\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"28962e8a-a912-4990-ae8a-a6d7aa8d052c\")) {                    Plotly.newPlot(                        \"28962e8a-a912-4990-ae8a-a6d7aa8d052c\",                        [{\"name\":\"Training Loss\",\"y\":[0.6754898428916931,0.6334682703018188,0.593269407749176,0.5549032092094421,0.518364667892456,0.4836423397064209,0.4507177174091339,0.41956084966659546,0.39013242721557617,0.36238837242126465,0.33628618717193604,0.31178969144821167,0.28886935114860535,0.26749974489212036,0.24765589833259583,0.22930903732776642,0.2124236673116684,0.1969553828239441,0.18285012245178223,0.17004446685314178,0.15846717357635498,0.14804184436798096,0.13868968188762665,0.13033239543437958,0.12289424985647202,0.11630316078662872,0.11049094051122665,0.1053929328918457,0.10094733536243439,0.09709468483924866,0.09377726167440414,0.09093911945819855,0.08852630853652954,0.08648757636547089,0.08477514982223511,0.08334560692310333,0.08216041326522827,0.08118610084056854,0.08039397746324539,0.07975949347019196,0.0792614072561264,0.07888093590736389,0.07860104739665985,0.07840602099895477,0.07828125357627869,0.07821325957775116,0.07818994671106339,0.07820060849189758,0.07823610305786133,0.07828879356384277,0.07835228741168976,0.0784212201833725,0.0784909725189209,0.07855747640132904,0.07861709594726562,0.07866676151752472,0.07870393991470337,0.07872682809829712,0.07873445749282837,0.07872667163610458,0.0787041038274765,0.07866796851158142,0.07861991226673126,0.07856181263923645,0.07849562168121338,0.07842332124710083,0.07834680378437042,0.078267902135849,0.07818837463855743,0.07810992002487183,0.07803408056497574,0.077962227165699,0.07789549231529236,0.07783468812704086,0.0777803510427475,0.07773269712924957,0.0776916965842247,0.07765710353851318,0.07762855291366577,0.07760556787252426,0.07758762687444687,0.07757416367530823,0.07756459712982178,0.07755831629037857,0.07755471020936966,0.07755319774150848,0.07755322754383087,0.07755430787801743,0.0775560587644577,0.07755813002586365,0.07756030559539795,0.07756238430738449,0.07756424695253372,0.07756581157445908,0.07756701111793518,0.07756781578063965,0.07756823301315308,0.07756827026605606,0.0775679498910904,0.07756733149290085,0.0775664746761322,0.07756543159484863,0.07756423950195312,0.07756295800209045,0.07756160199642181,0.07756021618843079,0.07755881547927856,0.07755744457244873,0.07755610346794128,0.07755482196807861,0.07755361497402191,0.07755249738693237,0.07755148410797119,0.07755054533481598,0.07754971832036972,0.07754899561405182,0.07754835486412048,0.0775478184223175,0.07754736393690109,0.07754699885845184,0.07754670828580856,0.07754649221897125,0.07754632830619812,0.07754621654748917,0.0775461420416832,0.07754608988761902,0.07754606753587723,0.07754606008529663,0.07754604518413544,0.07754604518413544,0.07754603773355484,0.07754601538181305,0.07754598557949066,0.07754594087600708,0.0775458812713623,0.07754580676555634,0.07754571735858917,0.07754562795162201,0.07754552364349365,0.0775454118847847,0.07754529267549515,0.0775451809167862,0.07754506170749664,0.0775449350476265,0.07754482328891754,0.07754471898078918,0.07754459977149963,0.07754449546337128,0.07754439115524292,0.07754430174827576,0.0775442123413086,0.07754412293434143,0.07754404842853546,0.0775439590215683,0.07754388451576233,0.07754381000995636,0.07754373550415039,0.07754366099834442,0.07754357904195786,0.07754350453615189,0.07754343003034592,0.07754334807395935,0.07754327356815338,0.07754319906234741,0.07754312455654144,0.07754304260015488,0.07754296064376831,0.07754288613796234,0.07754280418157578,0.07754272222518921,0.07754264026880264,0.07754255831241608,0.07754248380661011,0.07754239439964294,0.07754231989383698,0.07754223793745041,0.07754214853048325,0.07754206657409668,0.07754198461771011,0.07754190266132355,0.07754181325435638,0.07754173874855042,0.07754164934158325,0.07754156738519669,0.07754148542881012,0.07754139602184296,0.07754132151603699,0.07754123210906982,0.07754115015268326,0.07754106819629669,0.07754097878932953,0.07754089683294296,0.0775408148765564,0.07754072546958923,0.07754063606262207,0.0775405615568161,0.07754047214984894,0.07754038274288177,0.07754029333591461,0.07754021137952805,0.07754012942314148,0.07754004001617432,0.07753995060920715,0.07753986120223999,0.07753977179527283,0.07753968238830566,0.0775395929813385,0.07753951847553253,0.07753942161798477,0.07753933221101761,0.07753925025463104,0.07753915339708328,0.07753906399011612,0.07753898203372955,0.07753889262676239,0.07753880321979523,0.07753870636224747,0.07753860950469971,0.07753852009773254,0.07753843069076538,0.07753834128379822,0.07753825187683105,0.07753816246986389,0.07753807306289673,0.07753797620534897,0.0775378867983818,0.07753778994083405,0.07753770053386688,0.07753761112689972,0.07753751426935196,0.0775374248623848,0.07753732800483704,0.07753723859786987,0.07753714919090271,0.07753704488277435,0.07753695547580719,0.07753686606884003,0.07753676176071167,0.0775366723537445,0.07753658294677734,0.07753647863864899,0.07753638923168182,0.07753629237413406,0.0775361955165863,0.07753609865903854,0.07753600180149078,0.07753590494394302,0.07753580808639526,0.0775357186794281,0.07753561437129974,0.07753552496433258,0.07753542810678482,0.07753533124923706,0.0775352269411087,0.07753513753414154,0.07753503322601318,0.07753493636846542,0.07753483951091766,0.0775347352027893,0.07753464579582214,0.07753454148769379,0.07753444463014603,0.07753434777259827,0.07753424346446991,0.07753414660692215,0.07753404229879379,0.07753394544124603,0.07753384113311768,0.07753374427556992,0.07753363996744156,0.0775335431098938,0.07753343880176544,0.07753334194421768,0.07753324508666992,0.07753314077854156,0.0775330439209938,0.07753293961286545,0.07753283530473709,0.07753273844718933,0.07753263413906097,0.07753252983093262,0.07753242552280426,0.0775323212146759,0.07753221690654755,0.07753211259841919,0.07753200829029083,0.07753190398216248,0.07753180712461472,0.07753170281648636,0.0775315910577774,0.07753149420022964,0.07753138989210129,0.07753129303455353,0.07753117382526398,0.07753106951713562,0.07753096520900726,0.0775308609008789,0.07753075659275055,0.07753065228462219,0.07753054797649384],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"name\":\"Validation Loss\",\"y\":[0.6403794288635254,0.5993231534957886,0.5601522922515869,0.5228586196899414,0.4874286949634552,0.453840434551239,0.42205947637557983,0.3920418620109558,0.3637394309043884,0.33710700273513794,0.31210774183273315,0.28871262073516846,0.26689809560775757,0.24664156138896942,0.22791673243045807,0.2106904536485672,0.19492045044898987,0.18055419623851776,0.16752946376800537,0.15577538311481476,0.14521510899066925,0.13576869666576385,0.12735587358474731,0.11989811062812805,0.11332006752490997,0.1075497642159462,0.10251843929290771,0.0981600433588028,0.09441062062978745,0.0912080705165863,0.08849214017391205,0.08620484918355942,0.08429132401943207,0.08270075917243958,0.08138735592365265,0.08031095564365387,0.07943718880414963,0.07873718440532684,0.07818672060966492,0.07776536047458649,0.07745538651943207,0.0772409439086914,0.0771075040102005,0.07704150676727295,0.07703034579753876,0.07706242054700851,0.07712729275226593,0.07721573114395142,0.07731970399618149,0.07743217051029205,0.07754695415496826,0.0776585042476654,0.07776179909706116,0.07785236090421677,0.07792636752128601,0.07798081636428833,0.07801371812820435,0.07802417129278183,0.07801245898008347,0.07797984778881073,0.07792843133211136,0.07786087691783905,0.07778013497591019,0.07768925279378891,0.07759115844964981,0.07748860120773315,0.0773840844631195,0.07727983593940735,0.07717777788639069,0.07707951962947845,0.07698635756969452,0.07689916342496872,0.07681849598884583,0.07674455642700195,0.07667727768421173,0.07661642134189606,0.07656162232160568,0.07651251554489136,0.07646875828504562,0.07643003016710281,0.07639607787132263,0.07636667042970657,0.07634156942367554,0.07632049918174744,0.07630316913127899,0.07628922164440155,0.07627828419208527,0.07626998424530029,0.07626388967037201,0.07625959068536758,0.07625669986009598,0.07625481486320496,0.07625359296798706,0.07625271379947662,0.07625195384025574,0.07625113427639008,0.07625019550323486,0.0762491300702095,0.07624801248311996,0.0762469619512558,0.07624611258506775,0.07624559849500656,0.07624555379152298,0.07624604552984238,0.07624711096286774,0.07624876499176025,0.07625095546245575,0.07625359296798706,0.07625655829906464,0.07625973969697952,0.07626299560070038,0.07626621425151825,0.07626928389072418,0.07627213001251221,0.07627473771572113,0.07627707719802856,0.0762791708111763,0.07628107070922852,0.07628282904624939,0.0762844905257225,0.07628610730171204,0.07628770172595978,0.07628929615020752,0.07629087567329407,0.07629242539405823,0.07629390060901642,0.07629525661468506,0.07629646360874176,0.07629745453596115,0.07629822194576263,0.07629873603582382,0.07629901170730591,0.07629905641078949,0.07629889249801636,0.07629857957363129,0.07629813253879547,0.07629762589931488,0.0762970894575119,0.07629655301570892,0.07629603147506714,0.07629553228616714,0.07629507035017014,0.07629462331533432,0.0762941837310791,0.07629373669624329,0.07629327476024628,0.07629277557134628,0.0762922465801239,0.07629169523715973,0.07629112154245377,0.07629053294658661,0.07628996670246124,0.07628943026065826,0.07628893852233887,0.07628849148750305,0.07628810405731201,0.07628779113292694,0.07628753036260605,0.07628731429576874,0.0762871503829956,0.07628700137138367,0.07628688216209412,0.07628677785396576,0.0762866735458374,0.07628656923770905,0.07628648728132248,0.07628640532493591,0.07628634572029114,0.07628630846738815,0.07628629356622696,0.07628630846738815,0.07628636062145233,0.0762864351272583,0.07628653943538666,0.07628665864467621,0.07628678530454636,0.0762869119644165,0.07628704607486725,0.0762871652841568,0.07628727704286575,0.07628738135099411,0.07628747820854187,0.07628756016492844,0.0762876346707344,0.07628771662712097,0.07628778368234634,0.07628785818815231,0.07628792524337769,0.07628798484802246,0.07628805190324783,0.07628810405731201,0.07628815621137619,0.07628819346427917,0.07628821581602097,0.07628822326660156,0.07628821581602097,0.07628820836544037,0.07628817856311798,0.0762881487607956,0.0762881189584732,0.07628808915615082,0.07628804445266724,0.07628800719976425,0.07628796994686127,0.07628794014453888,0.07628791034221649,0.07628786563873291,0.07628783583641052,0.07628779858350754,0.07628776133060455,0.07628771662712097,0.07628767937421799,0.076287642121315,0.07628760486841202,0.07628756761550903,0.07628753781318665,0.07628750801086426,0.07628747820854187,0.07628746330738068,0.07628744095563889,0.07628743350505829,0.0762874186038971,0.0762874037027359,0.07628738880157471,0.07628737390041351,0.07628735899925232,0.07628735899925232,0.07628733664751053,0.07628732919692993,0.07628732174634933,0.07628731429576874,0.07628730684518814,0.07628729939460754,0.07628729939460754,0.07628728449344635,0.07628728449344635,0.07628728449344635,0.07628726959228516,0.07628726959228516,0.07628725469112396,0.07628725469112396,0.07628723978996277,0.07628723978996277,0.07628722488880157,0.07628722488880157,0.07628720998764038,0.07628720253705978,0.07628719508647919,0.076287180185318,0.076287180185318,0.0762871652841568,0.0762871503829956,0.07628714293241501,0.07628712803125381,0.07628712058067322,0.07628710567951202,0.07628709077835083,0.07628707587718964,0.07628706097602844,0.07628705352544785,0.07628703862428665,0.07628701627254486,0.07628701627254486,0.07628699392080307,0.07628697901964188,0.07628697156906128,0.07628695666790009,0.07628694176673889,0.0762869343161583,0.0762869194149971,0.07628689706325531,0.07628688961267471,0.07628687471151352,0.07628685981035233,0.07628684490919113,0.07628683745861053,0.07628682255744934,0.07628680765628815,0.07628680020570755,0.07628677785396576,0.07628677040338516,0.07628676295280457,0.07628674805164337,0.07628673315048218,0.07628671824932098,0.07628670334815979,0.0762866958975792,0.076286680996418,0.0762866735458374,0.07628665864467621,0.07628665119409561,0.07628663629293442,0.07628662884235382,0.07628661394119263,0.07628659904003143,0.07628659158945084,0.07628657668828964,0.07628656923770905,0.07628655433654785,0.07628653943538666],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"Epochs\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>Training Loss</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>Validation Loss</b>\"}},\"title\":{\"text\":\"Training and Validation Loss\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('28962e8a-a912-4990-ae8a-a6d7aa8d052c');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#History for model 1 (first 56 columns)\n",
    "history = fit_history4\n",
    "#plot the training and validation accuracy and loss at each epoch\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(1, len(loss) + 1)\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=loss, name=\"Training Loss\"),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=val_loss, name=\"Validation Loss\"),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Training and Validation Loss\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"Epochs\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Training Loss</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>Validation Loss</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Mt5uF45ZXqOQ",
    "outputId": "b20a5471-9b0f-43be-95c5-232250fa272b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x000001D993738AF0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "(8, 1, 4)\n",
      "(8, 8, 4)\n"
     ]
    }
   ],
   "source": [
    "#Predictions\n",
    "pred_aus=new_model2.predict(X_test)\n",
    "print(pred_aus.shape)\n",
    "#Inverse Scaling of the predicted values\n",
    "for index,i in enumerate(train_dataF.columns):\n",
    "    scaler = scalers['scaler_'+i]  \n",
    "    pred_aus[:,:,index]=scaler.inverse_transform(pred_aus[:,:,index])\n",
    "\n",
    "pred_aus = [diff_inverse( pred_aus[i],  rawdatay[i] ) for i in range(len(pred_aus))]\n",
    "pred_aus=np.array(pred_aus)\n",
    "#print(pred_aus)\n",
    "print(pred_aus.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UNXjG6TxOLoP",
    "outputId": "79fb5cd3-0c0e-436d-b4a5-a428f9abbf95"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE 0.9448868658558907\n",
      "RMSE 0.00015833608650453322\n",
      "dRMSE 0.43723780214523444\n",
      "MAE 0.9439517990895501\n",
      "RMSE 0.00015639981710531247\n",
      "dRMSE 0.33462397089794105\n",
      "MAE 0.9301278276602972\n",
      "RMSE 0.00014501348080057176\n",
      "dRMSE 0.9395696894417294\n",
      "MAE 0.9385249486196626\n",
      "RMSE 0.00015125222676463717\n",
      "dRMSE 1.142621291696516\n",
      "MAE 0.9640311076099704\n",
      "RMSE 0.00015840099745246828\n",
      "dRMSE 0.5470662407119977\n",
      "MAE 0.957794515661821\n",
      "RMSE 0.0001540116235334518\n",
      "dRMSE 0.30475557678639326\n",
      "MAE 0.954936726091189\n",
      "RMSE 0.0001543314126875681\n",
      "dRMSE 0.571103860204528\n",
      "MAE 0.9746098939624511\n",
      "RMSE 0.0001636894386564157\n",
      "dRMSE 0.9332740240248801\n",
      "\n",
      "MAE 0.9511079605688539\n",
      "RMSE 0.0001551793854381198\n",
      "dRMSE 0.6512815569886524\n"
     ]
    }
   ],
   "source": [
    "#Error Estimation\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[0,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[0,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[0,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[1,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[1,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[1,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[2,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[2,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[2,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[3,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[3,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[3,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[4,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[4,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[4,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[5,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[5,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[5,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[6,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[6,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[6,:].mean())\n",
    "print('MAE', (MAE(rawdatay, pred_aus))[7,:].mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus))[7,:].mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus))[7,:].mean())\n",
    "print()\n",
    "\n",
    "print('MAE', (MAE(rawdatay, pred_aus)).mean())\n",
    "print('RMSE', (RMSE(rawdatay, pred_aus)).mean())\n",
    "print('dRMSE', (dRMSE(rawdatay, pred_aus)).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "thOuU4ZV4_Nu",
    "outputId": "95abddd9-8401-44dd-8169-5a20ad221b70",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hol</th>\n",
       "      <th>vfr</th>\n",
       "      <th>bus</th>\n",
       "      <th>oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45906</td>\n",
       "      <td>26042</td>\n",
       "      <td>9815</td>\n",
       "      <td>2740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>29347</td>\n",
       "      <td>20676</td>\n",
       "      <td>11823</td>\n",
       "      <td>3466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>32492</td>\n",
       "      <td>20582</td>\n",
       "      <td>13565</td>\n",
       "      <td>6114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31813</td>\n",
       "      <td>21613</td>\n",
       "      <td>11478</td>\n",
       "      <td>5976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>46793</td>\n",
       "      <td>26947</td>\n",
       "      <td>10027</td>\n",
       "      <td>3126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>31442</td>\n",
       "      <td>19481</td>\n",
       "      <td>11875</td>\n",
       "      <td>4068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>34623</td>\n",
       "      <td>20026</td>\n",
       "      <td>11713</td>\n",
       "      <td>5820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>31118</td>\n",
       "      <td>20431</td>\n",
       "      <td>10582</td>\n",
       "      <td>6187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>47030</td>\n",
       "      <td>24284</td>\n",
       "      <td>9734</td>\n",
       "      <td>4603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>30852</td>\n",
       "      <td>19430</td>\n",
       "      <td>10590</td>\n",
       "      <td>3595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>34157</td>\n",
       "      <td>19358</td>\n",
       "      <td>11311</td>\n",
       "      <td>5590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>32332</td>\n",
       "      <td>21834</td>\n",
       "      <td>13075</td>\n",
       "      <td>5614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>44072</td>\n",
       "      <td>23461</td>\n",
       "      <td>9031</td>\n",
       "      <td>3821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>32250</td>\n",
       "      <td>20351</td>\n",
       "      <td>10366</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>32259</td>\n",
       "      <td>20876</td>\n",
       "      <td>11888</td>\n",
       "      <td>4826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>32037</td>\n",
       "      <td>21093</td>\n",
       "      <td>11053</td>\n",
       "      <td>7262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>44888</td>\n",
       "      <td>24805</td>\n",
       "      <td>9824</td>\n",
       "      <td>4421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>28899</td>\n",
       "      <td>20576</td>\n",
       "      <td>10418</td>\n",
       "      <td>3636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>31813</td>\n",
       "      <td>23966</td>\n",
       "      <td>13598</td>\n",
       "      <td>6163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>32790</td>\n",
       "      <td>23466</td>\n",
       "      <td>12164</td>\n",
       "      <td>7243</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Hol    vfr    bus   oth\n",
       "0   45906  26042   9815  2740\n",
       "1   29347  20676  11823  3466\n",
       "2   32492  20582  13565  6114\n",
       "3   31813  21613  11478  5976\n",
       "4   46793  26947  10027  3126\n",
       "5   31442  19481  11875  4068\n",
       "6   34623  20026  11713  5820\n",
       "7   31118  20431  10582  6187\n",
       "8   47030  24284   9734  4603\n",
       "9   30852  19430  10590  3595\n",
       "10  34157  19358  11311  5590\n",
       "11  32332  21834  13075  5614\n",
       "12  44072  23461   9031  3821\n",
       "13  32250  20351  10366  5000\n",
       "14  32259  20876  11888  4826\n",
       "15  32037  21093  11053  7262\n",
       "16  44888  24805   9824  4421\n",
       "17  28899  20576  10418  3636\n",
       "18  31813  23966  13598  6163\n",
       "19  32790  23466  12164  7243"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_daily_df[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hol</th>\n",
       "      <th>vfr</th>\n",
       "      <th>bus</th>\n",
       "      <th>oth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>29481.654633</td>\n",
       "      <td>23037.347931</td>\n",
       "      <td>10617.779026</td>\n",
       "      <td>4485.514343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>31529.167770</td>\n",
       "      <td>22319.351898</td>\n",
       "      <td>11084.436211</td>\n",
       "      <td>6012.324657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>30960.898529</td>\n",
       "      <td>24719.120209</td>\n",
       "      <td>11060.364807</td>\n",
       "      <td>5385.787636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>42350.929230</td>\n",
       "      <td>30590.396454</td>\n",
       "      <td>9550.730860</td>\n",
       "      <td>3764.020500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>29942.703979</td>\n",
       "      <td>23981.700775</td>\n",
       "      <td>10122.496658</td>\n",
       "      <td>3791.990158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>26677.929230</td>\n",
       "      <td>19976.396454</td>\n",
       "      <td>11575.730860</td>\n",
       "      <td>5566.020500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>44086.703979</td>\n",
       "      <td>26363.700775</td>\n",
       "      <td>8824.496658</td>\n",
       "      <td>4219.990158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>30474.584503</td>\n",
       "      <td>22729.954544</td>\n",
       "      <td>9919.420380</td>\n",
       "      <td>3672.280212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>31328.672821</td>\n",
       "      <td>19829.248962</td>\n",
       "      <td>11428.945923</td>\n",
       "      <td>4017.756905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>31940.546051</td>\n",
       "      <td>22710.459320</td>\n",
       "      <td>10751.695583</td>\n",
       "      <td>4215.178764</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>64 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Hol           vfr           bus          oth\n",
       "20  29481.654633  23037.347931  10617.779026  4485.514343\n",
       "21  31529.167770  22319.351898  11084.436211  6012.324657\n",
       "22  30960.898529  24719.120209  11060.364807  5385.787636\n",
       "23  42350.929230  30590.396454   9550.730860  3764.020500\n",
       "24  29942.703979  23981.700775  10122.496658  3791.990158\n",
       "..           ...           ...           ...          ...\n",
       "79  26677.929230  19976.396454  11575.730860  5566.020500\n",
       "80  44086.703979  26363.700775   8824.496658  4219.990158\n",
       "81  30474.584503  22729.954544   9919.420380  3672.280212\n",
       "82  31328.672821  19829.248962  11428.945923  4017.756905\n",
       "83  31940.546051  22710.459320  10751.695583  4215.178764\n",
       "\n",
       "[64 rows x 4 columns]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 8 steps\n",
    "forecast1_df = pd.DataFrame(pred_aus[:,0,:], index = list(range(20,28))) \n",
    "forecast2_df = pd.DataFrame(pred_aus[:,1,:], index = list(range(28,36))) \n",
    "forecast3_df = pd.DataFrame(pred_aus[:,2,:], index = list(range(36,44))) \n",
    "forecast4_df = pd.DataFrame(pred_aus[:,3,:], index = list(range(44,52))) \n",
    "forecast5_df = pd.DataFrame(pred_aus[:,4,:], index = list(range(52,60))) \n",
    "forecast6_df = pd.DataFrame(pred_aus[:,5,:], index = list(range(60,68)))\n",
    "forecast7_df = pd.DataFrame(pred_aus[:,6,:], index = list(range(68,76)))\n",
    "forecast8_df = pd.DataFrame(pred_aus[:,7,:], index = list(range(76,84)))\n",
    "\n",
    "\n",
    "forecast_df = pd.concat([forecast1_df, forecast2_df,\n",
    "                        forecast3_df, forecast4_df,\n",
    "                        forecast5_df, forecast6_df,\n",
    "                        forecast7_df, forecast8_df]) \n",
    "\n",
    "for i in range(len(test.columns)):\n",
    "    forecast_df = forecast_df.rename(columns={i: df.iloc[:,84:88].columns[i]})\n",
    "forecast_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting x-axis for visualization of plots\n",
    "x = list(range(0, 4))\n",
    "x1 = list(range(max(x)+1, max(x)+5))\n",
    "x2 = list(range(max(x1)+1, max(x1)+5))\n",
    "x3 = list(range(max(x2)+1, max(x2)+5))\n",
    "x4 = list(range(max(x3)+1, max(x3)+5))\n",
    "x5 = list(range(max(x4)+1, max(x4)+5))\n",
    "x6 = list(range(max(x5)+1, max(x5)+5))\n",
    "x7 = list(range(max(x6)+1, max(x6)+5))\n",
    "x8 = list(range(max(x7)+1, max(x7)+5))\n",
    "x9 = list(range(max(x8)+1, max(x8)+5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q19",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3
         ],
         "xaxis": "x",
         "y": [
          32790,
          23466,
          12164,
          7243
         ],
         "yaxis": "y"
        },
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Train - Q20",
         "type": "scatter",
         "x": [
          4,
          5,
          6,
          7
         ],
         "xaxis": "x",
         "y": [
          43322,
          27380,
          9985,
          3173
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q21",
         "type": "scatter",
         "x": [
          8,
          9,
          10,
          11
         ],
         "xaxis": "x",
         "y": [
          29481.65463256836,
          23037.347930908203,
          10617.779026031494,
          4485.514343261719
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q22",
         "type": "scatter",
         "x": [
          12,
          13,
          14,
          15
         ],
         "xaxis": "x",
         "y": [
          31529.167770385742,
          22319.35189819336,
          11084.436210632324,
          6012.324656963348
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q23",
         "type": "scatter",
         "x": [
          16,
          17,
          18,
          19
         ],
         "xaxis": "x",
         "y": [
          30960.898529052734,
          24719.120208740234,
          11060.364807128906,
          5385.787635803223
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q24",
         "type": "scatter",
         "x": [
          20,
          21,
          22,
          23
         ],
         "xaxis": "x",
         "y": [
          42350.92922973633,
          30590.396453857422,
          9550.73085975647,
          3764.0205001831055
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q25",
         "type": "scatter",
         "x": [
          24,
          25,
          26,
          27
         ],
         "xaxis": "x",
         "y": [
          29942.703979492188,
          23981.700775146484,
          10122.496658325195,
          3791.9901580810547
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q26",
         "type": "scatter",
         "x": [
          28,
          29,
          30,
          31
         ],
         "xaxis": "x",
         "y": [
          33340.58450317383,
          23035.954544067383,
          11818.420379638672,
          4918.280212402344
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q27",
         "type": "scatter",
         "x": [
          32,
          33,
          34,
          35
         ],
         "xaxis": "x",
         "y": [
          29460.672821044922,
          24290.248962402344,
          10342.945922851562,
          6789.756904602051
         ],
         "yaxis": "y2"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast - Q28",
         "type": "scatter",
         "x": [
          36,
          37,
          38,
          39
         ],
         "xaxis": "x",
         "y": [
          44138.54605102539,
          28763.45932006836,
          9051.695583343506,
          4112.178764343262
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Visualization of previous 2 quarters vs next 5 quarters - forecasting"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "examples"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>actual features</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>predictions features</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"58f71478-a7af-4f63-a446-05457be7c695\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"58f71478-a7af-4f63-a446-05457be7c695\")) {                    Plotly.newPlot(                        \"58f71478-a7af-4f63-a446-05457be7c695\",                        [{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q19\",\"x\":[0,1,2,3],\"y\":[32790,23466,12164,7243],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Train - Q20\",\"x\":[4,5,6,7],\"y\":[43322,27380,9985,3173],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q21\",\"x\":[8,9,10,11],\"y\":[29481.65463256836,23037.347930908203,10617.779026031494,4485.514343261719],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q22\",\"x\":[12,13,14,15],\"y\":[31529.167770385742,22319.35189819336,11084.436210632324,6012.324656963348],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q23\",\"x\":[16,17,18,19],\"y\":[30960.898529052734,24719.120208740234,11060.364807128906,5385.787635803223],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q24\",\"x\":[20,21,22,23],\"y\":[42350.92922973633,30590.396453857422,9550.73085975647,3764.0205001831055],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q25\",\"x\":[24,25,26,27],\"y\":[29942.703979492188,23981.700775146484,10122.496658325195,3791.9901580810547],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q26\",\"x\":[28,29,30,31],\"y\":[33340.58450317383,23035.954544067383,11818.420379638672,4918.280212402344],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q27\",\"x\":[32,33,34,35],\"y\":[29460.672821044922,24290.248962402344,10342.945922851562,6789.756904602051],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast - Q28\",\"x\":[36,37,38,39],\"y\":[44138.54605102539,28763.45932006836,9051.695583343506,4112.178764343262],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"examples\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>actual features</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>predictions features</b>\"}},\"title\":{\"text\":\"Visualization of previous 2 quarters vs next 5 quarters - forecasting\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('58f71478-a7af-4f63-a446-05457be7c695');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "prev_val1 = first_daily_df[:21].values[-2] # Quarter No 19 values\n",
    "prev_val2 = first_daily_df[:21].values[-1] # Quarter No 20 values\n",
    "\n",
    "forc_val1 = pred_aus[:,0,:][0] # Predicted # Quarter No 21 values\n",
    "forc_val2 = pred_aus[:,0,:][1] # Predicted # Quarter No 22 values\n",
    "forc_val3 = pred_aus[:,0,:][2] # Predicted # Quarter No 23 values\n",
    "forc_val4 = pred_aus[:,0,:][3] # Predicted # Quarter No 24 values\n",
    "forc_val5 = pred_aus[:,0,:][4] # Predicted # Quarter No 25 values\n",
    "forc_val6 = pred_aus[:,0,:][5] # Predicted # Quarter No 26 values\n",
    "forc_val7 = pred_aus[:,0,:][6] # Predicted # Quarter No 27 values\n",
    "forc_val8 = pred_aus[:,0,:][7] # Predicted # Quarter No 28 values\n",
    "\n",
    "\n",
    "# WE can have a forecast upto 36 quarters which we can compare\n",
    "# after that we can use the last forecast one to make even more!\n",
    "\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(x = x, y=prev_val1, name=\"Train - Q19\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x1, y=prev_val2, name=\"Train - Q20\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x2, y=forc_val1, name=\"Forecast - Q21\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x3, y=forc_val2, name=\"Forecast - Q22\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x4, y=forc_val3, name=\"Forecast - Q23\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x5, y=forc_val4, name=\"Forecast - Q24\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x6, y=forc_val5, name=\"Forecast - Q25\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x7, y=forc_val6, name=\"Forecast - Q26\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x8, y=forc_val7, name=\"Forecast - Q27\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x9, y=forc_val8, name=\"Forecast - Q28\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#can be forecasted upto 36 quarters!\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Visualization of previous 2 quarters vs next 5 quarters - forecasting\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"examples\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>actual features</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>predictions features</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fULL 8 STEPS FORECASTING VISUALIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = list(range(84, 84+256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "blue"
         },
         "name": "Prev. Trained Values",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          45906,
          26042,
          9815,
          2740,
          29347,
          20676,
          11823,
          3466,
          32492,
          20582,
          13565,
          6114,
          31813,
          21613,
          11478,
          5976,
          46793,
          26947,
          10027,
          3126,
          31442,
          19481,
          11875,
          4068,
          34623,
          20026,
          11713,
          5820,
          31118,
          20431,
          10582,
          6187,
          47030,
          24284,
          9734,
          4603,
          30852,
          19430,
          10590,
          3595,
          34157,
          19358,
          11311,
          5590,
          32332,
          21834,
          13075,
          5614,
          44072,
          23461,
          9031,
          3821,
          32250,
          20351,
          10366,
          5000,
          32259,
          20876,
          11888,
          4826,
          32037,
          21093,
          11053,
          7262,
          44888,
          24805,
          9824,
          4421,
          28899,
          20576,
          10418,
          3636,
          31813,
          23966,
          13598,
          6163,
          32790,
          23466,
          12164,
          7243,
          43322,
          27380,
          9985,
          3173
         ],
         "yaxis": "y"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast",
         "type": "scatter",
         "x": [
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          188,
          189,
          190,
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          261,
          262,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          270,
          271,
          272,
          273,
          274,
          275,
          276,
          277,
          278,
          279,
          280,
          281,
          282,
          283,
          284,
          285,
          286,
          287,
          288,
          289,
          290,
          291,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          303,
          304,
          305,
          306,
          307,
          308,
          309,
          310,
          311,
          312,
          313,
          314,
          315,
          316,
          317,
          318,
          319,
          320,
          321,
          322,
          323,
          324,
          325,
          326,
          327,
          328,
          329,
          330,
          331,
          332,
          333,
          334,
          335,
          336,
          337,
          338,
          339
         ],
         "xaxis": "x",
         "y": [
          29481.65463256836,
          23037.347930908203,
          10617.779026031494,
          4485.514343261719,
          31963.65463256836,
          22504.347930908203,
          11245.779026031494,
          6104.514343261719,
          30941.65463256836,
          24710.347930908203,
          11053.779026031494,
          5381.514343261719,
          42363.65463256836,
          30595.347930908203,
          9555.779026031494,
          3766.5143432617188,
          29729.65463256836,
          23890.347930908203,
          10043.779026031494,
          3746.5143432617188,
          33915.65463256836,
          23281.347930908203,
          12031.779026031494,
          5040.514343261719,
          29342.65463256836,
          24239.347930908203,
          10299.779026031494,
          6764.514343261719,
          44315.65463256836,
          28838.347930908203,
          9117.779026031494,
          4149.514343261719,
          31529.167770385742,
          22319.35189819336,
          11084.436210632324,
          6012.324656963348,
          30507.167770385742,
          24525.35189819336,
          10892.436210632324,
          5289.324656963348,
          41929.16777038574,
          30410.35189819336,
          9394.436210632324,
          3674.3246569633484,
          29295.167770385742,
          23705.35189819336,
          9882.436210632324,
          3654.3246569633484,
          33481.16777038574,
          23096.35189819336,
          11870.436210632324,
          4948.324656963348,
          28908.167770385742,
          24054.35189819336,
          10138.436210632324,
          6672.324656963348,
          43881.16777038574,
          28653.35189819336,
          8956.436210632324,
          4057.3246569633484,
          26557.167770385742,
          19477.35189819336,
          9033.436210632324,
          4125.324656963348,
          30960.898529052734,
          24719.120208740234,
          11060.364807128906,
          5385.787635803223,
          42382.898529052734,
          30604.120208740234,
          9562.364807128906,
          3770.7876358032227,
          29748.898529052734,
          23899.120208740234,
          10050.364807128906,
          3750.7876358032227,
          33934.898529052734,
          23290.120208740234,
          12038.364807128906,
          5044.787635803223,
          29361.898529052734,
          24248.120208740234,
          10306.364807128906,
          6768.787635803223,
          44334.898529052734,
          28847.120208740234,
          9124.364807128906,
          4153.787635803223,
          27010.898529052734,
          19671.120208740234,
          9201.364807128906,
          4221.787635803223,
          31238.898529052734,
          19779.120208740234,
          11040.364807128906,
          5255.787635803223,
          42350.92922973633,
          30590.396453857422,
          9550.73085975647,
          3764.0205001831055,
          29716.929229736328,
          23885.396453857422,
          10038.73085975647,
          3744.0205001831055,
          33902.92922973633,
          23276.396453857422,
          12026.73085975647,
          5038.0205001831055,
          29329.929229736328,
          24234.396453857422,
          10294.73085975647,
          6762.0205001831055,
          44302.92922973633,
          28833.396453857422,
          9112.73085975647,
          4147.0205001831055,
          26978.929229736328,
          19657.396453857422,
          9189.73085975647,
          4215.0205001831055,
          31206.929229736328,
          19765.396453857422,
          11028.73085975647,
          5249.0205001831055,
          26677.929229736328,
          19976.396453857422,
          11575.73085975647,
          5566.0205001831055,
          29942.703979492188,
          23981.700775146484,
          10122.496658325195,
          3791.9901580810547,
          34128.70397949219,
          23372.700775146484,
          12110.496658325195,
          5085.990158081055,
          29555.703979492188,
          24330.700775146484,
          10378.496658325195,
          6809.990158081055,
          44528.70397949219,
          28929.700775146484,
          9196.496658325195,
          4194.990158081055,
          27204.703979492188,
          19753.700775146484,
          9273.496658325195,
          4262.990158081055,
          31432.703979492188,
          19861.700775146484,
          11112.496658325195,
          5296.990158081055,
          26903.703979492188,
          20072.700775146484,
          11659.496658325195,
          5613.990158081055,
          44086.70397949219,
          26363.700775146484,
          8824.496658325195,
          4219.990158081055,
          33340.58450317383,
          23035.954544067383,
          11818.420379638672,
          4918.280212402344,
          28767.584503173828,
          23993.954544067383,
          10086.420379638672,
          6642.280212402344,
          43740.58450317383,
          28592.954544067383,
          8904.420379638672,
          4027.2802124023438,
          26416.584503173828,
          19416.954544067383,
          8981.420379638672,
          4095.2802124023438,
          30644.584503173828,
          19524.954544067383,
          10820.420379638672,
          5129.280212402344,
          26115.584503173828,
          19735.954544067383,
          11367.420379638672,
          5446.280212402344,
          43298.58450317383,
          26026.954544067383,
          8532.420379638672,
          4052.2802124023438,
          30474.584503173828,
          22729.954544067383,
          9919.420379638672,
          3672.2802124023438,
          29460.672821044922,
          24290.248962402344,
          10342.945922851562,
          6789.756904602051,
          44433.67282104492,
          28889.248962402344,
          9160.945922851562,
          4174.756904602051,
          27109.672821044922,
          19713.248962402344,
          9237.945922851562,
          4242.756904602051,
          31337.672821044922,
          19821.248962402344,
          11076.945922851562,
          5276.756904602051,
          26808.672821044922,
          20032.248962402344,
          11623.945922851562,
          5593.756904602051,
          43991.67282104492,
          26323.248962402344,
          8788.945922851562,
          4199.756904602051,
          31167.672821044922,
          23026.248962402344,
          10175.945922851562,
          3819.756904602051,
          31328.672821044922,
          19829.248962402344,
          11428.945922851562,
          4017.756904602051,
          44138.54605102539,
          28763.45932006836,
          9051.695583343506,
          4112.178764343262,
          26814.54605102539,
          19587.45932006836,
          9128.695583343506,
          4180.178764343262,
          31042.54605102539,
          19695.45932006836,
          10967.695583343506,
          5214.178764343262,
          26513.54605102539,
          19906.45932006836,
          11514.695583343506,
          5531.178764343262,
          43696.54605102539,
          26197.45932006836,
          8679.695583343506,
          4137.178764343262,
          30872.54605102539,
          22900.45932006836,
          10066.695583343506,
          3757.1787643432617,
          31033.54605102539,
          19703.45932006836,
          11319.695583343506,
          3955.1787643432617,
          31940.54605102539,
          22710.45932006836,
          10751.695583343506,
          4215.178764343262
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Visualization of previous trained data vs 8 steps future forecasting"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "examples"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>actual features</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>predictions features</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"0e44aee0-efc6-4ae5-8ab4-6c9984fa3cc8\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0e44aee0-efc6-4ae5-8ab4-6c9984fa3cc8\")) {                    Plotly.newPlot(                        \"0e44aee0-efc6-4ae5-8ab4-6c9984fa3cc8\",                        [{\"line\":{\"color\":\"blue\"},\"name\":\"Prev. Trained Values\",\"y\":[45906,26042,9815,2740,29347,20676,11823,3466,32492,20582,13565,6114,31813,21613,11478,5976,46793,26947,10027,3126,31442,19481,11875,4068,34623,20026,11713,5820,31118,20431,10582,6187,47030,24284,9734,4603,30852,19430,10590,3595,34157,19358,11311,5590,32332,21834,13075,5614,44072,23461,9031,3821,32250,20351,10366,5000,32259,20876,11888,4826,32037,21093,11053,7262,44888,24805,9824,4421,28899,20576,10418,3636,31813,23966,13598,6163,32790,23466,12164,7243,43322,27380,9985,3173],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast\",\"x\":[84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339],\"y\":[29481.65463256836,23037.347930908203,10617.779026031494,4485.514343261719,31963.65463256836,22504.347930908203,11245.779026031494,6104.514343261719,30941.65463256836,24710.347930908203,11053.779026031494,5381.514343261719,42363.65463256836,30595.347930908203,9555.779026031494,3766.5143432617188,29729.65463256836,23890.347930908203,10043.779026031494,3746.5143432617188,33915.65463256836,23281.347930908203,12031.779026031494,5040.514343261719,29342.65463256836,24239.347930908203,10299.779026031494,6764.514343261719,44315.65463256836,28838.347930908203,9117.779026031494,4149.514343261719,31529.167770385742,22319.35189819336,11084.436210632324,6012.324656963348,30507.167770385742,24525.35189819336,10892.436210632324,5289.324656963348,41929.16777038574,30410.35189819336,9394.436210632324,3674.3246569633484,29295.167770385742,23705.35189819336,9882.436210632324,3654.3246569633484,33481.16777038574,23096.35189819336,11870.436210632324,4948.324656963348,28908.167770385742,24054.35189819336,10138.436210632324,6672.324656963348,43881.16777038574,28653.35189819336,8956.436210632324,4057.3246569633484,26557.167770385742,19477.35189819336,9033.436210632324,4125.324656963348,30960.898529052734,24719.120208740234,11060.364807128906,5385.787635803223,42382.898529052734,30604.120208740234,9562.364807128906,3770.7876358032227,29748.898529052734,23899.120208740234,10050.364807128906,3750.7876358032227,33934.898529052734,23290.120208740234,12038.364807128906,5044.787635803223,29361.898529052734,24248.120208740234,10306.364807128906,6768.787635803223,44334.898529052734,28847.120208740234,9124.364807128906,4153.787635803223,27010.898529052734,19671.120208740234,9201.364807128906,4221.787635803223,31238.898529052734,19779.120208740234,11040.364807128906,5255.787635803223,42350.92922973633,30590.396453857422,9550.73085975647,3764.0205001831055,29716.929229736328,23885.396453857422,10038.73085975647,3744.0205001831055,33902.92922973633,23276.396453857422,12026.73085975647,5038.0205001831055,29329.929229736328,24234.396453857422,10294.73085975647,6762.0205001831055,44302.92922973633,28833.396453857422,9112.73085975647,4147.0205001831055,26978.929229736328,19657.396453857422,9189.73085975647,4215.0205001831055,31206.929229736328,19765.396453857422,11028.73085975647,5249.0205001831055,26677.929229736328,19976.396453857422,11575.73085975647,5566.0205001831055,29942.703979492188,23981.700775146484,10122.496658325195,3791.9901580810547,34128.70397949219,23372.700775146484,12110.496658325195,5085.990158081055,29555.703979492188,24330.700775146484,10378.496658325195,6809.990158081055,44528.70397949219,28929.700775146484,9196.496658325195,4194.990158081055,27204.703979492188,19753.700775146484,9273.496658325195,4262.990158081055,31432.703979492188,19861.700775146484,11112.496658325195,5296.990158081055,26903.703979492188,20072.700775146484,11659.496658325195,5613.990158081055,44086.70397949219,26363.700775146484,8824.496658325195,4219.990158081055,33340.58450317383,23035.954544067383,11818.420379638672,4918.280212402344,28767.584503173828,23993.954544067383,10086.420379638672,6642.280212402344,43740.58450317383,28592.954544067383,8904.420379638672,4027.2802124023438,26416.584503173828,19416.954544067383,8981.420379638672,4095.2802124023438,30644.584503173828,19524.954544067383,10820.420379638672,5129.280212402344,26115.584503173828,19735.954544067383,11367.420379638672,5446.280212402344,43298.58450317383,26026.954544067383,8532.420379638672,4052.2802124023438,30474.584503173828,22729.954544067383,9919.420379638672,3672.2802124023438,29460.672821044922,24290.248962402344,10342.945922851562,6789.756904602051,44433.67282104492,28889.248962402344,9160.945922851562,4174.756904602051,27109.672821044922,19713.248962402344,9237.945922851562,4242.756904602051,31337.672821044922,19821.248962402344,11076.945922851562,5276.756904602051,26808.672821044922,20032.248962402344,11623.945922851562,5593.756904602051,43991.67282104492,26323.248962402344,8788.945922851562,4199.756904602051,31167.672821044922,23026.248962402344,10175.945922851562,3819.756904602051,31328.672821044922,19829.248962402344,11428.945922851562,4017.756904602051,44138.54605102539,28763.45932006836,9051.695583343506,4112.178764343262,26814.54605102539,19587.45932006836,9128.695583343506,4180.178764343262,31042.54605102539,19695.45932006836,10967.695583343506,5214.178764343262,26513.54605102539,19906.45932006836,11514.695583343506,5531.178764343262,43696.54605102539,26197.45932006836,8679.695583343506,4137.178764343262,30872.54605102539,22900.45932006836,10066.695583343506,3757.1787643432617,31033.54605102539,19703.45932006836,11319.695583343506,3955.1787643432617,31940.54605102539,22710.45932006836,10751.695583343506,4215.178764343262],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"examples\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>actual features</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>predictions features</b>\"}},\"title\":{\"text\":\"Visualization of previous trained data vs 8 steps future forecasting\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('0e44aee0-efc6-4ae5-8ab4-6c9984fa3cc8');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "prev_vals = first_daily_df[:21].values.flatten() \n",
    "forc_vals = pred_aus.flatten() \n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=prev_vals, name=\"Prev. Trained Values\",line=dict(color=\"blue\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(x = X, y=forc_vals, name=\"Forecast\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "\n",
    "#can be forecasted upto 36 quarters!\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Visualization of previous trained data vs 8 steps future forecasting\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"examples\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>actual features</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>predictions features</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Level 0 (top): total visitors in Australia;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uI7az9qath86"
   },
   "source": [
    "#Final Data Split (taking last feature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "IxAKvN192M44",
    "outputId": "5f3526d2-d5fb-4cd5-c858-8aa73fb60800"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>86893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>66866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>72182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>68318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>85651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>64467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>70416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>72855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>80385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>67967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>69849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>71445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>83938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>63529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>75540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>75663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>83860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>67193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>71389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>71658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>85852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>66981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>73840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>70217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>85992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>59637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>66846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>63392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>82637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>67523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>65938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>69544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    total\n",
       "0   84503\n",
       "1   65312\n",
       "2   72753\n",
       "3   70880\n",
       "4   86893\n",
       "5   66866\n",
       "6   72182\n",
       "7   68318\n",
       "8   85651\n",
       "9   64467\n",
       "10  70416\n",
       "11  72855\n",
       "12  80385\n",
       "13  67967\n",
       "14  69849\n",
       "15  71445\n",
       "16  83938\n",
       "17  63529\n",
       "18  75540\n",
       "19  75663\n",
       "20  83860\n",
       "21  67193\n",
       "22  71389\n",
       "23  71658\n",
       "24  85852\n",
       "25  66981\n",
       "26  73840\n",
       "27  70217\n",
       "28  85992\n",
       "29  59637\n",
       "30  66846\n",
       "31  63392\n",
       "32  82637\n",
       "33  67523\n",
       "34  65938\n",
       "35  69544"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#last column\n",
    "first_daily_df=df.iloc[:,88:89]\n",
    "difference=first_daily_df.diff()\n",
    "first_daily_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "id": "3KrVzU3ImnA4"
   },
   "outputs": [],
   "source": [
    "n_past = 1\n",
    "n_future = 8 # we will now predict for 8 future values\n",
    "no_of_features =1\n",
    "\n",
    "#Split into the train and test data\n",
    "train_dataF,test_dataF = difference[0:20], difference[20:] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2q0h9dl_nYS4",
    "outputId": "1336b7ad-caa1-4b45-e614-ed049994fc8a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['total'], dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dataF.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "x4teZI-amv0G",
    "outputId": "f3a756b7-f12f-476a-af55-c7d0bde345ee"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-54-780f25834c4b>:9: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "<ipython-input-54-780f25834c4b>:17: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Scaling the values for faster training of the models\n",
    "train = train_dataF\n",
    "scalers={}\n",
    "for i in train_dataF.columns:\n",
    "    scaler = MinMaxScaler(feature_range=(0,1))\n",
    "    s_s = scaler.fit_transform(train[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+ i] = scaler\n",
    "    train[i]=s_s\n",
    "test = test_dataF\n",
    "\n",
    "for i in train_dataF.columns:\n",
    "    scaler = scalers['scaler_'+i]\n",
    "    s_s = scaler.transform(test[i].values.reshape(-1,1))\n",
    "    s_s=np.reshape(s_s,len(s_s))\n",
    "    scalers['scaler_'+i] = scaler\n",
    "    test[i]=s_s\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zEVuQnQhmzlf",
    "outputId": "74de5fc2-ed24-46e0-dbe4-e5e7c1271e1b"
   },
   "outputs": [],
   "source": [
    "X_train, y_train = split_series(train.values,n_past, n_future)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5doXe86_PT-Q",
    "outputId": "a9b1012b-cff1-4c4c-b4bd-6ba91fe61ba5"
   },
   "outputs": [],
   "source": [
    "X_train, y_train = split_series(train.values,n_past, n_future)\n",
    "X_train = X_train.reshape((X_train.shape[0], X_train.shape[1],no_of_features))\n",
    "y_train = y_train.reshape((y_train.shape[0], y_train.shape[1], no_of_features))\n",
    "\n",
    "where_are_NaNs = np.isnan(X_train)\n",
    "X_train[where_are_NaNs] = 0\n",
    "X_test, y_test = split_series(test.values,n_past, n_future)\n",
    "X_test = X_test.reshape((X_test.shape[0], X_test.shape[1],no_of_features))\n",
    "y_test = y_test.reshape((y_test.shape[0], y_test.shape[1], no_of_features))\n",
    "#print(y_train,X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PTk9t9GlIG2B",
    "outputId": "38823334-ec2f-4de7-cc87-db663d9df4de"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 1, 1)\n",
      "(12, 1, 56)\n",
      "(12, 8, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "z_train=np.zeros((20-n_future,n_past,55))\n",
    "X_train = np.concatenate([X_train, z_train], -1)\n",
    "print(X_train.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DCrkdG9jHwnx",
    "outputId": "591308a8-5423-4ee0-d717-441239618283"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8, 1, 56)\n",
      "(8, 8, 1)\n",
      "(12, 1, 56)\n"
     ]
    }
   ],
   "source": [
    "z_test=np.zeros((16-n_future,n_past,55))\n",
    "X_test = np.concatenate([X_test, z_test], -1)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)\n",
    "print(X_train.shape)\n",
    "newdataX,newdatay=split_series(first_daily_df.values,n_past, n_future)\n",
    "newdatay = newdatay[20:, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "voOCbnxCyjcJ",
    "outputId": "45681e30-45bb-4e94-9cbf-5c633b007765"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_input (InputLayer)     [(None, 1, 56)]           0         \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 1, 10)             2680      \n",
      "                                                                 \n",
      " lstm_1 (LSTM)               (None, 7)                 504       \n",
      "                                                                 \n",
      " repeat_vector (RepeatVector  (None, 1, 7)             0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " lstm_2 (LSTM)               (None, 1, 7)              420       \n",
      "                                                                 \n",
      " lstm_3 (LSTM)               (None, 1, 10)             720       \n",
      "                                                                 \n",
      " time_distributed (TimeDistr  (None, 1, 56)            616       \n",
      " ibuted)                                                         \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 1, 1)              57        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 4,997\n",
      "Trainable params: 57\n",
      "Non-trainable params: 4,940\n",
      "_________________________________________________________________\n",
      "Epoch 1/300\n",
      "1/1 - 23s - loss: 0.2792 - val_loss: 0.2345 - 23s/epoch - 23s/step\n",
      "Epoch 2/300\n",
      "1/1 - 0s - loss: 0.2632 - val_loss: 0.2190 - 72ms/epoch - 72ms/step\n",
      "Epoch 3/300\n",
      "1/1 - 0s - loss: 0.2481 - val_loss: 0.2044 - 79ms/epoch - 79ms/step\n",
      "Epoch 4/300\n",
      "1/1 - 0s - loss: 0.2338 - val_loss: 0.1906 - 86ms/epoch - 86ms/step\n",
      "Epoch 5/300\n",
      "1/1 - 0s - loss: 0.2203 - val_loss: 0.1776 - 78ms/epoch - 78ms/step\n",
      "Epoch 6/300\n",
      "1/1 - 0s - loss: 0.2076 - val_loss: 0.1655 - 84ms/epoch - 84ms/step\n",
      "Epoch 7/300\n",
      "1/1 - 0s - loss: 0.1958 - val_loss: 0.1543 - 84ms/epoch - 84ms/step\n",
      "Epoch 8/300\n",
      "1/1 - 0s - loss: 0.1848 - val_loss: 0.1439 - 83ms/epoch - 83ms/step\n",
      "Epoch 9/300\n",
      "1/1 - 0s - loss: 0.1747 - val_loss: 0.1343 - 84ms/epoch - 84ms/step\n",
      "Epoch 10/300\n",
      "1/1 - 0s - loss: 0.1654 - val_loss: 0.1256 - 92ms/epoch - 92ms/step\n",
      "Epoch 11/300\n",
      "1/1 - 0s - loss: 0.1569 - val_loss: 0.1177 - 91ms/epoch - 91ms/step\n",
      "Epoch 12/300\n",
      "1/1 - 0s - loss: 0.1492 - val_loss: 0.1106 - 86ms/epoch - 86ms/step\n",
      "Epoch 13/300\n",
      "1/1 - 0s - loss: 0.1423 - val_loss: 0.1043 - 66ms/epoch - 66ms/step\n",
      "Epoch 14/300\n",
      "1/1 - 0s - loss: 0.1362 - val_loss: 0.0988 - 85ms/epoch - 85ms/step\n",
      "Epoch 15/300\n",
      "1/1 - 0s - loss: 0.1308 - val_loss: 0.0939 - 80ms/epoch - 80ms/step\n",
      "Epoch 16/300\n",
      "1/1 - 0s - loss: 0.1261 - val_loss: 0.0898 - 71ms/epoch - 71ms/step\n",
      "Epoch 17/300\n",
      "1/1 - 0s - loss: 0.1221 - val_loss: 0.0862 - 73ms/epoch - 73ms/step\n",
      "Epoch 18/300\n",
      "1/1 - 0s - loss: 0.1187 - val_loss: 0.0833 - 78ms/epoch - 78ms/step\n",
      "Epoch 19/300\n",
      "1/1 - 0s - loss: 0.1159 - val_loss: 0.0809 - 70ms/epoch - 70ms/step\n",
      "Epoch 20/300\n",
      "1/1 - 0s - loss: 0.1137 - val_loss: 0.0790 - 82ms/epoch - 82ms/step\n",
      "Epoch 21/300\n",
      "1/1 - 0s - loss: 0.1119 - val_loss: 0.0776 - 74ms/epoch - 74ms/step\n",
      "Epoch 22/300\n",
      "1/1 - 0s - loss: 0.1105 - val_loss: 0.0766 - 77ms/epoch - 77ms/step\n",
      "Epoch 23/300\n",
      "1/1 - 0s - loss: 0.1096 - val_loss: 0.0758 - 65ms/epoch - 65ms/step\n",
      "Epoch 24/300\n",
      "1/1 - 0s - loss: 0.1089 - val_loss: 0.0754 - 72ms/epoch - 72ms/step\n",
      "Epoch 25/300\n",
      "1/1 - 0s - loss: 0.1086 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 26/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 73ms/epoch - 73ms/step\n",
      "Epoch 27/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 68ms/epoch - 68ms/step\n",
      "Epoch 28/300\n",
      "1/1 - 0s - loss: 0.1086 - val_loss: 0.0755 - 85ms/epoch - 85ms/step\n",
      "Epoch 29/300\n",
      "1/1 - 0s - loss: 0.1089 - val_loss: 0.0758 - 81ms/epoch - 81ms/step\n",
      "Epoch 30/300\n",
      "1/1 - 0s - loss: 0.1092 - val_loss: 0.0761 - 84ms/epoch - 84ms/step\n",
      "Epoch 31/300\n",
      "1/1 - 0s - loss: 0.1095 - val_loss: 0.0764 - 74ms/epoch - 74ms/step\n",
      "Epoch 32/300\n",
      "1/1 - 0s - loss: 0.1099 - val_loss: 0.0767 - 84ms/epoch - 84ms/step\n",
      "Epoch 33/300\n",
      "1/1 - 0s - loss: 0.1102 - val_loss: 0.0770 - 76ms/epoch - 76ms/step\n",
      "Epoch 34/300\n",
      "1/1 - 0s - loss: 0.1104 - val_loss: 0.0772 - 66ms/epoch - 66ms/step\n",
      "Epoch 35/300\n",
      "1/1 - 0s - loss: 0.1107 - val_loss: 0.0773 - 91ms/epoch - 91ms/step\n",
      "Epoch 36/300\n",
      "1/1 - 0s - loss: 0.1108 - val_loss: 0.0774 - 97ms/epoch - 97ms/step\n",
      "Epoch 37/300\n",
      "1/1 - 0s - loss: 0.1109 - val_loss: 0.0774 - 81ms/epoch - 81ms/step\n",
      "Epoch 38/300\n",
      "1/1 - 0s - loss: 0.1109 - val_loss: 0.0774 - 100ms/epoch - 100ms/step\n",
      "Epoch 39/300\n",
      "1/1 - 0s - loss: 0.1109 - val_loss: 0.0774 - 76ms/epoch - 76ms/step\n",
      "Epoch 40/300\n",
      "1/1 - 0s - loss: 0.1109 - val_loss: 0.0772 - 84ms/epoch - 84ms/step\n",
      "Epoch 41/300\n",
      "1/1 - 0s - loss: 0.1107 - val_loss: 0.0771 - 80ms/epoch - 80ms/step\n",
      "Epoch 42/300\n",
      "1/1 - 0s - loss: 0.1106 - val_loss: 0.0769 - 88ms/epoch - 88ms/step\n",
      "Epoch 43/300\n",
      "1/1 - 0s - loss: 0.1104 - val_loss: 0.0767 - 65ms/epoch - 65ms/step\n",
      "Epoch 44/300\n",
      "1/1 - 0s - loss: 0.1102 - val_loss: 0.0765 - 84ms/epoch - 84ms/step\n",
      "Epoch 45/300\n",
      "1/1 - 0s - loss: 0.1100 - val_loss: 0.0763 - 75ms/epoch - 75ms/step\n",
      "Epoch 46/300\n",
      "1/1 - 0s - loss: 0.1098 - val_loss: 0.0761 - 82ms/epoch - 82ms/step\n",
      "Epoch 47/300\n",
      "1/1 - 0s - loss: 0.1096 - val_loss: 0.0759 - 76ms/epoch - 76ms/step\n",
      "Epoch 48/300\n",
      "1/1 - 0s - loss: 0.1094 - val_loss: 0.0758 - 98ms/epoch - 98ms/step\n",
      "Epoch 49/300\n",
      "1/1 - 0s - loss: 0.1092 - val_loss: 0.0756 - 81ms/epoch - 81ms/step\n",
      "Epoch 50/300\n",
      "1/1 - 0s - loss: 0.1090 - val_loss: 0.0755 - 77ms/epoch - 77ms/step\n",
      "Epoch 51/300\n",
      "1/1 - 0s - loss: 0.1089 - val_loss: 0.0754 - 84ms/epoch - 84ms/step\n",
      "Epoch 52/300\n",
      "1/1 - 0s - loss: 0.1087 - val_loss: 0.0753 - 72ms/epoch - 72ms/step\n",
      "Epoch 53/300\n",
      "1/1 - 0s - loss: 0.1086 - val_loss: 0.0753 - 73ms/epoch - 73ms/step\n",
      "Epoch 54/300\n",
      "1/1 - 0s - loss: 0.1086 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 55/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0752 - 71ms/epoch - 71ms/step\n",
      "Epoch 56/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0752 - 93ms/epoch - 93ms/step\n",
      "Epoch 57/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 58/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 59/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 60/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 61/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 78ms/epoch - 78ms/step\n",
      "Epoch 62/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 92ms/epoch - 92ms/step\n",
      "Epoch 63/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 105ms/epoch - 105ms/step\n",
      "Epoch 64/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 73ms/epoch - 73ms/step\n",
      "Epoch 65/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 72ms/epoch - 72ms/step\n",
      "Epoch 66/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 72ms/epoch - 72ms/step\n",
      "Epoch 67/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 84ms/epoch - 84ms/step\n",
      "Epoch 68/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 97ms/epoch - 97ms/step\n",
      "Epoch 69/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 95ms/epoch - 95ms/step\n",
      "Epoch 70/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 76ms/epoch - 76ms/step\n",
      "Epoch 71/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0754 - 81ms/epoch - 81ms/step\n",
      "Epoch 72/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 91ms/epoch - 91ms/step\n",
      "Epoch 73/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 76ms/epoch - 76ms/step\n",
      "Epoch 74/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 94ms/epoch - 94ms/step\n",
      "Epoch 75/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 86ms/epoch - 86ms/step\n",
      "Epoch 76/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 70ms/epoch - 70ms/step\n",
      "Epoch 77/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0753 - 75ms/epoch - 75ms/step\n",
      "Epoch 78/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 79/300\n",
      "1/1 - 0s - loss: 0.1085 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 80/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 81/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 82/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 83/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 84/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 85/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 71ms/epoch - 71ms/step\n",
      "Epoch 86/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 87/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 67ms/epoch - 67ms/step\n",
      "Epoch 88/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 89/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 71ms/epoch - 71ms/step\n",
      "Epoch 90/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 91/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 92/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 91ms/epoch - 91ms/step\n",
      "Epoch 93/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 94/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 95/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 96/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 97/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 98/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 99/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 100/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 95ms/epoch - 95ms/step\n",
      "Epoch 101/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 102/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 68ms/epoch - 68ms/step\n",
      "Epoch 103/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 104/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 105/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 106/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 107/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 108/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 109/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 110/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 111/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 112/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 113/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 114/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 115/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 67ms/epoch - 67ms/step\n",
      "Epoch 116/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 96ms/epoch - 96ms/step\n",
      "Epoch 117/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 73ms/epoch - 73ms/step\n",
      "Epoch 118/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 119/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 120/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 121/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 122/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 123/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 91ms/epoch - 91ms/step\n",
      "Epoch 124/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 125/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 95ms/epoch - 95ms/step\n",
      "Epoch 126/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 67ms/epoch - 67ms/step\n",
      "Epoch 127/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 128/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 129/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 130/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 131/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 70ms/epoch - 70ms/step\n",
      "Epoch 132/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 93ms/epoch - 93ms/step\n",
      "Epoch 133/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 134/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 135/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 136/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 137/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 138/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 94ms/epoch - 94ms/step\n",
      "Epoch 139/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 65ms/epoch - 65ms/step\n",
      "Epoch 140/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 141/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 142/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 143/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 144/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 95ms/epoch - 95ms/step\n",
      "Epoch 145/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 91ms/epoch - 91ms/step\n",
      "Epoch 146/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 147/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 96ms/epoch - 96ms/step\n",
      "Epoch 148/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 149/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 150/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 151/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 69ms/epoch - 69ms/step\n",
      "Epoch 152/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 153/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 154/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 155/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 156/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 157/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 158/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 159/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 160/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 161/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 91ms/epoch - 91ms/step\n",
      "Epoch 162/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 163/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 164/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 165/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 166/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 167/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 168/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 169/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 107ms/epoch - 107ms/step\n",
      "Epoch 170/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 171/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 172/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 173/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 174/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 96ms/epoch - 96ms/step\n",
      "Epoch 175/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 98ms/epoch - 98ms/step\n",
      "Epoch 176/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 71ms/epoch - 71ms/step\n",
      "Epoch 177/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 178/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 179/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 180/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 181/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 182/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 183/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 184/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 185/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 186/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 187/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 94ms/epoch - 94ms/step\n",
      "Epoch 188/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 189/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 190/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 69ms/epoch - 69ms/step\n",
      "Epoch 191/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 192/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 101ms/epoch - 101ms/step\n",
      "Epoch 193/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 61ms/epoch - 61ms/step\n",
      "Epoch 194/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 195/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 196/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 197/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 198/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 66ms/epoch - 66ms/step\n",
      "Epoch 199/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 97ms/epoch - 97ms/step\n",
      "Epoch 200/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 201/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 68ms/epoch - 68ms/step\n",
      "Epoch 202/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 203/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 204/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 205/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 206/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 96ms/epoch - 96ms/step\n",
      "Epoch 207/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 87ms/epoch - 87ms/step\n",
      "Epoch 208/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 209/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 72ms/epoch - 72ms/step\n",
      "Epoch 210/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 211/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 91ms/epoch - 91ms/step\n",
      "Epoch 212/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 109ms/epoch - 109ms/step\n",
      "Epoch 213/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 214/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 215/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 216/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 217/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 62ms/epoch - 62ms/step\n",
      "Epoch 218/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 219/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 220/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 70ms/epoch - 70ms/step\n",
      "Epoch 221/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 222/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 223/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 224/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 225/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 89ms/epoch - 89ms/step\n",
      "Epoch 226/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 66ms/epoch - 66ms/step\n",
      "Epoch 227/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 95ms/epoch - 95ms/step\n",
      "Epoch 228/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 229/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 93ms/epoch - 93ms/step\n",
      "Epoch 230/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 90ms/epoch - 90ms/step\n",
      "Epoch 231/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 232/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 233/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 234/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 235/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 236/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 93ms/epoch - 93ms/step\n",
      "Epoch 237/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 98ms/epoch - 98ms/step\n",
      "Epoch 238/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 72ms/epoch - 72ms/step\n",
      "Epoch 239/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 240/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 241/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 242/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 243/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 96ms/epoch - 96ms/step\n",
      "Epoch 244/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 245/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 246/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 78ms/epoch - 78ms/step\n",
      "Epoch 247/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 248/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 249/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 250/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 97ms/epoch - 97ms/step\n",
      "Epoch 251/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 73ms/epoch - 73ms/step\n",
      "Epoch 252/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 79ms/epoch - 79ms/step\n",
      "Epoch 253/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 254/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 255/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 256/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n",
      "Epoch 257/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 77ms/epoch - 77ms/step\n",
      "Epoch 258/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 259/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 260/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 261/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 102ms/epoch - 102ms/step\n",
      "Epoch 262/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 263/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 73ms/epoch - 73ms/step\n",
      "Epoch 264/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 72ms/epoch - 72ms/step\n",
      "Epoch 265/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 266/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 267/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 69ms/epoch - 69ms/step\n",
      "Epoch 268/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 269/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 101ms/epoch - 101ms/step\n",
      "Epoch 270/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 271/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 59ms/epoch - 59ms/step\n",
      "Epoch 272/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 273/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 274/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 86ms/epoch - 86ms/step\n",
      "Epoch 275/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 100ms/epoch - 100ms/step\n",
      "Epoch 276/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 72ms/epoch - 72ms/step\n",
      "Epoch 277/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 278/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 97ms/epoch - 97ms/step\n",
      "Epoch 279/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 280/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 281/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 282/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 95ms/epoch - 95ms/step\n",
      "Epoch 283/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 85ms/epoch - 85ms/step\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 284/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 285/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 286/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 92ms/epoch - 92ms/step\n",
      "Epoch 287/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 98ms/epoch - 98ms/step\n",
      "Epoch 288/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 74ms/epoch - 74ms/step\n",
      "Epoch 289/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 80ms/epoch - 80ms/step\n",
      "Epoch 290/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 88ms/epoch - 88ms/step\n",
      "Epoch 291/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 84ms/epoch - 84ms/step\n",
      "Epoch 292/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 293/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 294/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 295/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 76ms/epoch - 76ms/step\n",
      "Epoch 296/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 81ms/epoch - 81ms/step\n",
      "Epoch 297/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 82ms/epoch - 82ms/step\n",
      "Epoch 298/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 75ms/epoch - 75ms/step\n",
      "Epoch 299/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 83ms/epoch - 83ms/step\n",
      "Epoch 300/300\n",
      "1/1 - 0s - loss: 0.1084 - val_loss: 0.0752 - 94ms/epoch - 94ms/step\n",
      "(8, 1, 1)\n",
      "(8, 8, 1)\n"
     ]
    }
   ],
   "source": [
    "model3=load_model('aus(8step).h5') \n",
    "for layer in model3.layers[:7]:\n",
    "    layer.trainable = False\n",
    "\n",
    "# Get input\n",
    "new_input = model3.input\n",
    "# Find the layer to connect\n",
    "hidden_layer = model3.layers[-2].output\n",
    "# Connect a new layer on it\n",
    "new_output = Dense(no_of_features) (hidden_layer)\n",
    "# Build a new model\n",
    "new_model3 = Model(new_input, new_output)\n",
    "new_model3.compile(optimizer='adam', loss='mse')\n",
    "new_model3.summary()\n",
    "\n",
    "fit_history3 = new_model3.fit(X_train, y_train, epochs=300, batch_size=60, \n",
    "                     validation_split=0.33, verbose=2, shuffle=False)   #700\n",
    "\n",
    "#Predictions on test set\n",
    "pred_aus=new_model3.predict(X_test)\n",
    "print(pred_aus.shape)\n",
    "\n",
    "\n",
    "\"\"\"Inverse Scaling of the predicted values\"\"\"\n",
    "for index,i in enumerate(train_dataF.columns):\n",
    "    scaler = scalers['scaler_'+i]  \n",
    "    pred_aus[:,:,index]=scaler.inverse_transform(pred_aus[:,:,index])\n",
    "\n",
    "\n",
    "pred_aus = [diff_inverse( pred_aus[i],  newdatay[i] ) for i in range(len(pred_aus))]\n",
    "pred_aus=np.array(pred_aus)\n",
    "#print(pred_aus)\n",
    "print(pred_aus.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 542
    },
    "id": "jF7JvhcsRAgx",
    "outputId": "dbe6c055-e1ef-493c-b688-39b00143c2b0"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "name": "Training Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.2791779041290283,
          0.26323357224464417,
          0.2480941116809845,
          0.23377205431461334,
          0.22027745842933655,
          0.20761793851852417,
          0.19579800963401794,
          0.18481889367103577,
          0.17467844486236572,
          0.16537047922611237,
          0.15688477456569672,
          0.1492069661617279,
          0.14231812953948975,
          0.13619494438171387,
          0.1308094561100006,
          0.12612920999526978,
          0.12211750447750092,
          0.11873351037502289,
          0.11593276262283325,
          0.11366760730743408,
          0.1118878647685051,
          0.11054156720638275,
          0.10957565158605576,
          0.10893701016902924,
          0.10857326537370682,
          0.10843371599912643,
          0.10847021639347076,
          0.10863793641328812,
          0.10889605432748795,
          0.10920828580856323,
          0.10954326391220093,
          0.10987477749586105,
          0.1101817637681961,
          0.11044825613498688,
          0.11066305637359619,
          0.11081941425800323,
          0.11091449856758118,
          0.11094889789819717,
          0.11092595756053925,
          0.11085125803947449,
          0.11073198914527893,
          0.11057636141777039,
          0.11039315164089203,
          0.11019116640090942,
          0.10997890681028366,
          0.1097642332315445,
          0.10955411195755005,
          0.10935444384813309,
          0.10916998237371445,
          0.10900424420833588,
          0.1088595986366272,
          0.10873723030090332,
          0.10863737761974335,
          0.10855931788682938,
          0.10850163549184799,
          0.10846233367919922,
          0.10843901336193085,
          0.10842901468276978,
          0.10842958092689514,
          0.10843802988529205,
          0.10845179110765457,
          0.10846854746341705,
          0.10848629474639893,
          0.10850337147712708,
          0.10851846635341644,
          0.1085306853055954,
          0.10853943228721619,
          0.10854445397853851,
          0.10854575783014297,
          0.10854358971118927,
          0.10853838175535202,
          0.10853066295385361,
          0.10852102935314178,
          0.10851012170314789,
          0.10849856585264206,
          0.10848691314458847,
          0.10847567021846771,
          0.10846522450447083,
          0.10845589637756348,
          0.10844787955284119,
          0.10844128578901291,
          0.10843614488840103,
          0.10843239724636078,
          0.1084299087524414,
          0.10842853784561157,
          0.10842809081077576,
          0.10842835903167725,
          0.10842913389205933,
          0.10843022912740707,
          0.10843145847320557,
          0.10843268781900406,
          0.1084337905049324,
          0.10843469202518463,
          0.10843532532453537,
          0.10843567550182343,
          0.1084357500076294,
          0.10843554139137268,
          0.10843512415885925,
          0.1084345132112503,
          0.10843376815319061,
          0.10843296349048615,
          0.10843212157487869,
          0.10843130946159363,
          0.10843054205179214,
          0.10842986404895782,
          0.10842929780483246,
          0.10842882841825485,
          0.1084284782409668,
          0.10842825472354889,
          0.10842810571193695,
          0.10842804610729218,
          0.10842806100845337,
          0.10842812061309814,
          0.10842821002006531,
          0.10842832177877426,
          0.10842841863632202,
          0.10842850804328918,
          0.10842858254909515,
          0.10842862725257874,
          0.10842864215373993,
          0.10842864215373993,
          0.10842861980199814,
          0.10842856764793396,
          0.10842850804328918,
          0.10842844098806381,
          0.10842837393283844,
          0.10842829942703247,
          0.1084282323718071,
          0.10842817276716232,
          0.10842812061309814,
          0.10842807590961456,
          0.10842804610729218,
          0.10842803120613098,
          0.10842801630496979,
          0.10842801630496979,
          0.10842801630496979,
          0.10842801630496979,
          0.10842803120613098,
          0.10842803865671158,
          0.10842804610729218,
          0.10842804610729218,
          0.10842806100845337,
          0.10842804610729218,
          0.10842805355787277,
          0.10842804610729218,
          0.10842804610729218,
          0.10842803120613098,
          0.10842803120613098,
          0.10842801630496979,
          0.10842800885438919,
          0.1084280014038086,
          0.108427993953228,
          0.108427993953228,
          0.1084279865026474,
          0.1084279716014862,
          0.1084279865026474,
          0.1084279790520668,
          0.1084279716014862,
          0.1084279716014862,
          0.1084279716014862,
          0.1084279716014862,
          0.10842796415090561,
          0.1084279716014862,
          0.10842796415090561,
          0.10842795670032501,
          0.10842796415090561,
          0.10842795670032501,
          0.10842795670032501,
          0.10842795670032501,
          0.10842794924974442,
          0.10842795670032501,
          0.10842794924974442,
          0.10842794179916382,
          0.10842794179916382,
          0.10842794179916382,
          0.10842794179916382,
          0.10842792689800262,
          0.10842792689800262,
          0.10842793434858322,
          0.10842792689800262,
          0.10842792689800262,
          0.10842792689800262,
          0.10842792689800262,
          0.10842792689800262,
          0.10842791944742203,
          0.10842791944742203,
          0.10842791199684143,
          0.10842791199684143,
          0.10842791199684143,
          0.10842791199684143,
          0.10842790454626083,
          0.10842791199684143,
          0.10842789709568024,
          0.10842789709568024,
          0.10842789709568024,
          0.10842789709568024,
          0.10842789709568024,
          0.10842788964509964,
          0.10842788964509964,
          0.10842788964509964,
          0.10842788964509964,
          0.10842788219451904,
          0.10842788219451904,
          0.10842788219451904,
          0.10842787474393845,
          0.10842787474393845,
          0.10842787474393845,
          0.10842787474393845,
          0.10842786729335785,
          0.10842786729335785,
          0.10842786729335785,
          0.10842786729335785,
          0.10842785984277725,
          0.10842785239219666,
          0.10842785984277725,
          0.10842785239219666,
          0.10842784494161606,
          0.10842785239219666,
          0.10842784494161606,
          0.10842783749103546,
          0.10842783749103546,
          0.10842783749103546,
          0.10842784494161606,
          0.10842783749103546,
          0.10842783749103546,
          0.10842782258987427,
          0.10842782258987427,
          0.10842783004045486,
          0.10842782258987427,
          0.10842782258987427,
          0.10842782258987427,
          0.10842782258987427,
          0.10842780768871307,
          0.10842780768871307,
          0.10842780768871307,
          0.10842780768871307,
          0.10842780768871307,
          0.10842780768871307,
          0.10842780023813248,
          0.10842780023813248,
          0.10842780768871307,
          0.10842780023813248,
          0.10842779278755188,
          0.10842779278755188,
          0.10842777788639069,
          0.10842777788639069,
          0.10842777788639069,
          0.10842777788639069,
          0.10842777788639069,
          0.10842777788639069,
          0.10842777043581009,
          0.10842777788639069,
          0.10842776298522949,
          0.10842776298522949,
          0.10842776298522949,
          0.10842776298522949,
          0.1084277555346489,
          0.1084277480840683,
          0.10842776298522949,
          0.1084277480840683,
          0.1084277555346489,
          0.1084277480840683,
          0.1084277480840683,
          0.1084277406334877,
          0.1084277331829071,
          0.1084277406334877,
          0.1084277331829071,
          0.1084277331829071,
          0.1084277331829071,
          0.10842772573232651,
          0.10842772573232651,
          0.10842771828174591,
          0.10842771828174591,
          0.10842771828174591,
          0.10842771828174591,
          0.10842771083116531,
          0.10842771083116531,
          0.10842771083116531,
          0.10842770338058472,
          0.10842770338058472,
          0.10842769593000412,
          0.10842770338058472,
          0.10842768847942352,
          0.10842768847942352,
          0.10842768847942352,
          0.10842768847942352,
          0.10842768102884293,
          0.10842768847942352,
          0.10842767357826233,
          0.10842767357826233,
          0.10842767357826233,
          0.10842767357826233,
          0.10842766612768173,
          0.10842766612768173,
          0.10842765867710114,
          0.10842766612768173,
          0.10842765867710114,
          0.10842765867710114,
          0.10842765122652054,
          0.10842765867710114
         ],
         "yaxis": "y"
        },
        {
         "name": "Validation Loss",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          0.23451882600784302,
          0.21904754638671875,
          0.20440559089183807,
          0.1906033456325531,
          0.177648663520813,
          0.1655462682247162,
          0.15429764986038208,
          0.1439007967710495,
          0.13434962928295135,
          0.12563396990299225,
          0.1177394837141037,
          0.1106472909450531,
          0.10433387756347656,
          0.09877116978168488,
          0.09392654150724411,
          0.08976300060749054,
          0.08623936772346497,
          0.0833108052611351,
          0.08092927187681198,
          0.07904405891895294,
          0.07760267704725266,
          0.07655154913663864,
          0.07583694159984589,
          0.07540591061115265,
          0.07520712912082672,
          0.07519185543060303,
          0.07531468570232391,
          0.07553423196077347,
          0.0758136659860611,
          0.07612112164497375,
          0.07642991095781326,
          0.07671856135129929,
          0.07697069644927979,
          0.07717478275299072,
          0.07732375711202621,
          0.07741450518369675,
          0.07744734734296799,
          0.07742542773485184,
          0.07735411822795868,
          0.07724040746688843,
          0.07709231972694397,
          0.07691845297813416,
          0.07672742009162903,
          0.07652756571769714,
          0.07632654905319214,
          0.07613115012645721,
          0.0759470984339714,
          0.07577891647815704,
          0.07562994211912155,
          0.07550232112407684,
          0.07539708912372589,
          0.0753142237663269,
          0.07525286078453064,
          0.07521139085292816,
          0.07518763840198517,
          0.07517905533313751,
          0.07518284022808075,
          0.07519615441560745,
          0.07521617412567139,
          0.07524027675390244,
          0.07526610791683197,
          0.07529160380363464,
          0.07531511038541794,
          0.07533535361289978,
          0.07535141706466675,
          0.07536278665065765,
          0.07536926120519638,
          0.07537094503641129,
          0.07536816596984863,
          0.07536143064498901,
          0.07535138726234436,
          0.07533873617649078,
          0.07532423734664917,
          0.07530860602855682,
          0.07529249042272568,
          0.07527651637792587,
          0.0752611756324768,
          0.07524685561656952,
          0.07523385435342789,
          0.07522235810756683,
          0.07521243393421173,
          0.07520411908626556,
          0.07519731670618057,
          0.0751919224858284,
          0.07518777996301651,
          0.07518470287322998,
          0.07518250495195389,
          0.0751810222864151,
          0.0751800611615181,
          0.07517948001623154,
          0.07517915964126587,
          0.07517899572849274,
          0.07517892867326736,
          0.07517890632152557,
          0.07517889887094498,
          0.07517890632152557,
          0.07517895102500916,
          0.07517901062965393,
          0.07517915964126587,
          0.07517937570810318,
          0.07517969608306885,
          0.07518012821674347,
          0.07518069446086884,
          0.07518137991428375,
          0.07518218457698822,
          0.07518308609724045,
          0.07518406212329865,
          0.07518509775400162,
          0.07518614828586578,
          0.07518720626831055,
          0.07518821954727173,
          0.07518918812274933,
          0.07519005239009857,
          0.07519082725048065,
          0.07519146800041199,
          0.07519198209047318,
          0.07519236207008362,
          0.07519260048866272,
          0.07519271969795227,
          0.07519270479679108,
          0.07519258558750153,
          0.07519236952066422,
          0.07519207894802094,
          0.07519170641899109,
          0.07519128918647766,
          0.07519084215164185,
          0.07519038021564484,
          0.07518989592790604,
          0.07518942654132843,
          0.07518896460533142,
          0.0751885324716568,
          0.07518813014030457,
          0.07518775761127472,
          0.07518741488456726,
          0.07518711686134338,
          0.07518686354160309,
          0.07518664002418518,
          0.07518646121025085,
          0.07518632709980011,
          0.07518622279167175,
          0.07518616318702698,
          0.07518612593412399,
          0.0751861184835434,
          0.07518614828586578,
          0.07518619298934937,
          0.07518626004457474,
          0.0751863494515419,
          0.07518644630908966,
          0.07518656551837921,
          0.07518668472766876,
          0.07518681138753891,
          0.07518693804740906,
          0.0751870721578598,
          0.07518719881772995,
          0.0751873105764389,
          0.07518742978572845,
          0.07518753409385681,
          0.07518762350082397,
          0.07518769800662994,
          0.07518776506185532,
          0.0751878172159195,
          0.07518785446882248,
          0.07518788427114487,
          0.07518789172172546,
          0.07518789172172546,
          0.07518789172172546,
          0.07518786936998367,
          0.07518783956766129,
          0.0751878097653389,
          0.07518777251243591,
          0.07518772780895233,
          0.07518768310546875,
          0.07518763840198517,
          0.07518759369850159,
          0.075187548995018,
          0.07518750429153442,
          0.07518745958805084,
          0.07518742233514786,
          0.07518739253282547,
          0.07518735527992249,
          0.0751873329281807,
          0.0751873105764389,
          0.07518729567527771,
          0.07518728822469711,
          0.07518728077411652,
          0.07518728077411652,
          0.07518728077411652,
          0.07518728077411652,
          0.07518729567527771,
          0.0751873105764389,
          0.0751873105764389,
          0.0751873254776001,
          0.07518734037876129,
          0.07518735527992249,
          0.07518737018108368,
          0.07518738508224487,
          0.07518739998340607,
          0.07518741488456726,
          0.07518742233514786,
          0.07518742978572845,
          0.07518744468688965,
          0.07518744468688965,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745958805084,
          0.07518745213747025,
          0.07518744468688965,
          0.07518743723630905,
          0.07518742978572845,
          0.07518742233514786,
          0.07518741488456726,
          0.07518741488456726,
          0.07518740743398666,
          0.07518739998340607,
          0.07518739998340607,
          0.07518738508224487,
          0.07518738508224487,
          0.07518738508224487,
          0.07518737763166428,
          0.07518737763166428,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737763166428,
          0.07518737763166428,
          0.07518737763166428,
          0.07518737763166428,
          0.07518737018108368,
          0.07518737763166428,
          0.07518737763166428,
          0.07518738508224487,
          0.07518737763166428,
          0.07518738508224487,
          0.07518738508224487,
          0.07518737018108368,
          0.07518737763166428,
          0.07518737018108368,
          0.07518737763166428,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518737018108368,
          0.07518736273050308,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518735527992249,
          0.07518734782934189,
          0.07518734782934189,
          0.07518734782934189,
          0.07518734782934189,
          0.07518734782934189,
          0.07518734782934189,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734782934189,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.07518734037876129,
          0.0751873329281807,
          0.07518734037876129,
          0.07518734037876129,
          0.0751873329281807,
          0.0751873329281807,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873254776001,
          0.0751873180270195,
          0.0751873180270195,
          0.0751873105764389,
          0.0751873105764389
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Training and Validation Loss"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "Epochs"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>Training Loss</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>Validation Loss</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"38e3b6c2-9f1e-4de0-9f5e-79f701d238ec\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"38e3b6c2-9f1e-4de0-9f5e-79f701d238ec\")) {                    Plotly.newPlot(                        \"38e3b6c2-9f1e-4de0-9f5e-79f701d238ec\",                        [{\"name\":\"Training Loss\",\"y\":[0.2791779041290283,0.26323357224464417,0.2480941116809845,0.23377205431461334,0.22027745842933655,0.20761793851852417,0.19579800963401794,0.18481889367103577,0.17467844486236572,0.16537047922611237,0.15688477456569672,0.1492069661617279,0.14231812953948975,0.13619494438171387,0.1308094561100006,0.12612920999526978,0.12211750447750092,0.11873351037502289,0.11593276262283325,0.11366760730743408,0.1118878647685051,0.11054156720638275,0.10957565158605576,0.10893701016902924,0.10857326537370682,0.10843371599912643,0.10847021639347076,0.10863793641328812,0.10889605432748795,0.10920828580856323,0.10954326391220093,0.10987477749586105,0.1101817637681961,0.11044825613498688,0.11066305637359619,0.11081941425800323,0.11091449856758118,0.11094889789819717,0.11092595756053925,0.11085125803947449,0.11073198914527893,0.11057636141777039,0.11039315164089203,0.11019116640090942,0.10997890681028366,0.1097642332315445,0.10955411195755005,0.10935444384813309,0.10916998237371445,0.10900424420833588,0.1088595986366272,0.10873723030090332,0.10863737761974335,0.10855931788682938,0.10850163549184799,0.10846233367919922,0.10843901336193085,0.10842901468276978,0.10842958092689514,0.10843802988529205,0.10845179110765457,0.10846854746341705,0.10848629474639893,0.10850337147712708,0.10851846635341644,0.1085306853055954,0.10853943228721619,0.10854445397853851,0.10854575783014297,0.10854358971118927,0.10853838175535202,0.10853066295385361,0.10852102935314178,0.10851012170314789,0.10849856585264206,0.10848691314458847,0.10847567021846771,0.10846522450447083,0.10845589637756348,0.10844787955284119,0.10844128578901291,0.10843614488840103,0.10843239724636078,0.1084299087524414,0.10842853784561157,0.10842809081077576,0.10842835903167725,0.10842913389205933,0.10843022912740707,0.10843145847320557,0.10843268781900406,0.1084337905049324,0.10843469202518463,0.10843532532453537,0.10843567550182343,0.1084357500076294,0.10843554139137268,0.10843512415885925,0.1084345132112503,0.10843376815319061,0.10843296349048615,0.10843212157487869,0.10843130946159363,0.10843054205179214,0.10842986404895782,0.10842929780483246,0.10842882841825485,0.1084284782409668,0.10842825472354889,0.10842810571193695,0.10842804610729218,0.10842806100845337,0.10842812061309814,0.10842821002006531,0.10842832177877426,0.10842841863632202,0.10842850804328918,0.10842858254909515,0.10842862725257874,0.10842864215373993,0.10842864215373993,0.10842861980199814,0.10842856764793396,0.10842850804328918,0.10842844098806381,0.10842837393283844,0.10842829942703247,0.1084282323718071,0.10842817276716232,0.10842812061309814,0.10842807590961456,0.10842804610729218,0.10842803120613098,0.10842801630496979,0.10842801630496979,0.10842801630496979,0.10842801630496979,0.10842803120613098,0.10842803865671158,0.10842804610729218,0.10842804610729218,0.10842806100845337,0.10842804610729218,0.10842805355787277,0.10842804610729218,0.10842804610729218,0.10842803120613098,0.10842803120613098,0.10842801630496979,0.10842800885438919,0.1084280014038086,0.108427993953228,0.108427993953228,0.1084279865026474,0.1084279716014862,0.1084279865026474,0.1084279790520668,0.1084279716014862,0.1084279716014862,0.1084279716014862,0.1084279716014862,0.10842796415090561,0.1084279716014862,0.10842796415090561,0.10842795670032501,0.10842796415090561,0.10842795670032501,0.10842795670032501,0.10842795670032501,0.10842794924974442,0.10842795670032501,0.10842794924974442,0.10842794179916382,0.10842794179916382,0.10842794179916382,0.10842794179916382,0.10842792689800262,0.10842792689800262,0.10842793434858322,0.10842792689800262,0.10842792689800262,0.10842792689800262,0.10842792689800262,0.10842792689800262,0.10842791944742203,0.10842791944742203,0.10842791199684143,0.10842791199684143,0.10842791199684143,0.10842791199684143,0.10842790454626083,0.10842791199684143,0.10842789709568024,0.10842789709568024,0.10842789709568024,0.10842789709568024,0.10842789709568024,0.10842788964509964,0.10842788964509964,0.10842788964509964,0.10842788964509964,0.10842788219451904,0.10842788219451904,0.10842788219451904,0.10842787474393845,0.10842787474393845,0.10842787474393845,0.10842787474393845,0.10842786729335785,0.10842786729335785,0.10842786729335785,0.10842786729335785,0.10842785984277725,0.10842785239219666,0.10842785984277725,0.10842785239219666,0.10842784494161606,0.10842785239219666,0.10842784494161606,0.10842783749103546,0.10842783749103546,0.10842783749103546,0.10842784494161606,0.10842783749103546,0.10842783749103546,0.10842782258987427,0.10842782258987427,0.10842783004045486,0.10842782258987427,0.10842782258987427,0.10842782258987427,0.10842782258987427,0.10842780768871307,0.10842780768871307,0.10842780768871307,0.10842780768871307,0.10842780768871307,0.10842780768871307,0.10842780023813248,0.10842780023813248,0.10842780768871307,0.10842780023813248,0.10842779278755188,0.10842779278755188,0.10842777788639069,0.10842777788639069,0.10842777788639069,0.10842777788639069,0.10842777788639069,0.10842777788639069,0.10842777043581009,0.10842777788639069,0.10842776298522949,0.10842776298522949,0.10842776298522949,0.10842776298522949,0.1084277555346489,0.1084277480840683,0.10842776298522949,0.1084277480840683,0.1084277555346489,0.1084277480840683,0.1084277480840683,0.1084277406334877,0.1084277331829071,0.1084277406334877,0.1084277331829071,0.1084277331829071,0.1084277331829071,0.10842772573232651,0.10842772573232651,0.10842771828174591,0.10842771828174591,0.10842771828174591,0.10842771828174591,0.10842771083116531,0.10842771083116531,0.10842771083116531,0.10842770338058472,0.10842770338058472,0.10842769593000412,0.10842770338058472,0.10842768847942352,0.10842768847942352,0.10842768847942352,0.10842768847942352,0.10842768102884293,0.10842768847942352,0.10842767357826233,0.10842767357826233,0.10842767357826233,0.10842767357826233,0.10842766612768173,0.10842766612768173,0.10842765867710114,0.10842766612768173,0.10842765867710114,0.10842765867710114,0.10842765122652054,0.10842765867710114],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"name\":\"Validation Loss\",\"y\":[0.23451882600784302,0.21904754638671875,0.20440559089183807,0.1906033456325531,0.177648663520813,0.1655462682247162,0.15429764986038208,0.1439007967710495,0.13434962928295135,0.12563396990299225,0.1177394837141037,0.1106472909450531,0.10433387756347656,0.09877116978168488,0.09392654150724411,0.08976300060749054,0.08623936772346497,0.0833108052611351,0.08092927187681198,0.07904405891895294,0.07760267704725266,0.07655154913663864,0.07583694159984589,0.07540591061115265,0.07520712912082672,0.07519185543060303,0.07531468570232391,0.07553423196077347,0.0758136659860611,0.07612112164497375,0.07642991095781326,0.07671856135129929,0.07697069644927979,0.07717478275299072,0.07732375711202621,0.07741450518369675,0.07744734734296799,0.07742542773485184,0.07735411822795868,0.07724040746688843,0.07709231972694397,0.07691845297813416,0.07672742009162903,0.07652756571769714,0.07632654905319214,0.07613115012645721,0.0759470984339714,0.07577891647815704,0.07562994211912155,0.07550232112407684,0.07539708912372589,0.0753142237663269,0.07525286078453064,0.07521139085292816,0.07518763840198517,0.07517905533313751,0.07518284022808075,0.07519615441560745,0.07521617412567139,0.07524027675390244,0.07526610791683197,0.07529160380363464,0.07531511038541794,0.07533535361289978,0.07535141706466675,0.07536278665065765,0.07536926120519638,0.07537094503641129,0.07536816596984863,0.07536143064498901,0.07535138726234436,0.07533873617649078,0.07532423734664917,0.07530860602855682,0.07529249042272568,0.07527651637792587,0.0752611756324768,0.07524685561656952,0.07523385435342789,0.07522235810756683,0.07521243393421173,0.07520411908626556,0.07519731670618057,0.0751919224858284,0.07518777996301651,0.07518470287322998,0.07518250495195389,0.0751810222864151,0.0751800611615181,0.07517948001623154,0.07517915964126587,0.07517899572849274,0.07517892867326736,0.07517890632152557,0.07517889887094498,0.07517890632152557,0.07517895102500916,0.07517901062965393,0.07517915964126587,0.07517937570810318,0.07517969608306885,0.07518012821674347,0.07518069446086884,0.07518137991428375,0.07518218457698822,0.07518308609724045,0.07518406212329865,0.07518509775400162,0.07518614828586578,0.07518720626831055,0.07518821954727173,0.07518918812274933,0.07519005239009857,0.07519082725048065,0.07519146800041199,0.07519198209047318,0.07519236207008362,0.07519260048866272,0.07519271969795227,0.07519270479679108,0.07519258558750153,0.07519236952066422,0.07519207894802094,0.07519170641899109,0.07519128918647766,0.07519084215164185,0.07519038021564484,0.07518989592790604,0.07518942654132843,0.07518896460533142,0.0751885324716568,0.07518813014030457,0.07518775761127472,0.07518741488456726,0.07518711686134338,0.07518686354160309,0.07518664002418518,0.07518646121025085,0.07518632709980011,0.07518622279167175,0.07518616318702698,0.07518612593412399,0.0751861184835434,0.07518614828586578,0.07518619298934937,0.07518626004457474,0.0751863494515419,0.07518644630908966,0.07518656551837921,0.07518668472766876,0.07518681138753891,0.07518693804740906,0.0751870721578598,0.07518719881772995,0.0751873105764389,0.07518742978572845,0.07518753409385681,0.07518762350082397,0.07518769800662994,0.07518776506185532,0.0751878172159195,0.07518785446882248,0.07518788427114487,0.07518789172172546,0.07518789172172546,0.07518789172172546,0.07518786936998367,0.07518783956766129,0.0751878097653389,0.07518777251243591,0.07518772780895233,0.07518768310546875,0.07518763840198517,0.07518759369850159,0.075187548995018,0.07518750429153442,0.07518745958805084,0.07518742233514786,0.07518739253282547,0.07518735527992249,0.0751873329281807,0.0751873105764389,0.07518729567527771,0.07518728822469711,0.07518728077411652,0.07518728077411652,0.07518728077411652,0.07518728077411652,0.07518729567527771,0.0751873105764389,0.0751873105764389,0.0751873254776001,0.07518734037876129,0.07518735527992249,0.07518737018108368,0.07518738508224487,0.07518739998340607,0.07518741488456726,0.07518742233514786,0.07518742978572845,0.07518744468688965,0.07518744468688965,0.07518745958805084,0.07518745958805084,0.07518745958805084,0.07518745958805084,0.07518745958805084,0.07518745958805084,0.07518745958805084,0.07518745213747025,0.07518744468688965,0.07518743723630905,0.07518742978572845,0.07518742233514786,0.07518741488456726,0.07518741488456726,0.07518740743398666,0.07518739998340607,0.07518739998340607,0.07518738508224487,0.07518738508224487,0.07518738508224487,0.07518737763166428,0.07518737763166428,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737763166428,0.07518737763166428,0.07518737763166428,0.07518737763166428,0.07518737018108368,0.07518737763166428,0.07518737763166428,0.07518738508224487,0.07518737763166428,0.07518738508224487,0.07518738508224487,0.07518737018108368,0.07518737763166428,0.07518737018108368,0.07518737763166428,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518737018108368,0.07518736273050308,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518735527992249,0.07518734782934189,0.07518734782934189,0.07518734782934189,0.07518734782934189,0.07518734782934189,0.07518734782934189,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.07518734782934189,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.07518734037876129,0.0751873329281807,0.07518734037876129,0.07518734037876129,0.0751873329281807,0.0751873329281807,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873254776001,0.0751873180270195,0.0751873180270195,0.0751873105764389,0.0751873105764389],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"Epochs\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>Training Loss</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>Validation Loss</b>\"}},\"title\":{\"text\":\"Training and Validation Loss\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('38e3b6c2-9f1e-4de0-9f5e-79f701d238ec');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "history = fit_history3\n",
    "#plot the training and validation accuracy and loss at each epoch\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=loss, name=\"Training Loss\"),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=val_loss, name=\"Validation Loss\"),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Training and Validation Loss\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"Epochs\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Training Loss</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>Validation Loss</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "RzhUOTEdWANu",
    "outputId": "eaccca40-3bf5-406a-8094-1e34c0b949fc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE 0.2983479137109697\n",
      "RMSE 1.2431322368498061e-05\n",
      "dRMSE [0.12309208]\n",
      "MAE 0.2888150272503371\n",
      "RMSE 1.1778180600430979e-05\n",
      "dRMSE [0.05914464]\n",
      "MAE 0.2831642433990742\n",
      "RMSE 1.0488960352153917e-05\n",
      "dRMSE [0.03486741]\n",
      "MAE 0.3011122316249947\n",
      "RMSE 1.323440344814308e-05\n",
      "dRMSE [0.046437]\n",
      "MAE 0.31552840786084496\n",
      "RMSE 1.4099399062758194e-05\n",
      "dRMSE [0.06884051]\n",
      "MAE 0.3031926845222764\n",
      "RMSE 1.3379774977071279e-05\n",
      "dRMSE [0.05274605]\n",
      "MAE 0.2918465776313473\n",
      "RMSE 1.1274375472255825e-05\n",
      "dRMSE [0.03968451]\n",
      "MAE 0.30370280014754714\n",
      "RMSE 1.3127908453391052e-05\n",
      "dRMSE [0.08095029]\n",
      "\n",
      "MAE 0.29821373576842397\n",
      "RMSE 1.2476790591837799e-05\n",
      "dRMSE 0.06322030920210542\n"
     ]
    }
   ],
   "source": [
    "def difference(dataset, interval=1):\n",
    "\tdiff = list()\n",
    "\tfor i in range(interval, len(dataset)):\n",
    "\t\tvalue = dataset[i] - dataset[i - interval]\n",
    "\t\tdiff.append(value)\n",
    "\treturn pd.Series(diff)\n",
    " \n",
    "\n",
    "dy_true = difference(newdatay)\n",
    "dy_pred = difference(pred_aus)\n",
    "\n",
    "#Error Estimation\n",
    "print('MAE', (MAE(newdatay, pred_aus))[0,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[0,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[0,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[1,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[1,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[1,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[2,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[2,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[2,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[3,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[3,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[3,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[4,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[4,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[4,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[5,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[5,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[5,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[6,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[6,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[6,:])\n",
    "print('MAE', (MAE(newdatay, pred_aus))[7,:].mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus))[7,:].mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred))[7,:])\n",
    "\n",
    "print()\n",
    "print('MAE', (MAE(newdatay, pred_aus)).mean())\n",
    "print('RMSE', (RMSE(newdatay, pred_aus)).mean())\n",
    "print('dRMSE', (dRMSE(dy_true, dy_pred)).mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>86893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>66866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>72182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>68318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>85651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>64467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>70416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>72855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>80385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>67967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>69849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>71445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>83938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>63529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>75540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>75663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>83860</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    total\n",
       "0   84503\n",
       "1   65312\n",
       "2   72753\n",
       "3   70880\n",
       "4   86893\n",
       "5   66866\n",
       "6   72182\n",
       "7   68318\n",
       "8   85651\n",
       "9   64467\n",
       "10  70416\n",
       "11  72855\n",
       "12  80385\n",
       "13  67967\n",
       "14  69849\n",
       "15  71445\n",
       "16  83938\n",
       "17  63529\n",
       "18  75540\n",
       "19  75663\n",
       "20  83860"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_daily_df[:21]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>71036.948669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>71781.003151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>85888.281898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>67318.046753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>73435.997192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>63428.281898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>82974.046753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>67118.997192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>66118.985687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>69492.991291</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           total\n",
       "21  71036.948669\n",
       "22  71781.003151\n",
       "23  85888.281898\n",
       "24  67318.046753\n",
       "25  73435.997192\n",
       "..           ...\n",
       "79  63428.281898\n",
       "80  82974.046753\n",
       "81  67118.997192\n",
       "82  66118.985687\n",
       "83  69492.991291\n",
       "\n",
       "[63 rows x 1 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted forecast for next 8 steps\n",
    "forecast1_df = pd.DataFrame(pred_aus[1:,0,:], index = list(range(21,28))) \n",
    "forecast2_df = pd.DataFrame(pred_aus[:,1,:], index = list(range(28,36))) \n",
    "forecast3_df = pd.DataFrame(pred_aus[:,2,:], index = list(range(36,44))) \n",
    "forecast4_df = pd.DataFrame(pred_aus[:,3,:], index = list(range(44,52))) \n",
    "forecast5_df = pd.DataFrame(pred_aus[:,4,:], index = list(range(52,60))) \n",
    "forecast6_df = pd.DataFrame(pred_aus[:,5,:], index = list(range(60,68)))\n",
    "forecast7_df = pd.DataFrame(pred_aus[:,6,:], index = list(range(68,76)))\n",
    "forecast8_df = pd.DataFrame(pred_aus[:,7,:], index = list(range(76,84)))\n",
    "\n",
    "\n",
    "forecast_df = pd.concat([forecast1_df, forecast2_df,\n",
    "                        forecast3_df, forecast4_df,\n",
    "                        forecast5_df, forecast6_df,\n",
    "                        forecast7_df, forecast8_df]) \n",
    "\n",
    "for i in range(len(test.columns)):\n",
    "    forecast_df = forecast_df.rename(columns={i: df.iloc[:,88:89].columns[i]})\n",
    "forecast_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting x-axis for visualization of plots\n",
    "x = list(range(21, 21+len(pred_aus.flatten())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "#0000ff"
         },
         "name": "Prev Trained Values",
         "type": "scatter",
         "xaxis": "x",
         "y": [
          84503,
          65312,
          72753,
          70880,
          86893,
          66866,
          72182,
          68318,
          85651,
          64467,
          70416,
          72855,
          80385,
          67967,
          69849,
          71445,
          83938,
          63529,
          75540,
          75663,
          83860
         ],
         "yaxis": "y"
        },
        {
         "line": {
          "color": "darkgreen"
         },
         "name": "Forecast",
         "type": "scatter",
         "x": [
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84
         ],
         "xaxis": "x",
         "y": [
          67402.85986328125,
          71598.85986328125,
          71867.85986328125,
          86061.85986328125,
          67190.85986328125,
          74049.85986328125,
          70426.85986328125,
          86201.85986328125,
          71036.9486694336,
          71305.9486694336,
          85499.9486694336,
          66628.9486694336,
          73487.9486694336,
          69864.9486694336,
          85639.9486694336,
          59284.948669433594,
          71781.00315093994,
          85975.00315093994,
          67104.00315093994,
          73963.00315093994,
          70340.00315093994,
          86115.00315093994,
          59760.00315093994,
          66969.00315093994,
          85888.28189849854,
          67017.28189849854,
          73876.28189849854,
          70253.28189849854,
          86028.28189849854,
          59673.281898498535,
          66882.28189849854,
          63428.281898498535,
          67318.04675292969,
          74177.04675292969,
          70554.04675292969,
          86329.04675292969,
          59974.04675292969,
          67183.04675292969,
          63729.04675292969,
          82974.04675292969,
          73435.99719238281,
          69812.99719238281,
          85587.99719238281,
          59232.99719238281,
          66441.99719238281,
          62987.99719238281,
          82232.99719238281,
          67118.99719238281,
          70397.98568725586,
          86172.98568725586,
          59817.98568725586,
          67026.98568725586,
          63572.98568725586,
          82817.98568725586,
          67703.98568725586,
          66118.98568725586,
          85940.99129104614,
          59585.99129104614,
          66794.99129104614,
          63340.99129104614,
          82585.99129104614,
          67471.99129104614,
          65886.99129104614,
          69492.99129104614
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Visualization of trained data vs 8 steps future forecasting"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          0.94
         ],
         "title": {
          "text": "examples"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "<b>actual features</b>"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "side": "right",
         "title": {
          "text": "<b>predictions features</b>"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"e04e62e0-06a1-4643-b7b9-056fb1a6228a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e04e62e0-06a1-4643-b7b9-056fb1a6228a\")) {                    Plotly.newPlot(                        \"e04e62e0-06a1-4643-b7b9-056fb1a6228a\",                        [{\"line\":{\"color\":\"#0000ff\"},\"name\":\"Prev Trained Values\",\"y\":[84503,65312,72753,70880,86893,66866,72182,68318,85651,64467,70416,72855,80385,67967,69849,71445,83938,63529,75540,75663,83860],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"line\":{\"color\":\"darkgreen\"},\"name\":\"Forecast\",\"x\":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],\"y\":[67402.85986328125,71598.85986328125,71867.85986328125,86061.85986328125,67190.85986328125,74049.85986328125,70426.85986328125,86201.85986328125,71036.9486694336,71305.9486694336,85499.9486694336,66628.9486694336,73487.9486694336,69864.9486694336,85639.9486694336,59284.948669433594,71781.00315093994,85975.00315093994,67104.00315093994,73963.00315093994,70340.00315093994,86115.00315093994,59760.00315093994,66969.00315093994,85888.28189849854,67017.28189849854,73876.28189849854,70253.28189849854,86028.28189849854,59673.281898498535,66882.28189849854,63428.281898498535,67318.04675292969,74177.04675292969,70554.04675292969,86329.04675292969,59974.04675292969,67183.04675292969,63729.04675292969,82974.04675292969,73435.99719238281,69812.99719238281,85587.99719238281,59232.99719238281,66441.99719238281,62987.99719238281,82232.99719238281,67118.99719238281,70397.98568725586,86172.98568725586,59817.98568725586,67026.98568725586,63572.98568725586,82817.98568725586,67703.98568725586,66118.98568725586,85940.99129104614,59585.99129104614,66794.99129104614,63340.99129104614,82585.99129104614,67471.99129104614,65886.99129104614,69492.99129104614],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94],\"title\":{\"text\":\"examples\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"<b>actual features</b>\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"<b>predictions features</b>\"}},\"title\":{\"text\":\"Visualization of trained data vs 8 steps future forecasting\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('e04e62e0-06a1-4643-b7b9-056fb1a6228a');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "prev_values = first_daily_df[:21].values.flatten() # previous values - used of training\n",
    "\n",
    "forc_values = pred_aus.flatten()\n",
    "\n",
    "# Add traces\n",
    "fig.add_trace(\n",
    "    go.Scatter(y=prev_values, name=\"Prev Trained Values\",line=dict(color=\"#0000ff\")),\n",
    "    secondary_y=False,\n",
    ")\n",
    "\n",
    "fig.add_trace(\n",
    "    go.Scatter(x= x, y=forc_values, name=\"Forecast\",line=dict(color=\"darkgreen\")),\n",
    "    secondary_y=True,\n",
    ")\n",
    "\n",
    "# Add figure title\n",
    "fig.update_layout(\n",
    "    title_text=\"Visualization of trained data vs 8 steps future forecasting\"\n",
    ")\n",
    "\n",
    "# Set x-axis title\n",
    "fig.update_xaxes(title_text=\"examples\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>actual features</b>\", secondary_y=False)\n",
    "fig.update_yaxes(title_text=\"<b>predictions features</b>\", secondary_y=True)\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "DLSTM - Hierarchical Time Series Forecasting.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "TensorFlow-GPU",
   "language": "python",
   "name": "tf-gpu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
